userid,今日の内容で、分かったこと・できたことを書いてください,今日の内容で、分からなかったこと・できなかったことを書いてください,今日の内容を自分なりの言葉で説明してみてください,今日の授業の感想や反省を書いてください,質問があれば書いてください
B-2020_U10,著作権は著作者だけでなく、著作物に関わる人にも権利があるということを知った,,,,
B-2020_U13,,,,日頃から無意識的に著作権を侵害していないか注意深く考えておきたいなと思います。,
B-2020_U14,,,知的財産権の中の著作権について、著作物の定義や著作者の権利など,,
B-2020_U15,著作権に種類があることがわかりました。何が著作物にあたるのかわかりました。伝達者が著作者隣接権を持つことがわかりました。著作権侵害には罰があることがわかりました。例外的に著作物を利用できるケースがわかりました。,無いです。,知的財産権の中には著作権、産業財産権やその他の権利があり、著作権の中には著作者の権利、著作隣接権がある。著作者の権利は著作権とも言われ、さらに著作者人格権、財産権に分けられる。財産権も著作権と呼ぶ場合がある。著作者人格権は著作者の感情を保護するもので死後消滅し、譲渡できない。財産権は利益を守るもので譲渡できる。著作者隣接権は伝達するものの権利である。他人の著作物の利用には許可をとるのが原則だが、例外的に利用できる場合がある。著作権を侵害した場合は民法や刑法で裁かれる。,,
B-2020_U16,"知的財産権、著作権についての詳細
著作物の基準（著作物に当たらないものとの差異）
著作物等の例外的な無断利用について",,,,
B-2020_U17,,,,,どうして映画だけ保護期間が長く設定されているのでしょうか。
B-2020_U18,,,,ネット上に違法にアップロードされた著作物が大量にある現在、著作権侵害には特に気をつけて行きたいと思う。,
B-2020_U19,自分の書いたレポートや感想にも著作権が付与されていると理解することができた。自由に創造活動を行うための場所が社会に作られているとわかった。,著作人格権などは消滅後も侵害してはならないとされている意味がわからなかった。,知的な創作活動を行い何かを作り出した人が不幸を被らないように法律によって権利が付与されている（創造物の形態によって細かく権利が付与されている）。ただし、保護期間が設けられており、人格権の侵害となるような行為は原則取り締まられているが、著作物等の権利は消滅し社会全体の共有財産として自由に利用される。,これから研究していく際、著作権を侵害しないことも、著作権を主張することも重要なことだと感じた。授業後も権利についてわからないことは多く知識も定着できていないので、もっと予習に時間をかけようと思った。,
B-2020_U21,,著作物に値しないものについて、わかっていたつもりになってよく確認したいなかったために、アイディアが著作物に含まれないという部分を見落としていた。,,"映画の著作権や著作者に値する人が、他の著作物と少し違うという話は知らなかったので、この機会に学ぶことができてよかったです。
無断で使用していい事例について、とても大切なことなので自分でも詳しく調べてみようと思いました。",
B-2020_U22,,,著作権法によってかなり細かいところまで著作者や著作物に対する権利が規定されており、それを違反した場合の措置も明確に書かれている。,,
B-2020_U23,著作権はアイディアやデータなどには発生しないということ。また、複数人で作った制作物には著作隣接権が関わってくる。,,知的財産権の一つが著作権である。著作権は著作物を制作した時点で発生し、著作者人格権と著作権（財産権）が付与される。,,"YouTube に投稿されている動画にも著作権は発生していますか？
"
B-2020_U24,,,,著作権については芸術工学部だけでなく、ある人の論文の引用なんかにも関わることなのでとてもタメになった。他人の著作物を使うときはしっかり著作権について意識を向けようと思った。,
B-2020_U26,,,,最近はSNSの発達により、著作物の発信も転載も多く見受けられます。そこの発見をどうやって早くできるようになるかが気になります。,
B-2020_U27,,,,今、インターネットが普及していてその分不正な方法で映画や音楽がアップロードされている場合が多いと思いますが、著作権のことも考えて、自分で不正かどうか見極められる場合はこれからも視聴しないでおこうと思いました。,
B-2020_U29,,,知的財産権の一つである著作権は著作権法によって細かく規定されている。,,
B-2020_U30,,,著作権について,,
B-2020_U31,著作権はデータや情報技術の進歩と主に頻繁に改定されており、様々な種類と用途に合わせた例外がある。例えば、保護期間は著作者の死後70年であるが、実演家は生存期間のみで映画は公表されてから70年である。,,今日は、著作権について学びました。知的財産権の一部であり、創作した瞬間から与えられます。著作者だけでなく、実演家にも与えられる権利であり、作った人、関わった人を精神的に経済的に守るためのものです。それが侵害された時には対抗措置が与えられます。,著作権という言葉は知っていましたが、ここまで詳しく学んだのは初めてでした。自分たちの身の回りには創作物であるれているので、著作権を侵害しないように保護期間や著作物の扱い方の知識を得て、正しく利用していきたいと思いました。,
B-2020_U32,知的財産権にどんなものがあるか、それが何をどのくらいの期間保護するものなのかがわかった。,,,無断利用については様々な条件があって、料金を払わなければならないような条件もあるということで、レポートなどに引用する際にもきちんと注意したいと思いました。,
B-2020_U33,,どこに申請すれば著作物を利用できるのか、利用の仕方がわからなかった。,,,
B-2020_U34,,,知的財産権の一つに著作権があり、著作権は文芸、学術、美術、音楽などの創作物が対象となる。創作者が精神的に傷つけられないように、著作人格権がある。著作権は創作された時点で自動的に与えられる。また。著作者の権利（著作権・著作人格権）の他に、実演家等の権利もある。著作権や著作隣接権などの権利には保護期間がある。例外的に無断利用できるのは、私的利用や教育・福祉のための利用などの場合である。,,
B-2020_U35,,,,複製を行うときには気をつけようと思った,
B-2020_U36,"著作権の適用期間
著作権は人だけに適用されるわけではないこと",,,学校の文化祭などでアニメのキャラクターやcmを模した映像を使用した際少し著作権について調べていたのでその内容を詳しく知れてよかったです。,
B-2020_U38,,,,著作権という言葉自体はよく耳にするし、すごくなじみもあるのに、その実態をきちんと知らなかったのを、学ぶことができて、大変よかった。それと同時にスマートフォンやパソコンが今は小さい子にも普及してて守られるべきものが守られていないんだなあと悲しい気持ちにもなった。,
B-2020_U39,,,著作権は著作物を創作した時点で自動的に付与され、それにより著作者人格権や財産権などの著作者を守るための権利が保証される。また、著作物を伝達する者も著作者隣接権で守られる。,,
B-2020_U4,,,"知的財産権は知的な創作活動によって何かを作り出した人に対して付与される、他人に無断で利用されない権利である。
その中の一つに著作権がある。
著作者人格権は生存している期間、著作者を精神的に守る。
著作権は生存している期間+70年間、著作物を守る。
日本の法律で守れる著作物は国籍・発行地・条約の条件を満たすものだが、世界各国に著作権法があり、多国籍条約で世界で著作権保護を図っている。
著作隣接権や著作権の譲渡、出版権の設定などで著作者以外に著作物を扱う者について規定されている。
著作物の例外的無断利用には私的利用、付随対象著作物の利用、教育関係など多くの場合がある。常に意識して確認を怠らないことが重要である。",交通違反の次に引っかかる可能性のある著作権法だと思っているので、知識をしっかり持っていたい。,楽譜を買った時は、著作権料が含まれているので公共の演奏をしても問題ないのでしょうか？
B-2020_U40,"著作物の種類によって著作権の保護期間が違ったりするので注意が必要。
他人の著作物を使用する際は最新の注意が必要。",,,,
B-2020_U41,"著作物は家庭内などに限定された私的利用が許されている。
アイデアは著作権対象外。
著作権と一言に言っても様々。",,知的財産権は著作権を包括する。著作者人格権は保護権、公表権、氏名表示権からなる。著作権は譲渡権、貸与権、頻布権、二次創作を作られたり、利用されたりしない権利からなる。著作物を実演したものについても著作隣接権が与えられる。,著作権に関して非常に多くのルールがありました。今はインターネットなどで調べれば著作権に関しての情報はいつでもアクセスできるようになっているので、これらを丸暗記というようよりは「このようなルールがある」ということを頭の片隅に入れ、必要な時に正しく取り出して活用できる技術を身につけようと思います。,
B-2020_U43,アイディアの段階では著作権は適応されないこと。,,,,
B-2020_U44,,テストで満点が取れるくらいに理解することができなかった,,今まで著作権という言葉を日頃からよく使ってはいたものの、実際にどのような仕組みなのかはあまり知らなかったので、今回の授業で知ることができて良かった,
B-2020_U45,,著作隣接権が与えられる基準がよくわからなかった。,,「アイデアを盗まれた」などの言葉をよく聞くがアイデアは著作物ではないと知って、迂闊にアイデアを人に話すものではないなと思った。,
B-2020_U46,著作権は著作者だけでなく、実演者も守ること、その実演者の範囲がわかった。,,著作権とは知的財産権に含まれ、著作者の財産と精神を守るためのにあり、著作権、著作者人格権がある。また、実演者というその著作物を伝えた者を守る為のものもある。こちらには著作隣接権、実演者人格権が含まれる。著作物とは「思想または感情を創作的に表現したもの」をさす。この著作権は、基本的に、日本国民が国内で製作したものを保護するものであり、外国の著作物については各国で条約を結ぶなどして保護している。著作権に守られている為、他者は勝手に著作物を公表したり改変したりは出来ない。著作物を利用する際は原則として権利者の了解が必要だ。しかし、著作物には保護期間があり、これを過ぎていれば了解を取る必要はない。また、家庭などのの限られた範囲内での私的利用にも了解を取る必要はない。このほかにも、教育に使用する場合など、特例で了解をとらな来ても良い場合がある。近年のインターネットの発達などによって、新たに対応しなければならない事例が増え、平成30年にも改定がなされている。,"ありがとうございました。
以前高校の課題で著作権について調べたことはあったのですが、そのものの内容にしか触れることができていなかったので、実演者の権利や特例など、しっかり頭に入れていこうと思います。",
B-2020_U47,,,,,曲を作った時に「この曲はだれでも自由に使っていい」と書けば問題ないですか？
B-2020_U49,"・著作権とそれにまつわる他の権利などについて整理し、理解することができた。
・小テストで満点を取ることができた。",特にありません。,,,
B-2020_U5,作品の著作権が死後50年だと思っていたが、死後70年が正しいと知って、こういった間違いは講義後半でも学んだが、刑事や民事の対抗措置が取られる事態につながると知って、曖昧な解釈で物事を進めないようにしようと思った。,（２）で書いた著作権が死後50年だと思っていたのが過去、そうだったのかの確信はないのだが、もし今後そういうふうに著作権が伸びた場合、伸びた時点で著作権が切れていても改正後著作権が保護される期間に入る作品はどういう扱いになるのだろうと思った。,著作権に関わる、詳しい内容や周辺の権利について学ぶという内容。,,
B-2020_U50,著作物の権利に期限があったこと,,著作権は著作者本人と著作に関わった人にある。また、著作権には人格権と財産権があり著作物の使用と著作者の自身について保護されるがそれには期間が設けられている。最近の情報や著作者の性質の変化に伴って著作権法にも改定がなされている。,,
B-2020_U52,,,,コンピュータ社会が進んでいく中で、自分が権利を侵害しないように常に変わっている法についても意識していかなければならいなと思いました。,
B-2020_U53,,,,違法にアップロードされた動画や音楽を見たり聞いたりしたことがあったので、やめようと思いました。ちゃんとその作品を作った人に利益がいくような作品の楽しみ方をしたいです。,
B-2020_U54,たくさんの種類の著作権があることを学んだ。アイデアは著作物かと思っていたがそうでないと知った。,,,,
B-2020_U58,著作権と知的財産権の関係や、著作権の守られ方についてよく分かりました。,今回は特にありませんでした。,,今回はマーカー機能をたくさん利用したのでとても理解できました。次回も利用したいです。,
B-2020_U59,,,著作権には茶作者人格権と著作権（財産権）、保護期間がある。著作権とは思想・感情、創作、アイデアの表現、文芸・学術・美術・音楽の要素を含むもの。無断使用が可能なこともあるが制約がある。,,
B-2020_U6,"著作者人格権と著作権の違いや著作権がどのようなものにどれほどの期間与えられるのかについてわかりました。
",,著作権についてやその対象、著作権の対象外となる場合について。,今まで著作権というものは知ってはいたけれど、こんなに詳しくはわかっていなかったのでこんなに細かく決まっていることを知って驚きました。どのようなときに著作権の対象外になるのかが適切に判断できるようになりたいです。,
B-2020_U60,著作権と知的財産権の包含関係、著作物の定義、著作物の例外的無断利用が可能な事例,,,,
B-2020_U61,,,,学部柄将来何かを作る可能性が大いにあるため今回の授業で学んだことは忘れないようにしたいです。,
B-2020_U62,,特にありません,,,特にありません
B-2020_U64,,,,著作権侵害になるような行為を学んだのでそのような行為をしないように気をつけていきたい,
B-2020_U65,,著作権侵害にあたる行動のライン引きが曖昧のままになってしまいました。,,,
B-2020_U66,著作権は著作者のみではなく、実演家やレコード会社、放送事業者にも著作隣接権という権利があるというのを知りませんでした。例外的に無断使用ができるということもわかりました。,,色々な種類の著作権や著作者人格権などについて、何が著作権の対象になるか、例外的な無断使用の判断,アイデアがもし著作権に入っていたら、私が先に思いついたと主張する人同士の争いが起きそうだなあと思いました。アイデアが著作権に含まれないということは、ドラマでよくある、自分のアイデアを盗まれてそっちの方が評価されて恨んで殺すという事件は、法的には盗んだ人は悪くなく、殺した人が悪くなってしまうと思うと可哀想だなと思いました。人を殺してしまうほど著作権というのは大事なんですね。,
B-2020_U67,,小テストが1問わかりませんでした。,,,
B-2020_U68,,,著作権に関する様々な法律に関して学んだ,著作権について大まかに分かった。この法律を十分に理解して今後自分に権利者として関係してくることもあるかもしれないのでよく覚えておこうと思った。,
B-2020_U69,著作権には想像以上に多くの規定や条件があり、使用の際にも注意しなければならない点が多く存在する。,,著作者をはじめとした人々を守るために多くの場合の事例に関して権利が付与される。,自分の専攻に関係ある範囲だったので自分でもより詳しく調べていきたい。,特にありません。
B-2020_U70,著作権の詳しい概要や、例外的に使用できることなどが分かった。,,著作権について。,,
B-2020_U71,,,,本日の授業ありがとうございました。ありがとうございました。,
B-2020_U73,,,,いつもより集中して聴けていたので理解度も高かった。,
B-2020_U74,「著作者人格権」というものを初めて知った。,,,,特にありません。
B-2020_U75,単に著作権と言っても、いろんな種類があることがわかった,,著作権の種類とその内容,,
B-2020_U76,,,,大学に入り、レポートなどを書く機会が増え、著作権に関しては改めてしっかりと学ぶべきだと思っていたので学べてよかった,
B-2020_U78,著作者として認められる形態の種類や著作権の適用範囲、また隣接著作権の適用範囲について知ることができた。,特にありません。,,Teamsに不具合が生じたときに、連絡や対応の確認などのためにチャットルームを使うことが思いつかず、混乱してしまったので、使うべきものをきちんと使えるようにしたい。,
B-2020_U79,,全て頭にいれることはできなかった。,,かなり難しい内容なので、著作物を扱う機会があったらもう一度確認してみようと思った。,
B-2020_U8,著作物の使用方法がわかった。様々な権利があり、著作物によって権利が働く期間が違うことがわかった。,,,著作権や知的財産権は、現代を生きる中で重要な法律であり、将来的にこれらの知識が必要になるかも知れないので、復習して、理解を深めていきたい。,
B-2020_U80,ほとんど名前しか聞いたことがなく社会で使われている文脈からその意味を大雑把に理解していた「知的財産権」や「著作権」という言葉の内容を理解することができた。,,知的財産権の分類、内容、例外はどうのようなものか。,,
B-2020_U81,,,,,様々な権利の保護期間が、全て約７０年間なのはなぜですか？
B-2020_U85,,法人著作についての理解がまだ甘い,,法律関係は具体例を挙げて説明していただけると嬉しいです,
B-2020_U86,例外的な無断利用の範囲について知ることができました。,予習ができてませんでした。,著作権について関連する権利が複数あるが、それらに関する知識と共にとくに例外的な無断利用についての知識を身につけることが日常生活において重要となる。,,
B-2020_U87,,,,著作権は人の創作活動を守る大事な権利だと分かった。色々な権利によって色々な場面に対応しているのだなと思った。,
B-2020_U9,,今日の授業はきちんと理解できたと思います。,著作権は知的財産権のうちに含まれており、著作権の内には著作者の権利と著作隣接権がある。これは特許権や商標権の含まれる産業財産権とは別のものである。著作者の権利の中には著作者人格権と財産権があり、映画監督などの持つ権利に著作隣接権がある。著作物として認められるものは著作者の思想や感情を表現したものであり、表現していないアイデアは著作物として認められない。また、著作者人格権は著作者を不用意に傷つけられないように保護するために認められている。著作物を利用する際には基本的には著作者の了承を得なければならないが著作権の期間が切れた後なら了承を得なくても利用できる。,,
B-2020_U91,,,,自分で調べようと思ってもなかなか完全な認識にいたらない著作権を、詳しくしれてよかった。,
B-2020_U92,,大体理解できたと思う,,,
B-2020_U93,,,,今までもこれからも人生で大事だなと思いました。,
B-2020_U95,,,著作権にてついて、法律の解説と著作物の具体例など。,,
C-2021-1_U10,,,"色々なソートの種類とその計算時間量や比較回数
",時間計算量を少なくするために様々なソートが存在することが分かった。それぞれのソートの性質や利点、欠点を理解したうえで、正しく使えるようにしておきたい。オーダー記法の立式の仕方がよく分からなかったので、まずオーダーがどのようなものなのかを復習し、練習問題などを通して自分で解けるようにしたい。今回習ったソートが混ざって曖昧にならないようにしなくてはいけないと思った。,
C-2021-1_U100,,,いろいろなソートについて。,,
C-2021-1_U101,,,,（３）でも記した通りヒープソートや二分木について未だ理解できていないので課題を通して復習をしていきたい,
C-2021-1_U104,バブルソート、選択ソート、二進木、ヒープソートとは何かの理解,ヒープソートの最悪計算量の考察,,,
C-2021-1_U105,時間計算量とは入力されたaに対して、各手順を実行するのにかかる時間の総和のことである。計算量を入力nの関数と考え、nの中で最も計算に時間がかかる計算量を最悪計算量という。,,ある順序に並びかえることをソートという。バブルソートとは隣り合ったものを順々に比べて並び替えるものである。選択ソートとは、最大のものを選択し一番後ろにおいてく方法である。2進木を使ったソートが自分的には分かりやすかったが、この方法は元の並び方によっては、とても多い計算量が必要になる。この問題を解決したのがヒープソートで、深さdの節点は２のｄ乗あるものである。,オーダー記法が分からないと、これからアルゴリズムの計算量もわからなくなってくると思うので、困りました。とりあえずオーダー記法について理解したいと思います。それぞれのソートについても一般的な式で表されると、拒絶してしまうのでとりあえず向き合って理解できるように努力したい。,
C-2021-1_U106,,,ソートの中でも種類が複数あり、それぞれの適性に応じ使い分ける必要がある。,次回分も含めて正確に理解したい,
C-2021-1_U107,,時間計算量がいまいちわからない,,かなり難しくなってきた,
C-2021-1_U11,ソートの大まかな使い方を理解できた。,ヒープソートが難しく最悪の場合がわからなかった。,"ソート問題にはバブルソートや選択ソート、２進木ソート、ヒープソートなどがあり、選択ソートはバブルソートを改良したものであり、２進木の素朴なソートとヒープソートはn=38で比較回数が逆転する。
",様々なソートが出てきたので混合しないように気をつけていきたい。,
C-2021-1_U12,,,ユークリッド互徐法の正当性や選択ソート、ヒープソートなどの計算方法について学びました。,いろんな計算法や定義が出てきて難しかった。,これらの計算方法は、それぞれどこでどう使われているのか気になりました。
C-2021-1_U13,各ソートにふさわしい利用場面。,２分木ソートを実際に書くことができなかったので、描きたいと思います。,,,特にあります。
C-2021-1_U15,"数列の並び替えの方法をしれた
",,シンプルな内容でわかりやすかった,次回もサクッと理解したい,
C-2021-1_U16,,,,今までに増して高度な内容かつ難しい提出課題が課されたので次回以降は素早く課題に取り組めるよう授業時間内で全てを理解できるように望みたいと思う。,
C-2021-1_U18,,,,月曜の一限にしっかり起きて集中して講義を聞くというのは、オンラインではとても難しいと感じる。前期も半分近いので気合を入れなおそうと思う。,
C-2021-1_U19,,,時間計算量が一緒でも、厳密に調べると異なることがある。,,
C-2021-1_U2,,計算量を考えるのが難しかった。,ユークリッドの互除法のアルゴリズムを習った。また、バブルソート、選択ソート、２進木ソート、ヒープソートの違いや計算量を確認した。,,
C-2021-1_U20,,,まず、ユークリッドの互除法について、これは具体的には共通鍵暗号方式などの場面で用いられている。次にソートアルゴリズムにはバブルソート、選択ソート、ヒープソートなどがある。ヒープソートは２進木を利用したアルゴリズムである。どのアルゴリズムが優れているかは最も時間のかかる入力の計算量により判断され、オーダー記法を用いる。,ソートアルゴリズムを用いることで昇順降順に並び替えることが容易になることが分かった。ヒープソートの２進木を使った仕組みはすごいと思った,(3)の部分
C-2021-1_U23,バブルソート、交換ソート、２進木ソート、ヒープソートの方法を理解できた。２進木ソートの欠点を知り、納得した。,オーダー記法が難しく、あまり理解できなかった。２進木を使ったソートでの、２進木の読み方に慣れるのが大変だと思う。「ヒープソートの比較回数は3nlog(2)nを超えない」ことが、説明を聞いてもわからなかった。,,,
C-2021-1_U24,"ユークリッドの互除法を利用して、高速に最大公約数を求める方法を理解できた。
4種類のソートアルゴリズムの特徴を理解できた。",,,ソートアルゴリズムはただ定義を読むだけだと理解が難しかったのですが、具体的に数字を並び替えてみるとわかりやすくなりました。演習問題に取り組み、さらに理解を深めたいです。,
C-2021-1_U25,バブルソートの仕組み,,ユークリッドの互除法、バブルソート、ヒープソートを用いた計算,,
C-2021-1_U26,となりのやつと比べて順番に並べる,ユークリッド互除法の仕方全く覚えてないです。高校の教科書で復習します。バブルソートと選択ソート、二進木とヒープソートのはっきりした違いがわからない。,情報の並べ方、並べるのにかかる時間と手間の比較,なんとなく理解できたつもり。実際はわかってないと思うので、ノートでも見返してしっかり定着させたい。,
C-2021-1_U27,"・ヒープソートの第１ステージのやり方がしっかり分かった。
・選択ソートのやり方が分かった。
・バブルソートのやり方が分かった。","・ヒープソートの第２ステージのやり方がよくわからなかった。
・２進木の高さと深さの違いがわからなかった。","・ソートには、バブルソート、選択ソート、２進木ソート、ヒープソートがある。
・素朴な２進木ソートとヒープソートをグラフにすると、入力整数の個数が大きくと、n=38で最悪比較回数が逆転する。",,
C-2021-1_U28,,,,ソートという普段聞きなれない言葉ではあるが、仕組みを案外理解しやすく面白い内容だった。しかし、計算量など難しいものもあり復習をしたいと思う。,
C-2021-1_U29,ソートの実行の仕方や欠点がわかった。,,バブルソート、選択ソート、二進木、ヒープソートなどについて学んだ。,たくさんの内容が出てきたので復習を頑張りたいと思います。,
C-2021-1_U3,並べ替えの方法がのそれぞれのアルゴリズムがどんなものかわかった。最悪の場合の計算時間を計算でき、方法ごとに最悪の場合というのが異なることもわかった。,,並べ替える方法としてバブルソート、選択ソート、二進木、ヒープソートなどがあり、それによって必要な計算量が変わってくる。それぞれ、最悪のケースつまりもっとも計算量が多い場合を考えることができる。,最悪の場合というのが方法によって異なっているためその都度ある程度この数列にはどの方法が適切か判断する必要もあるのかなと思った。,
C-2021-1_U30,それぞれのソートのやり方,,バブルソート、選択ソート、2進木ソート、ヒープソート,,
C-2021-1_U31,ソートの計算方法がさまざまであるとわかった。,,ソートの時間を短くするために、2進木を利用したあるごりずむをくんでいる。特に、ヒープソートは数列の数が多いほど効率よく計算できる。,,
C-2021-1_U32,ただ数字を並び替えるという作業に様々なやり方があるということに驚いたが、それぞれ違った方法であり、ソートに求めるスピードや安全性に応じてどれを使うのか考えるということが大変だが面白いと思った。,ヒープソートについての練習問題２が、一度説明を聞いただけでは完璧に理解できずあやふやなので自分で復習しておこうと思う。,複数個のアイテムを「ある順序」に従って並び替えることをソートという。ソートにはさまざまな種類があり、それぞれの比較回数、オーダー表記などの点を考慮しながら用途に応じて使い分けることが必要である。,,
C-2021-1_U33,,オーダーがよくわからなかった。,,ソートの種類を覚えて、それぞれの比較回数などを考えられるようにしたいと思った。,
C-2021-1_U34,色々な種類のソートについてそれぞれの特徴や欠点について理解することができた。,,今回は３種類のソート（並べ替え）について学んだ。バブルソートとは一列の数列を隣同士で入れ替え、選択ソートは二つの数を入れ替え、ヒープソートは枝のように数字をつなげ大きいものを移動させるものだった。,よく理解できた。,
C-2021-1_U35,ソートにも様々なものがあることが分かりました。そして、その考え方についても大まかに把握できました。,,バブルソート、選択ソート、ヒープソートについて学習しました。それぞれの考え方、メリットやデメリットも含めて学びました。,ソートは数値の並べ替えの時などに利用してましたが、そのやり方については知りませんでした。というより、気にもしていませんでした。今回も「なるほどな！」と新しい発見がありました。,
C-2021-1_U36,"・ユークリッドの互除法を用いる
　計算ステップ数はしらみつぶしで高々2nだったものが高々2log_2(n)まで減少→高速化
・バブルソート：隣り合う要素の大小を比較しながら整列、順序が異なれば交換
　比較回数は常にn(n-1)/2、交換回数は高々n(n-1)/2（交換不要の時は減るため）
・選択ソート：最大の要素を探し、最後の要素と入れ替える
　比較回数は常にn(n-1)/2、最大値更新回数は高々n(n-1)/2、交換回数は高々n-1
・２進木：欠点として、並び方で比較回数が変わる　最悪の比較回数はn(n-1)/2
・ヒープソート：条件を満たす２進木、２進木の改良版
・用語
　ソート（整列）：n個のアイテムをある順序に従って並べ替えること
　昇順：小さい値→大きい値　　↔降順
　最悪計算量：長さnの入力のうち最も時間のかかる入力に対する計算量
　T(n)がf(n)のオーダーである＝ T(n)=O(f(n))",完成した2進木の読み方がよくわからなかった。,"・最大公約数をより早く求めるには？
・様々なソート：バブルソート、選択ソート、２進木",アルゴリズムのスライドをクリックしていってアニメーションのようになるのでソートのシステムわかりやすかったです。上にも書いた通り、２進木とヒープソープについてまだよく理解できていないので復習をしっかり行おうと思います。,特にありません。復習しておきます。
C-2021-1_U37,単純に計算しようとすると莫大な時間がかかる計算でも、バブルアルゴリズムを用いることによって大幅に時間を短縮することができる,まだ計算方法があいまいなので復習をしたい,,,
C-2021-1_U38,,ヒープソートと2進木ソートの最悪比較回数が入力整数の個数によって前後する以外で、この2つの違いが分からない。,,一見簡単な昇順・降順に直す動作もアルゴリズムによって行われていて、またその方法が何通りもあるということに関心した。,
C-2021-1_U39,バブルソートとヒープソートの仕組みを理解することができました。,オーダー記法がよくわかりませんでした。,,,オーダー記法をもっと嚙み砕いて説明してほしいです。
C-2021-1_U44,,,数字の並べ替えの仕方,,
C-2021-1_U45,バブルソートとヒープソートの作り方はわかりました。,大体理解できました。,ヒープソートによって二分木の欠点を補うことができる。,大体わかったので、自分でもヒープソートなどを実際にやってみたいと思いました。,
C-2021-1_U46,,オーダー記法というのがうまく理解出来なかった。ソートやヒープなど聞きなれない言葉を覚えるのが大変だ。,,初めて習うことばかりで頭が追いつかないのでもっとしっかり予習するようにしたいと思った。,
C-2021-1_U47,バブルソート、選択ソート、ヒープソートの三つの方法の利点や欠点がわかり、それに応じて方法を使うのが最もいいかを知ることができた。,オーダー気泡のやり方が尾真理抑わからなかった。,バブルソート、選択ソート、ヒープソートの3つの並び替えの手順や各々の交換回数など学んだ。,コンピューターを処理するために様々なシステムが備わっており、日々情報科学の分野が発展していると実感できました。,
C-2021-1_U48,,時間計算量の概念がよくわからなかった。,ユークリッドの互除法はａをｂで割った剰余をｒとする。ｒが０ならばｂが最大公約数である。ｒが０でないならば、ａ←ｂ、ｒ←ｂとして、アへ戻る。というアルゴリズムである。,,
C-2021-1_U49,"・ユークリッドの互除法は数学的に見ても簡単で早い方法だが、コンピューターの計算という側面から見ても良質なアルゴリズムである
・入力された情報が降順なら大体は遅くなる
・ヒープソートだと一番上が最大値になる","・前半部分の互除法の話でいきなり出てきたlogがよくわからなかった
・そもそもコンピューター上でどう最大公約数が関わってくるのかわからなかった。
","・ユークリッドの互除法は数学的に見ても簡単で早い方法だが、コンピューターの計算という側面から見ても良質なアルゴリズムである
・ソート/与えられたアイテムを並べ替えること（一般に昇順に並べる）
・バブルソート/与えられたアイテムを順番に二つずつ大小比較して並べ替えていき、これを繰り返してソートする
・選択ソート/最大の数を探し出して一番後ろに持っていき、これを繰り返してソートする
・２進木/節点と大小関係を比べて左右どちらかにおいていきながら並べる
・ヒートソート/深さ×２個の節点を持ち、一番深いところに関してのみ左から節点が存在している。かつどの節点の値も自分の親以下の値であること。という二つの条件を満たす２進木",いちいちlogとかが出てきたりして面倒くさいと思ったが、グラフを書いてみると、計算量とかがわかりやすく比較できたので、重要性を感じた。,
C-2021-1_U50,,,ソートアルゴリズムについて学ぶ。バブルソート、選択ソート、２進木ソート、ヒープソートをそれぞれ具体例を見ていきながら、正しい計算量の求め方を理解する。,,
C-2021-1_U51,それぞれの３つの方法の便利な点や欠点が分かり、それに伴ってどんな時にどの方法を使うのかがなんとなく想像できるようになりました。,オーダー記法の仕方があまりよく分からなかったので、もう一度復習したいと思いました。,"バブルソート、選択ソート、ヒープソートの３つの並び替えの方法の手順、そしてそれぞれの比較回数や高々の交換回数、更新回数を学びました。
","コンピュータを用いてとても短い時間で高速処理するためにこのようなシステムが備わっていることを知るのは楽しいと思いました。
次回のマージソートもどんな方法なのか気になりました。",
C-2021-1_U52,バブルソート、選択ソート、ヒープソートなど、さまざまなソートの欠点や利点について,,ソートというデータを一定の基準に沿って並び替える方法について,今回は少し難しくなんとか理解したつもりだったが小テストで間違えてしまったので、復習したいと思う,
C-2021-1_U53,ユークリッドの互除法によって計算のスピードが大きく上がった。2進木をつかったソートは数値の並び方によって計算時間や比較回数が変化する。N=38で大小関係が逆転する。,２進木を使ったソートの読み方が少し複雑でよくわからなかった。まずスタート地点の決め方がわからなかった。,あるアイテムをある順序で並べ変えることをソートといい、交換型、選択型、分割統治型などに分けられる。隣り合う要素を比べるのがバブルソート、最大要素との入れ替えを行うのが選択ソート、２進木を使ったソートの欠点を補ったものが、ヒープソートである。,今回の授業ではソートについて学びました。ソートにもさまざまな種類があって、それぞれの特徴をだいたい掴めたと思っています。情報量が多くはありましたが、しっかり復習したいと思います。,
C-2021-1_U54,さまざまなアルゴリズムが存在し、計算時間に影響を与えるものがここでは要素同士の比較回数であるということがわかった。,,アルゴリズムの例としていくつかのソートを学んだ。バブルソート、選択ソートは隣り合う要素の大小で交換を行うことで整列させる。ヒープソートは2進木を用いて整列させる。これらは比較回数が少ないほど計算時間を短くすることができる。,,
C-2021-1_U55,バブルソートや選択ソートはよくわかった。,,,"今回の提出課題もいろいろ考えることがあって楽しかった。
ユークリッドの互除法好き。

前回の先生からのコメントに対する返答
偽コイン問題について
{1,9}と{10,11}を比べて、つり合わなかったらあと一回では判別できないのではとのご指摘ですが、問題なくできます。
もし、{1,9}<{10,11}となったとします（右辺が重い）。こうしても一般性は失いません。
このとき3回目の操作で{10}と{11}を比べます。
つりあえば9が偽物（本物より軽い）で確定。つり合わなければ10と11でより重い方が偽物（本物より重い）で確定です。
なぜなら、2回目の操作から10,11は偽物であるならば本物より重いことがわかります。そして3回目の操作でつりあわないとき、10か11どちらかが本物なのでより重い方が偽物です。
よって、全3回で偽物は確定します。

先週からこの偽コイン問題を考えて、一般の場合（天秤n回で最大何枚のコインから偽物を発見できるか）の証明ができました。
予想通り{3^(n)-1}/2枚でした。暇があったらLGCに投稿するかも。



",
C-2021-1_U56,ソートの効率性を比較するうえで重要なのは、最悪の場合を考えることであるということ。,,アルゴリズムを学習するうえで重要なソートには種類があり、それぞれ欠点がある。,,
C-2021-1_U57,,オーダー記法,,,
C-2021-1_U58,,,バブルソートと選択ソート、２進木ソートやヒープソートなどのあらゆるアルゴリズムの手法について学んだ。また、それらの計算処理のスピードや計算方法の欠点などについて比較することができた。,,
C-2021-1_U59,バブルソート、２進木ソート、ヒープソートのやり方,オーダー記法,,いろいろなソートがこれまで考え出されてきたというのを知って、考えた人は本当にすごいなと思いました。オーダー記法がまだしっくりきていないのと課題レポートが難しそうなので復習頑張りたいと思います。,
C-2021-1_U6,,オーダー記法を実際にどのように用いれば良いかわからなかった。,,内容が難しくなってきたので、復習はするようにしたい。,
C-2021-1_U60,,,数字をある規則に従った順序に並び替える方法（ソート）は様々ある。授業ではバブル、選択、2進木、ヒープソートの原理を勉強した。それぞれのソートにはメリットとデメリットがある。,勉強になった,
C-2021-1_U61,"2進木を用いたソートもあるが、要素の並ぶ順番によって比較回数などが変わる。それを補うようなソートが、ヒープソートである。
2進木の分岐がないと、比較回数が多くなる。",,"ソートとは、並び替え、整列のこと。照準、降順などがある。
バブルソートとは、隣り合う要素の大小を比較し、交換すること。選択ソートとは、最大の要素を探し、最後の要素と交換すること。
",あまり馴染みのない言葉が多かったが、例をしっかり考えながらみたので、よく理解できた。,
C-2021-1_U62,,,数列を降順あるいは昇順に並び替える手法について学んだ。,課題を通してソートの理解を深めたいと思いました。,
C-2021-1_U63,バブルソートと二進木のやり方が簡単に理解でき、問題を解くことが出来た。,ヒープソートの具体的なやり方がやや混乱した,"最大公約数を求めるとき、ユークリッド互除法と因数分解では、ユークリッド互除法の方が時間がかからない。
ソート問題に挑むとき、バブルソートを含む交換型・分割統治型・ヒープソート[最悪比較回数3nlogn]や二進木[最悪比較回数n(n-1)/2]を含む選択型などがあるが、最悪時間評価といった最も長い時間かかる入力に対する計算量を見積もる必要がある。",二進木は長い入力の際時間がかかるので素朴なソートの時入力整数値が38回以上になると断然ヒープソートの方が最悪比較回数が小さくなってくることが分かり、似たようなアルゴリズムでもこんなにも差が出るのが面白く、また用途によって使い分けても良いのだと感じた。,
C-2021-1_U64,バブルソート、選択ソート、ヒープソートについての理解。,,ユークリッドの互除法、3つのソート法とそれらを用いたときの計算量について。,ヒープソートというものを初めて知ったのですが、計算量も少なくてすごい賢い方法だなと思いました。面白かったです。,
C-2021-1_U65,バブル・選択・2進木・ヒープソートがあり、速さが異なる,,色々なソートがあり、速さが異なる,,
C-2021-1_U68,"ユークリッドの互除法は対象が大きい値である時にとても便利。
バブルソートは隣り合う二数の大小を比較しながら整列を並べ替える方法。二進木ソートの欠点を補ったのがヒープソート。",選択ソートとオーダー記法がよくわからない。,,"色んなソートがあるが、整列によって計算量も方法も若干変わってくるので少し混乱した。
受験期以来ユークリッドの互除法に触れてなかったので少し懐かしく感じた。",
C-2021-1_U69,アイテムの並び替えについてだけでも様々な計算方法があることが分かった。バブルソートの考え方は割と力技っぽくてわかりやすかった。,二進木の比較回数の数え方がよく分からなかった。,,人間はものの並び替えくらいは感覚的にできることだと思うけど、コンピュータに覚えさせるにはきちんと理論立った方法で教えなければならないから、少し面倒に感じた。でも人間自身の頭にもこの方法を覚え込ませたら、感覚でやるよりも効率的に正確に作業できるのかなと思った。,ありません
C-2021-1_U7,,,"ユークリッドの互除法を使えば、計算を高速化できる。
n個のものを並び替えることをソートといい、バブルソート、選択ソート、ヒープソートなどがある。","ユークリッドの互除法を使うと比べ物にならないくらい計算が速くなっていたことに非常に驚いた。また、前回習った根付き木がまた出てきたので前回と今回の考え方をマスターして応用的な考え方ができるようにしたい。
",
C-2021-1_U71,"アルゴリズムを「より良い」ものにする工夫を知ることができた．
扱う対象が大きくなるとオーダーの差が計算速度に非常に大きく影響することがわかった．",特にありません．,"最大公約数を求めるアルゴリズムとして，ユーグリッドの互除法を学び，虱潰しで求める方法との計算量を比較した．
数字をソートするアルゴリズムとして，バブルソート，選択ソート，2進木ソート，ヒープソートを学んだ．
アルゴリズムの性能の比較には最悪計算量が指標の1つとして用いられる．計算量を比較するためオーダー表記を学んだ．","計算機のスピードをあげるのではなく，アルゴリズムを効率化することで
爆発的に速さを早くできるということが大変面白かったです．
効率化されたアルゴリズムを見るとよくできているなと感心しました．
ありがとうございました．","2進木ソートやヒープソートにおいて，計算機で木という情報をどのように扱ったり，格納したりしているのでしょうか．
木を用いたソートについて，通りがけ順に数字を選ぶときや，
2進木やヒープになるよう数字を並べるときなどに，計算量は消費されないのでしょうか．"
C-2021-1_U72,,,,自分でパワポを追って行った方が頭に入ってくる気がした。,質問はなぁい！！
C-2021-1_U73,,,アルゴリズムの工夫次第で計算にかかる時間が変化する。数字の列の並べ替えの方法は多くの種類があり、それぞれの方法に利点と欠点がある。,,
C-2021-1_U74,ソートを使って簡単な並び替えが出来た。,ヒープソートがまだよく分かってない。,,後半少し難しかった。,
C-2021-1_U75,ソートの種類とその計算法、それらの評価について分かった。,,アイテムの並び替えの例として、バブルソート、選択ソート、二進木ソート、ヒープソートなどがある。それらのアルゴリズムの性能評価として、時間計算量を用いる。同じ入力の長さでも、内容によって計算量に差があり、実際は最悪計算量、つまりその入力の長さで最も時間のかかる入力に対する計算量で評価する。入力によって、どのソートが早く計算できるかは変化する。,,
C-2021-1_U76,入力する長さが長くなるほど、ソートを行う方法によってかかる時間が全く違うことがわかった。,オーダーの見積もり方が少しわかりにくかった。,バブルソート、選択ソート、２進木を使ったソート、ヒープソートについて,並べかえるだけでも様々な方法がありそれぞれの方法によって効率が違うことがわかり、面白かった。,
C-2021-1_U77,,,計算時間、複数のソートの方法について学んだ。,,
C-2021-1_U79,,二進技ソートの数字の読み取り方とヒープソートの二段回目が少し難しかった。,ソートという並び替えの問題を解く時には様々な方法がある。隣の数字と比較して並び替えていくバブルソート、最大の要素を探しそれを最後尾にすることを繰り返す選択ソート、二分技を利用する二進技ソート、二進技ソートの欠点を補ったヒープソートなどが主な種類である。どのような方法でもソート問題は解けるが最も計算時間が短いものが重宝される。また、計算時間は入力が長くなった時に最も計算が短いもの、極端に計算が長くなる入力がないものなどが良い。,,
C-2021-1_U8,,,並び替え方法とその速度、利便性について,,
C-2021-1_U80,今回の講義を受けて、整列問題と計算量について分かった。要素を整列する際に、前から順番に要素を比較していくバブルソートは計算量が多く、時間が多くかかるのが欠点である。そのためには選択ソートのように最大の要素を探してそれと交換することで一つ一つの比較の必要がなくなるので計算量が減る。,,今回は最大公約数を求めるアルゴリズムと、整列問題に関するソートのアルゴリズムを習った。ソートlの種類はバブルソート、選択ソート、ヒープソートの三種類を学んだ。バブルソートは隣り合う要素の大小を比較するため計算時間が長い。,,
C-2021-1_U82,"アイテムをある順序に従って並べ替えることをソートという。またソートアルゴリズムには色々な種類がある。並び替えるときは隣り合う要素同士を大小比較していく。
ある２つの条件を満たす２進木をヒープという

",,"ユークリッドの互除法について
ソート問題について","今日はユークリッド互除法が出てきたが、高校で習った時より複雑に書かれていて馴染みにくいなと思った。
またソートやヒープといった新たな単語も出てきたのでその意味も忘れないように復習したい。",
C-2021-1_U83,それぞれのソートの区別ができるほどには理解できた。ヒープソートが個人的に一番複雑であったが、具体例と説明のおかげで実行するのもできるようになった。,,,このような様々な処理手順が打ち立てられていることに驚きだった。,
C-2021-1_U84,,,数字の並び替えの仕方の様々な種類,集中して授業にのぞむことができた。来週も同じように頑張りたい。,
C-2021-1_U85,ただ並び替えるというだけのことでも、工夫次第でその時間が短くなったり、分かりやすくなったりするということ。,,複数の値をその大きさ等で揃えて並び替えることをソートという。与えられた数値を一列に並べ、左端から順にその大きさを右隣と比較して逆であれば入れ替える、を繰り返していくというやり方をバブルソート、列の順に、大きいものは右に、小さい方は左に枝分かれさせて書いていくのが二進木ソート、二進木のやり方を工夫して、さらにソートする時間を短く、そして分かりやすくしたものをヒープソートという。,前回に引き続き、数学のようで、面白かったです。ユークリッドの互除法は受験期を思い出しました。ただソートするだけでも、色々な方法があるんだなぁと思いました。,
C-2021-1_U86,同じやり方で偽コインを見つけようとしても、運次第で計算時間が大きく変化するとわかった。,"ソートという初めて聞くものが出てきて困惑した。
",色々なソートについて学んだ。,今日は電子教科書の不具合があったらしいので自分もそう言う不具合が起きた時きちんと対処できるようになりたい。,
C-2021-1_U87,,２進木ソートの考えはなんとなくわかったが、どうやってヒープソートで２進木ソートの欠点が補われたのかがよく分からなかった。,数の大小の並び替え、ソートについて４種類の方法を学んだ。入力によって計算量は変化し、最悪な長さの場合のことを考えるようにする。,,
C-2021-1_U88,それぞれのソートの並べ替え方がわかった。,ヒープソートの深さと高さの違いがよく分からなかった。ヒープソートの比較回数のlogがよく分からなかった。,"ソート→ある順序に従って並べ替えること。何も指示がない場合昇順。
バブルソート→隣り合う者同士の大小比較によって並べ替える。
　　　　　　　比較回数‥常にn(n-1)/2
                        交換回数‥高々n(n-1)/2
選択ソート→最大の要素と最後の要素を入れ替える。
　　　　　　比較回数‥常にn(n-1)/2
                     最大値の比較回数‥高々n (n -1)/2
                    交換回数‥高々n-1
2進木ソート→節点と比較して、大きければ右小さければ左のように進み置いていく。
　　　　　　  最悪の場合n(n-1)/2回の比較が必要
ヒープソート→節点n、高さhの２進木が以下の二つの条件を満たすもの。
　　　　　　　1,深さdの節点はちょうど２のd乗存在し、深さhの節点は左から順に存在する。
　　　　　　   2,どの節点の値も自分の親に格納された値以下である。
",,
C-2021-1_U89,,,,授業の内容を理解したつもりだったが小テストのできが悪かったので理解できてないことがわかった。,
C-2021-1_U9,上記に同じ,最悪実行ケース,,,
C-2021-1_U90,各種ソートの方法とその特性を理解した,,用語や定理の難易度が前回までよりも上がったと感じた。,,
C-2021-1_U91,更新回数と交換回数が必ずしも一致しないのがわかり、印象に残っている。,数列的に考える方法が頭がこんがらがって難しい。,たくさんの新しい計算の指標を数列的に考える方法が出てきた。,どんどん難しくなっているので情報科学を勉強する時間を設ける必要がある。,
C-2021-1_U92,因数分解とユークリッドの互除法の違いが分かった。,,,ヒープソートの条件や第一ステージ第二ステージなどが難しかった。,
C-2021-1_U93,各ソートのだいたいの仕組みはわかりました。,各ソートアルゴリズムの計算量が何でそうなるのかよくわからなかったです。,バブルソート、選択ソート、ヒープソート、二進木ソートなどのソートについて,小テストの点数が低かったので今日の夜にでももう一回やり直してみようと思いました。,
C-2021-1_U94,,,"大きな数の因数分解をするにはユークリッドの互除法を使えば短時間で可能。
ソートアルゴリズムの一つであるバブルソートは隣接する要素の大小比較で並び替える。
選択ソートは最大要素を見つけ並び替える。
ヒープソートは枝分かれの要素を入れ替えて並び替える。２進木ソートの欠点を補ったもの。",,
C-2021-1_U96,バブル・選択・二進木・ヒープソートは、簡単に並べるために工夫した歴史を想像すると飲み込みやすいとわかった。,ヒープソートの最悪実行ケースの考え方。,バブル・選択ソートは、横並び。二進木・ヒープソートは木で考える。,予習でわからなかったところを、もっと減らしておくべきだった。,ヒープソートの最悪実行ケースの考え方はどうすればいいですか？
C-2021-1_U97,,,情報の整列問題の仕組み,今までに習った内容も含めて、もう一度見直しをしなければ、理解できなくなってくると思った。,
C-2021-1_U98,"普段からよく目にするランキングなどのデータを条件に従って並び名をすには様々な計算方法があるのがわかった。
また、それぞれのほほうの特徴も理解することができた。",最適な計算方法を選択することはまだ難しい。,データをある条件（昇順または降順）に並べたいときに計算方法としてバブルソート、選択ソート、二進木ソート、ヒープソートがあり場合に応じて最適な計算方法を選択する必要がある。,,
C-2021-1_U99,サイズが小さいときには計算時間も大した時間ではないので、重要なのはサイズが莫大になったときにいかに早く計算ができるかである。,ヒープソートの計算の過程がすこしややこしかったので復習を徹底して理解を深めたい。,"コンピュータ上での計算方法はバブルソート、選択ソート、2進木ソート、ヒープソートなどがありそれぞれ条件によって効率が変わること。
重要なのはサイズが大きくなった時に短い時間で計算できることである。",コンピュータ上の様々な計算について知ることができ、普段はしないような計算過程で並べ替えをするのは面白かった。効率や最悪計算時間などの条件は計算方法によって異なるのでそれらを理解したいと思う。,
C-2021-2_U10,ユークリッドの互除法、ソートの方法を理解することができた。また、計算を楽にしなければコンピュータでも膨大な時間がかかることが分かった。,,ユークリッドの互除法の利用により、因数分解よりも高速に最大公約数を求めることができる。バブルソートでは、隣り合う要素の大小を比較しながら整列していくことにより、常にn(n-1)/2回比較し、高々n(n-1)/2回交換することで全体を整列できる。選択ソートでは、最大の要素を探してそれと最後の要素を入れ替えるという操作を繰り返すことで、常にn(n-1)/2回比較し、高々n(n-1)/2回最大値を更新し、高々n-1回要素を交換することで整列できる。,高校で習ったユークリッドの互除法がとても活用的な手段であることに驚きました。,
C-2021-2_U100,計算におけるアルゴリズムとは何かについて理解したとともに、具体的なアルゴリズムの例が出たことで、より想像がしやすくなった。また、普通に使っていたソートという言葉の意味を正しく知り、整列法の代表例について、意味と使用法を理解できた。,,アルゴリズムは計算の過程のことであり、計算ステップ数とは、アルゴリズムが終わるまでに行われる基本演算の回数のことである。アルゴリズムの一種としてユークリッドの互除法がある。アイテムを「ある順序」に従って並べることをソート(整列)といい、バブルソート、ヒープソートなど様々な整列法がある。,基本的に理解することが出来たものの少しヒープソートの所が難しく、理解することに手間取ってしまったが、具体的な例が出たことで理解することが出来たのでよかった。,
C-2021-2_U101,"ユークリッドの互除法がいかに効率的に最大公約数を見つけることができる手順であるかが分かった。また、アルゴリズムを考えるうえでは同様の操作を何回繰り返すのかという計算ステップ数が重要になり、それによって賢いアルゴリズムか判定できるということが理解できた。
ソートの内容に関しては、どのような手順を踏めば確実に並び替えをできるのか、そしてそのソート名を知ることができた。それぞれのソートの特性は時間計算量を見積もるときの要素に現れているように感じられた。さらに、最も時間がかかった場合の計算量である最悪計算量を知ることが用いたアルゴリズムの性能を評価することになるということが分かった。オーダー記法によって上から抑える関数を理解することで、アルゴリズムの限界を知ることに繋がるということも理解できた。","オーダー記法の意味やそれをすることによる利点は分かったが、正定数c,n(0)の探し方がよく分からなかった。","二つの数の最大公約数を求めるとき、一つ一つをしらみつぶしに検証していく方法では計算ステップ数が2nと大きくなってアルゴリズムの実行時間が長くなってしまう。その問題を解消するのがユークリッドの互除法を用いたアルゴリズムであり、計算ステップ数は2log_2(n)となって大幅に実行時間を短くすることができる。このことから、アルゴリズムは実行時間の観点から賢い方法とそうでない方法があると言える。

並び替えをするソートのうち、バブルソート、選択ソートについて詳しく学習した。バブルソートは隣り合う要素の大小を比較しながら整列してくもので、選択ソートは最大の要素を探し、それと最後の要素を入れ替えることで並べ替えを実行する方法であった。時間計算量を見積もるときの要素は、バブルソートは比較回数と交換回数、選択ソートは上記の２つに加えて最大値の更新回数である。
アルゴリズムの性能を評価するときに入力に対して各手順を実行するのにかかる時間の総和である時間計算量が重要となる。これは入力に依存して変化するので各々について考えるのではなく、ある長さの入力に対して考えることが多い。特にその長さにおいて最も時間のかかる計算量を最悪計算量と呼ぶ。長い入力に対してどのくらいの速さで実行できるのかがを知ることが必要になるので、入力が大きい時の関数の上界を考える。この記法としてオーダー記法があり、関数を上から抑える上界ぎりぎりの関数によって最悪の状態を表している。オーダー記法ではあくまで上限を示すことに意味があり、そのことによって速さの判定やどの要素を気にするべきなのかを理解することができる。
ヒープソートの導入として二進木を使ったソートについても触れられた。このソートでは木を完成させた時点でソートは終了しているが、それを通りがけ順で正しく読む必要がある。二進木ソートは入力によって二進木の深さが変化するため、計算時間が異なってしまうという欠点がある。","ソートの手順については具体的な事例とともに説明があったため、理解しやすかった。また、ユークリッドの互除法は今まではそういうものだと思って使ってきたが、その証明を知ることができてよかったと思う。最大公約数を早く見つけるということが暗号化の鍵の話につながっているというのはとても興味深かった。
後半のオーダー記法については初めて知る概念で予習をしていてもすぐには理解が追い付かなかった。自分の言葉でかみ砕いて理解する復習を大切にしたいと思う。","オーダー記法の例として示されているものは正定数がすべて整数ですが、定数は正で上界を表すような数に設定するのであれば、整数ではない数になることもあるのでしょうか？
練習問題３の解説をしていただけると嬉しいです。
また、ユークリッドの互除法の計算ステップ数についてもなんとなくしか理解ができず、しっくりこないので詳しく解説お願いいたします。"
C-2021-2_U102,ユークリッドの互除法の証明の方法について長方形の説明を使うとわかりやすかった。,ソートのところがあまりうまく理解できなかった。これから復習をしてしっかりと理解をしたいと思う。,今回の講義ではユークリッドの互除法やソートについて学んだ。ユークリッドの互除法では長方形を埋め尽くす最大の正方形の辺の長さが長方形の二辺の最大公約数になることを学んだ。,ユークリッドの互除法の証明の方法は非常に感動した。とても分かりやすくてそのように考えればいいのだと明確に理解できた。ソートの部分があまり理解できなかったので復習をして理解したい。,
C-2021-2_U103,最大公約数問題、ソート問題について、解法への様々なアプローチの仕方を知り、スマートな工夫がされていることが分かった。また、新たな指標であるオーダーについて知ることができた。,オーダー記法の理解に自信がありません。,最大公約数問題では、ユークリッドの互除法を用いることで問題を高速に解くことが可能である。また、ソート問題には、バブルソートや選択ソート、ヒープソートなどの方法があり、それぞれのアルゴリズムの計算量を比較する際に、オーダー記法が用いられる。,高校でもユークリッドの互除法については習いましたが、最大の正方形を敷き詰めるという考え方に至ることはやはり本当にすごいと思いました。オーダー記法の理解に少し自信がないので、復習を頑張ろうと思います。,
C-2021-2_U104,,オーダー記法が理解しずらかった。,計算ステップ数とは、アルゴリズムが終了するまでに行われる基本演算の回数である。最大公約数の問題では剰余が基本演算であり、ユークリッド互除法を用いることで高速に求めることができる。また、ある順序に沿って並び替えることをソートといい、代表的なものに、バブルソートと選択ソートがある。そして、アルゴリズムの計算量は、オーダー記法によって考える。,数学的な要素が増えてきて、面白い半分、難しい部分が多くなった。,
C-2021-2_U105,バブルソート、また選択ソートの両方における、整列手順と時間計算量を見積もることができるようになった。最大公約数問題もなんとなくではあるが、もう一度スライドを読んだら理解できるまでにはなった。,計算式やmodなどが数学的で難しく感じた。頭の中がこんがらがりそうだった。,剰余を基本演算と考えている最大公約数問題、除法原理、しらみつぶし的解法について学んだ。アルゴリズムが終了するまでに行われる基本演算の回数である計算ステップ数の求め方もやった。また、いくつかの物事をある順序で並べ変えることであるソートの問題も扱った。これは計算機科学の最も基本的な問題のひとつである。その中でも、隣り合う要素の大小を比較しながら整列していくバブルソートと最大の要素を探し、それと最後の要素を入れ替える選択ソートに注目した。,,
C-2021-2_U106,ユークリッドの互除法と情報との関係や2種類のソート問題の解き方について学ぶことができました。,なぜバブルソートと選択ソートのオーダー評価が同じn^2であるのか、またn^2にはどのような背景があるのかがあまりよくわからなかったです。,最大公約数問題とユークリッドの互除法の関係やその正当性、ソート問題やその種類のいくつかの計算方法であるバブルソートや選択ソートのやり方、時間計算量の評価のしかた、オーダー記法、2進木を使ったソートの読み方などについて学びました。,高校生のときに学んだユークリッドの互除法が数学以外の授業でまた出てきたのでかなり意外でした。また計算量を入力の長さによって比較するという発想がとても斬新だなと思いました。,
C-2021-2_U107,,,計算にかかる時間の評価方法、計算におけるユークリッド互除法の有用性、バブルソート・選択ソート・2進木を使ったソートの説明,ソートの手法の違いが少し分かりづらかった。他の手法の違いもまだよく分からないのでしっかり学ぼうと思う,
C-2021-2_U108,計算ステップ数とは、アルゴリズムが終了するまでに行われる基本演算のことで、アルゴリズムが複雑または基本演算の階数が多いほどその処理速度は遅くなる。n個の何かが与えられたとき、ある規則に従って並べ替えることをソート（整列）という。中でもn個あるうちの何個かの要素を交換して並べ替えることを「バブルソート」といい、最大の要素を探してそれと最後の要素を入れ替えることを「選択ソート」といい、要素をある基準に沿って小さいものから大きな要素の順で並べ替えることを「ヒープソート」という。特に深さdの節点が丁度2^d個あり左から順に存在し、どの節点の値も自分の親に格納された値以下であるとき、その２進木を「ヒープ」という。また、ヒープの条件２を満たさなければ適宜親と入れ替えてもよい。,ヒープソートの１９ページ目の「６回目」で６と７が同じ深さにあることがよくわからない。６は７より小さいから、左下に向かって 9-7-6　という順に一直線に並ぶのではないのか。,naive_gcdというしらみつぶし方法では時間がかかりすぎるが、ユークリッドの互除法を用いれば計算ステップは格段に小さくなる。たとえばいろいろな数字を並べ替える際にはある基準に沿ったソートという並べ替えを行うが、その際のアルゴリズムの計算量が各方法によってどのくらい簡潔になるかを考えた。,,(3)で記述した、ヒープソートの１９ページ目の「６回目」で６と７が同じ深さにあることがよくわかりません。
C-2021-2_U109,"同じ出力を得る操作でもそのアルゴリズムによって計算量に大きな差が生まれることが分かった。
またオーダー記法による計算量の評価の方法も理解できた。",,ユークリッドの互除法、計算量の評価、バブルソート、選択ソート、オーダー記法,,
C-2021-2_U11,"ユークリッドの互除法を使うことで計算時間が極端に小さくなったこと
バブルソートと選択ソートの使い方
オーダー記法の使い方",,"ユークリッドの互除法の有益性とその仕組みについて
ソートとは何か(バブルソート、選択ソート)
オーダー記法について
","ユークリッドの互除法がどれほどすごいものか知って驚きました。
いつも使っているソートの仕組みが面白いなと思いました",
C-2021-2_U110,ユークリッド互除法やソートの手法については理解できました。,,今回は、二つの自然数について最大公約数を求めるユークリッド互除法について学び、また、隣の要素と大きさを比較する中で全体を昇順・降順に並び替えるバブルソート等を学びました。,,
C-2021-2_U111,,,,ユークリッドの互除法の便利さが初めて理解できた気がします。オーダー記法はよく分からなかったので、例や練習問題を復習して理解できるように頑張りたいです。,
C-2021-2_U112,最大公約数問題に関して、ユーグリッドの互除法と長方形をなるべく大きな正方形で埋める問題に置き換える考え方の関連性について理解することができた。また、ユーグリッドの互除法が正しいことの証明も理解できた。バブルソートや選択ソートの方法を理解学んで、アイテムを並べ替えることができた。さらに、2進木ソートの手順を理解することができた。,ユーグリッドの互除法を用いて最大公約数を求める問題について、長方形をなるべく大きな正方形で埋めるようにして実際にもとめてみようと感じた。また、オーダー記法についてよく分からない箇所があったのでしっかりと復習をして理解を深めたいと思う。,計算ステップ数とはアルゴリズムが終了するまでに行われる基本演算の回数であり、計算ステップ数が少ないほどアルゴリズムの実行時間が短くなる。最大公約数問題は剰余を基本演算と考える。そのための解法として、しらみつぶし的解法は時間がかかりすぎるので長方形をなるべく大きな正方形で埋める問題に置き換えて考えるとよい。このアルゴリズムをユーグリッドの互除法という。アイテムをある順序に従って並べ替えることをソートといい、例としてバブルソートとは隣合う要素の大小を比較しながら整列していくものである。また、選択ソートとは、最大の要素を探し最後の要素を入れ替える方法である。計算量とは入力の長さの関数であり、入力に対して手順を実行するためにかかる時間の総和である。,最大公約数を考える際に、２つの数字を一辺の長さとした長方形をなるべく大きな正方形で埋める問題に置き換えて考える方法は興味深かった。また、この考え方が中学生のときに学んだユーグリッドの互除法そのものであることを知り驚いたが、面白いとも感じた。最大公約数を求めてどうするのかと考えていたが、暗号を解く際に重要な役割を果たしていることを今回の講義で知り、興味を持った。数字を並べ替えるのに手順を決めてその順序を決めていくのが面白いと感じた。,特にありません。
C-2021-2_U113,隣り合う要素の大小を比較しながら整列していくバブルソートや、最大の要素を探してそれと最後の要素を入れ替える選択ソートなどいろいろなソートの仕方がある。,オーダー記法について、関数を比較しないといけないので難しく感じました。,アイテムを並べ替えるソートにはいろいろな種類があり、バブルソート、選択ソートなどがある。,比較的短い入力に対しては時間がかからないのでどうでもよく、時間については最悪計算量を気にするということが面白かったです。,特にありません。
C-2021-2_U114,ユークリッドの互除法は高校で習って以降、折り紙のイメージを持っているだけでしたが、今回の講義内で証明していただいたのでその正当性を理解することができました。最大公約数を求めるアルゴリズムにおいてはユークリッドの互除法がとても効率よく求められることが分かりました。,オーダーの部分の理解があまり深まらなかったような気がしています。,計算ステップ数とはアルゴリズムが終了するまでの演算回数のことであり、計算ステップ数が少ないほど計算にかかる時間は短い。しらみつぶしに計算していくのは計算対象の値が大きくなると膨大な時間がかかるので、より効率の良いアルゴリズムが必要になる。ある順番に並び替えることをソートといい、ソートアルゴリズムはバブルソートや選択ソートなど様々である。入力aに対して各手順を実行するのにかかる時間を時間計算量というが、これを入力の長さnで表した関数がよく用いられる。また、最悪計算量を求めることで入力が大きいときの関数の上限を考える。,オーダーの計算方法がいまいちわかっておらず、練習問題や課題に苦戦しました。次回再度説明があればしっかりと理解できるようにしたいです。現代には膨大な数のアルゴリズムがあって、それらすべてを人間がプログラムしたのだと思うと先人たちはすごいなと改めて思いました。,レポート課題の解説をしていただきたいです。
C-2021-2_U115,●バブルソート、選択ソートの交換回数と比較回数　●オーダー記法の考え方,●折り紙,"●除法を用いたアルゴリズム　●計算速度　●バブルソート　●選択ソート　●アルゴリズムと計算量　●最悪計算量　●オーダー記法　●ヒープソートの導入
●数字が上がっていく感じがバブルの所以",Bのなかでは難しくなってきたと感じました。部活も忙しいので気を抜かずに頑張っていきたい。,
C-2021-2_U116,バブルソートと選択ソートと二進木ソートについての仕組みは理解することが出来た。,ヒープソートは自分には複雑すぎて理解するのに苦しんでいる。,バブルソートと選択ソートと二進木ソートがありこれらのアルゴリズムは少し似ているが根本的な検索方法が異なっている。また、これらのアルゴリズムの計算量を示すものとしてオーダーという定義が示されている。,今回の講義で４つのアルゴリズムを知ったが入力によってどれが一番早いかが異なるのでどれを用いるか適切に考える必要があると感じた。,
C-2021-2_U117,,,"アルゴリズムのひとつにユークリッドの互除法がある。アルゴリズムが終了するまでの基本演算の回数を計算ステップ数といい、これを出来るだけ小さくする必要がある。最大公約数問題においてこの計算ステップ数を小さくし高速化を図るために考えられたのがユークリッドの互除法である。これを使えばn=min(x,y)とすると計算ステップ数は高々2log2nである。また、ソート問題に対応するアルゴリズムも存在する。バブルソートや選択ソートである。アルゴリズムの性能は最悪計算量からみることができる。これはオーダー記法によってかんがえる。",,
C-2021-2_U118,バブルソートと選択ソートのやり方がよくわかりました。,オーダー記法が難しくてよく分かりませんでした。しっかり復習したいと思います。,ソート（整列）問題では、バブルソートや選択ソートがある。バブルソートは隣り合う要素を比較しながら整列し、選択ソートは最大の要素を探し、それと最後の要素を入れ替える。,オーダー記法についてよく分からないままだったのでわかるまで資料をしっかり読み直して練習問題など解きたいと思います。,特にありません。
C-2021-2_U119,"バブルソートがどういうことなのか、選択ソートがどういうものなのか、バブルソートと選択ソートの違いをしっかり理解することが出来た。
オーダー記法の計算のところも理解することが出来た",,バブルソートの仕組みと選択ソートの仕組みについて学んだ,,
C-2021-2_U120,ユークリッドの互除法の成り立ち。バブルソート、選択ソート。,オーダー記法の計算式があまり理解できなかった。,最大公約数をを止める手法はユークリッドの互除法が速く有効。ユークリッドの互除法は長方形を用いて説明できる。バブルソートは隣同士を比較。選択ソートは最大値を選んで右端に。オーダー記法は上限を求める。,各種ソートの比較回数や、交換回数、選択ソートの更新回数が数式だと分かりにくく、実際に数列を考えないといけなくて難しいように思えた。,
C-2021-2_U121,ユークリットに関しては高校までの学習で学んでいたところもあったので理解しやすかった。,naive gcdの計算時間見積もりのところの説明が難しかった,ユークリットやソート問題など、様々なアルゴリズムを用いた問題を解き、賢いアルゴリズムの組み立て方を学習することができた。,,
C-2021-2_U122,"バブルソート・選択ソートの意味とやり方
ソートアルゴリズムの計算量",,アルゴリズムが終了するまでに行われる基本演算の回数である計算ステップ数が少ないほどアルゴリズムの実行時間は短くなる。これには剰余・ユークリッドの互除法が関係する。バブルソート・選択ソートの計算量,最大公約数問題を長方形をなるべく大きな正方形で埋める問題に置き換えるのが面白かったです。,
C-2021-2_U124,各ソートアルゴリズムの計算量について理解することができた。,２進木ソートが複雑で一発で理解することができなかった。,"ヒープソートの比較回数
バブルソートの計算量と選択ソートの計算量
オーダー記法",ソートに色々な種類があることが分かった。より深く理解して使いこなせるようになりたいと思う。,
C-2021-2_U125,因数分解を大きな数に実行するときはものすごい時間がかかることがあるが、ユークリッド互除法を用いると非常に高速に最大公約数を発見することができること。このようにアルゴリズムの違いによって計算時間は大きく異なることが分かった。バブルソートは基本的に隣り合うもの同士の大小を比較して並び替えていくもので、選択ソートは最大の要素を探して、それと最後の要素を並び替えていくものであること。また、２進木を用いたソートの読み方について。,要素の比較回数と最大値の交換回数について。整列したい数列の長さをnとしたときに、比較回数が(n-1)+(n-2)+…と、n-1から足している点、また、最大値の交換回数について、n+(n-1)+…と、nから始めて足している点が分からなかった。,因数分解やユークリッド互除法など、アルゴリズムの計算時間評価について。ある順序に並び替えるソート（主にバブルソート、選択ソート）について。,因数分解に比べてユークリッド互除法を用いた場合は計算時間にものすごい差が出ることに驚いた。この授業を受けていて毎回思うが、並べ替えや比較など、普段の生活からよくやっている、繰り返すと煩雑で面倒なことをどうしたら効率的に賢くできるかという、新しい気づきが得られるので楽しい。,(3)の内容について、もう一度説明をお願いします。
C-2021-2_U126,,,,,「n=O(n^3)は定義の従えば間違いではないが計算量の評価としては厳密ではない」の意味が理解できなかったので、もう少し詳しく説明していただきたいです。
C-2021-2_U127,,授業後半で取り上げられたオーダー記法がどのように有効なのかがよくわかっていません。,,,
C-2021-2_U128,,,,情報科学と数学が非常に強いつながりを感じた講義であると感じました。また、どんどん難しくなっていることを感じているため講義動画の見直しをしてきちんと復習に取り組みたいと思います。,"１．今回の計算方法、特に最大公約数の問題はインターネットのどのような使用の時に使われているのでしょうか？やはりエクセルなどで表やグラフをまとめるときとかでしょうか？
２．今回の課題の私の方法はどう思われますか？
"
C-2021-2_U129,,オーダー記法がどのようなものかはわかったが、cやn₀がどのようなものかいまいちわかっていない。,,オーダー記法で、nが小さい部分に関しては考慮しなくてよいというのは、理屈は分かるのだが感覚的には理解しづらいと思った。,
C-2021-2_U13,バブルソートと選択ソートで何が行われているか、またその操作回数がいくらになるかがわかった。,オーダー記法がさっぱりわからなかったのでアーカイブを見て２回復習した。,,,
C-2021-2_U130,ユークリッドの互除法やソートの色々なやり方について具体的な例を見て、それぞれの効率や値が一体どうなるのかがよく分かった。,オーダー記法がまだ具体的に理解できていないので、実例を見ながら復習していきたい。,アルゴリズムの実行に関しての計算量や計算時間、ソート、またそれらを大雑把に評価するオーダー記法について学んだ。,中学や高校で学んだ基本やその応用が情報のアルゴリズムに使われていることを知って、今までの知識が生かせたり、身近に感じられたのでとても面白かった。,
C-2021-2_U131,"ユークリッドの互除法について、計算方法だけでなくなぜその計算方法で最大公約数が分かるかという仕組みを理解できた。また、バブルソート、選択ソートの比較回数、交換回数がなぜスライドに書いてある式になるのかをしっかり自分で計算して理解することができた。
",,,,
C-2021-2_U133,選択ソートやバブルソートの手法について理解できた。また、ユークリッドの互除法の考え方についても理解できた。,アルゴリズムとオーダーの関係性がよくわからなかった。授業の最後のほうがあまりついていけず、曖昧な理解で進んだので、しっかり関係性を整理できなかった。,ユークリッド互除法を使うと、最大公約数が見つかるということで、ユークリッド互除法の正当性や、順序に従って並べるソートについて学んだ。,ユークリッド互除法やソートなど新しく習う内容に集中して理解に努めることができた。ユークリッド互除法は高校数学で習ったので、復習として、もう一度しっかり理解できたとおもう。最後のオーダーのところが曖昧なところがあるので復習をしっかりしたい。,
C-2021-2_U136,各ソートのやり方の違い。,,ユークリッドの互除法を用いた計算。ソートとは順序に従って並べること。バブルソート。選択ソート。時間計算量とは時間の総和。オーダー記法,少しややこしくて難しかったです。,
C-2021-2_U137,アルゴリズムにも優劣があり、優れたアルゴリズムと劣ったアルゴリズムでは計算にかかる時間が大きく異なることが分かりました。また、オーダー記法のしくみも理解することができました。,授業中にヒープソートを理解することができなかったのですが、復習をとおして理解することができました。,アルゴリズムを作る際には計算に時間がかかりすぎないように作ることが大切。また、整列する際の手順としては、バブルソート、選択ソート、2進木を使ったソート、ヒープソートなどがある。また、アルゴリズムの性能を評価する方法として計算時間量を用いることがある。,ユークリッドの互除法に関しては受験期に勉強していたので大学生になった今、受験以外に活かせる時が来て嬉しいです。今回の内容は理解するのが難しく時間がかかるのでしっかりと復習して内容の解像度を上げていきたいです。,
C-2021-2_U138,小テストによってコインの本物と偽物を何回で見分けられるか問題を理解できた。,全体的に授業スピードが速かったため少し理解度に不安がある。,まず初めに第５回の小テストを行った。そして次にアルゴリズムやユークリッドの互除法の正当性について学んだ。次にソートアルゴリズムの中のバブルソートについて学んだ。次に選択ソートについて学んだ。次に２進木の例や読み方を学んだ。そして最後にヒープソートについて学んだ。,,
C-2021-2_U139,オーダーの定義や、その式を理解することが出来た。,,バブルソートや選択的ソートなど、入力に対して様々な形で出力が行われる。また、オーダーという概念が存在する。,初めて聞く理論や概念ばかりだったが、しっかり理解することが出来たと思う。,
C-2021-2_U14,最大公約数を求めるときにユーグリッドの互除法を用いることが賢明であることが計算ステップや計算時間見積もりによって裏付けることができることが分かった。またソートは情報科学において大切なことであることも分かった。,オーダーを示す必要性がよくわからなかった。,"最大公約数を求めるときに用いるアルゴリズムとして、naive_gcdとeuclid_gcdがあるが、後者のほうが計算ステップが少なく済み、計算時間見積もりも短くなる。
ソートとは、ある順序に従って要素を並べ替えることを言い、計算機科学における基本的な問題の一つである。その中にバブルソートや選択ソートなどがあり、時間計算量によって評価できる。",ユーグリッドの互除法のことやソートのことがよく分かった。オーダー記法が難しかったので復習したい。,特にありません
C-2021-2_U140,ユークリッド互除法のやり方。バブルソート、選択ソートの意味。,オーダー評価において、上限を用いた方が良い理由がよく分かりませんでした。,ユークリッド互除法を用いたアルゴリズム。バブルソートとは、昇順に並べ替えること。選択ソートとは最大の要素と最後の要素を入れ替える。遙かに大きな数字で考えるオーダー記法。,高校生の時に習ったユークリッド互除法がなぜ成り立つかを知ることができ、有意義な講義だった。,特にありません。
C-2021-2_U141,アルゴリズムの意義、その効率からいいアルゴリズムと悪いアルゴリズムを判断すること。ソートの種類とやり方、二進木の使い方を理解した。,やっていることを数式で表すとわかるが、プログラミング用語になるとわからなくなる。,アルゴリズムの例及び応用、ソート問題（バブルソート、ヒープソート）の紹介と計算方法、計算量と二進木の定義が紹介された。,今回の授業でわからない部分が前より多かったので、時間をかけて復習しました。二進木の使い方は前のコイン分け問題と少し違う気がしたので、理解するのが時間かかったが面白かったです。,特にありません。
C-2021-2_U142,バブルソートと選択ソートの考え方や具体例としてあった数字の並び替えについて理解することができた。,計算のときに入力が大きいときは関数の上界を考えた方が良いという理屈は分かったが、オーダー記法についてがいまいちよく分からなかった。,"n個のものをある順序に従って並べることをソートといい、これは計算機科学において最も基本的な問題の一つである。ソートアルゴリズムはいくつか種類がある。バブルソートは、隣り合う要素の大小を比較しながら整列していく考えである。また、選択ソートは、最大の要素を探し、それと最後の要素を入れ替える考えである。この二つは、要素の比較回数は、常にn(n-1)/2回、最大値の更新回数は高々n(n-1)/2回で共通であるが、要素の交換回数が異なる。
計算は、入力が大きいとそれだけ時間がかかるものであり、入力が大きいときは関数の上界を考えた方が良い。ここで、オーダー記法が登場する。オーダー記法により、関数の上界を考えることができ、アルゴリズムの計算量はオーダー記法で考えられることが多い。",計算についての話が段々と本格化してきて、授業を聞くだけでは理解できない部分が少しずつでてきているので、最近できていなかった予習をちゃんとやろうと思った。,
C-2021-2_U143,,,,オーダー記法の考え方を理解することが出来なかったので、もう一度スライドを読み直し、出された課題に取り組んでみたい。ユークリッドの互除法は、これまでも習ってきたが、忘れていたのでわかりやすい図で改めて説明してもらえてよかった。,
C-2021-2_U144,,最悪計算量とか、証明問題とかが自分だけでは理解できなかった。友達に聞いてなんとなくは理解出来た。,,,
C-2021-2_U145,"バブルソートと選択ソートの基本的な考え方
バブルソートは隣りあう要素の大小を比較してならべ、選択ソートでは最大の要素を探し、それを最後の要素と入れ替えて並べる。",,バブルソートと選択ソートについて,"ヒープソートのさわりについての理解が不十分だった。
オーダー記法については理解ができました。",
C-2021-2_U146,2種類をもちいた整列ができるようになった,オーダーの部分がわからなかった,,数学の要素が強くなってきたところから嫌になってきたが、復習をして理解を深めようと思った。,
C-2021-2_U147,ソートアルゴリズムについて知ることができた．知らないことばかりなので、しっかり復習しようと思う,,ユークリッド互除法を使って計算することで計算時間の短縮になる。また今日はソートアルゴリズムのうちバブルソートとヒープソートについて学んだ。バブルソートは隣あう要素の大小を比較しながら整列していき、ヒープソートは2進木を用いて整列する。,様々なアルゴリズムがあり、覚えることはできないかもしれないです。難しいと感じました。,
C-2021-2_U148,二つのソートのやり方が分かった。,オーダーとは何か,ある法則に従ってアイテムを並び替えることをソートといい、基本的に昇順で並び替えることを言う。隣同士を比較し、その数が大きいと入れ替えることで昇順にする方法をバブルソートという。また最大の要素を探しそれを最後の要素を入れ替える動作を繰り返す方法を選択ソートという。長い動作に対する挙動を見積もるため、,最後のオーダー記法についてよくわからなかったのでしっかり復習していきたい。,
C-2021-2_U149,,,"計算ステップ数とは一連の操作（アルゴリズム）を何回繰り返したかの回数のことで、その回数が少なければその分操作の実行回数も少ないという事になる。
ソート（整列）はパソコンを使う上でも重要な操作になる。",,
C-2021-2_U151,,オーダー記法には様々な表し方があるが、どれが一番望ましいか判断するかが少し難しいと感じた。,代表的なソートアルゴリズムの中の交換型のバブルソートと選択ソートを中心的に学んだ。アルゴリズムにおいて、入力が大きいとその分時間がかかってしまう。そのため、長い入力期待する挙動が見積れるように、入力が大きい時の関数の上限を考える。これをオーダー記法。,,
C-2021-2_U152,オーダー記法についてわかった。,,,,
C-2021-2_U153,長方形を用いたユークリッド互除法の考え方は、高校でも学んだのですんなりと理解できました。バブルソート、選択ソート、二進木を使ったソートについてもしっかりと例などを参考にして理解することができました。時間計算量とオーダー記法についても、オーダー記法の役割の確認や練習問題を解くことで理解できました。,,長方形を用いたユークリッド互除法の考え方、バブルソート、選択ソート、二進木を使ったソート、時間計算量、オーダー記法などについて学びました。,ユークリッド互除法については高校時代の復讐だと思って学びました。各ソートの内容についてもしっかりと理解できたと思います。次回もほかのソートの内容について学ぶと思うのでしっかりと予習をして備えたいです。,
C-2021-2_U154,,,,小テストに向けて練習するのを忘れていて、小テストが満点ではなかったのが残念だったと思います。次回から授業が終わったら見直しをすることを習慣づけて満点取れるように頑張りたいと思います。次回はヒープソートの考え方をきちんと理解できるように今から予習して授業に臨みたいなと思います。,特にありません。
C-2021-2_U156,最大公約数を表すことができる,バブルソート・選択ソート,最大公約数を表す,講義ありがとうございました,バブルソートと選択ソートの違いをもう一度説明して欲しいです
C-2021-2_U157,ユークリッドの互除法は数学で習ったことがあり、すんなり分かった。ソート問題は比較の仕方にいくつかのバリエーションがあることを知った。アルゴリズムの性能を評価する際には、入力の長さで一番時間がかかるものについて考えるというのは、とても納得できるものだった。,,,,オーダー記法について、最悪計算量の最高次数がオーダーに関係しているという認識であっているでしょうか
C-2021-2_U158,ソートには要素によって使うべきソートが変わる,オーダー法の計算方法,ソートの種類や計算方法,今回の授業だけでは理解しきれなかったところがあるから復習をしっかりしたいと思う。,
C-2021-2_U159,ソートの大まかな概要と具体例、使い方,,ソートの大まかな概要,具体例がなかったら何もわからなかった,
C-2021-2_U16,,オーダー記法自体の意味は理解できたが、求めたいものの式を数列で求めないといけないのでその計算に詰まりそうだと感じた。,,"ユークリッドの互除法を使うことで１京や10の何十乗の計算時間を桁違いに縮めることができると知り驚いた
10のー何乗というのがどのくらい早いものなのかは感覚としてはわからないが、年単位のものがそこまで早くなるはアルゴリズムをうまく活用しているからなんだと感じた
","オーダー記法が、T(n)＜O(n)になることはありますか。
グラフの横軸が負の部分に交点がある場合は、横軸が正の部分では重ならないので、必ずしもT(n)≦O(n)にはならないと思いました。"
C-2021-2_U160,"賢いアルゴリズムとは何かということが理解できた。ソート  整列
バブルソート 隣あう要素どうしの大小を比べながら整列させる
バブルソートの計算量 数列の長さをnとし比較回数、常にn(n-1)/2
交換回数、高々n(n-1)/2
選択ソート 最大の要素を探し、それと最後の要素を入れ替える
選択ソートの計算量 数列の長さをnとし
比較回数、常にn(n-1)/2
最大値の更新回数、高々n(n-1)/2
要素の交換回数、高々n-1
ヒープソートの比較回数
3nlog2nをこえない","ユークリッドの互除法がどういうものか忘れていた。
オーダー評価",計算ステップ数が少ないほどアルゴリズムの実行時間は短くなる。よって、できるだけ計算ステップ数を少なく終了できるように考えることが大事。,ユークリッドの互除法がそういうことに使われているのが驚いた。,
C-2021-2_U161,要素の比較回数、最大値の更新回数、要素の更新回数で時間計算量を見積もることができるとわかった。,,,オーダー記法が難しくあまり理解できなかった。,
C-2021-2_U162,,ユークリッドの互除法の説明のところが何をしているのか分からなかった。,,,ユークリッドの互除法を用いて何がしたいのですか。
C-2021-2_U163,二つのソートの仕組みの理解,オーダー記法とは何であるのか,"バブルソート：どちらか一方から隣り合う二つを比較、並べ替えを繰り替えして整列する
選択ソート：最大値を見つけそれを端寄せるということを繰り返して整列する
","オーダー記法がとても難しかった
",
C-2021-2_U164,,ヒープソートの計算量がO(nlogn)となる理由,,少し難しい内容だった。完全に理解するのには少し時間が必要そう。,
C-2021-2_U167,"・1次関数よりも長方形の中に正方形を創るやり方のほうが計算ステップ数が少なく、ユークリッドの互除法は、その考え方を式にしたものだ。
・バブルソート、選択ソート・2進木のソートの定義、欠点
",・オーダー記法についてなんとなくわかったが、レポート課題の内容については見当がつかない。レポートにしてほしくなかった。,"・最大公約数の求めかた（1次関数）
・最大公約数の求め方（長方形）
・バブルソート
・選択ソート
・オーダー記法
・2進木のソート",・1次関数よりも長方形の中に正方形を創るやり方のほうが計算ステップ数が少ないというのは、人間からすると意外に思えるが、説明によって納得できた。オーダー記法の問題を自分でやると、計算量が半端なく多くなってしまったので、練習問題があるときは、例題の解き方を紹介してほしい。,・レポート課題の内容
C-2021-2_U169,隣り合う要素の大小を比較しながら整列していくのがバブルソート、最大の要素を探し、それと最後の要素を入れ替えるのが選択ソート。常にヒープになるように2進木を構成していくのがヒープソートである。,ヒープソートがもう少し演習をしたいと思った。,賢いアルゴリズムの一例としてユーグリッドの互除法がある。ある個数のアイテムがあった時に、それらをある順序に従って並べ替えることをソートと言い、今回はバブルソートと選択ソート、ヒープソート,,
C-2021-2_U17,"ユークリッド互除法の定理や考え方について理解できた。
バブルソートと選択ソートについてどのように数列のそれぞれの数字を入れ替えて順に並べるのかを理解できた。",バブルソートの時間計算量についてよくわからず、課題のレポートも授業道が見直してみたり自分なりに考えてみたが、よくわからなかった。,"計算時間評価（最大公約数、除法原理→それぞれの解法、ユークリッド互除法）
バブルソート(ソート問題など）、選択ソート、時間計算量
ヒープソート(導入だけ）",ソートの説明で「アルゴリズムと計算量」に入った途端急に難しくなったので、全然ついていけなくなった。パソコンなどにはこのようなことが速くできるように作られていると考えると、パソコンはとてもすごいものだと思った。大切に扱わねばと改めて感じた。,「アルゴリズムと計算量」についてもう一度ゆっくり説明してほしいです。
C-2021-2_U170,,アルゴリズムについて考えること。,計算の手法には観測に基づき、現象を法則化し、判例が発見されると法則は直ちに破棄される物理的アプローチと関数の計算問題として形式化して解く、cs的アプローチがある。人間が機械に手を加えることによって計算を問いて行くことをアルゴリズムともいう。,,
C-2021-2_U171,アルゴリズムの計算量の計算にオーダー記法が湯だとわかった。,,,今回の内容は特にオーダー記法は私にとって無図解居ないようだったため、いつもより復習を念入りに行いたいと思う。,
C-2021-2_U174,,,いくつかのアルゴリズムの具体例を知ろう。,高校時代に習ったのとは違うユークリッドの互除法の捉え方を知れて新鮮で面白かったです。,
C-2021-2_U18,ユークリッドの互除法やソートなど計算の意味が分かりました。,オーダー記法についてよくわかりませんでした。,最大公約数を求める計算として有効なのはユークリッドの互除法である。これは長方形を正方形で区切っていくのと同じである。また数字を昇順に並べる方法にはバブルソートと選択ソートがあり、計算量が少ないものが優先される。,オーダー記法など初めて知ることが多く面白かったです。まだ理解できていないところが多いのでしっかり復習をしておきたい。,
C-2021-2_U19,バブルソート、選択ソートの原理について理解できた。,オーダーについて,計算方法によってその計算量は決まっており、それについてオーダーが定められている。,オーダーについての理解が曖昧です。,
C-2021-2_U20,,,"操作としてのソート(並び替え)の意義と利用例。
バブルソートと選択ソートについて具体的に学習した。
また、計算量評価の手法について学び、オーダー記法という方法論を学んだ。",毎度のことながら、一旦定理を踏まえ手を動かしながら理解に努めるということが出来なかったことはそろそろ改善せねばならない。,9mod6は3では(9=6*1+3)? [B-05計算時間評価 p.p.11]
C-2021-2_U21,,オーダー記法がよくわからなかった。,ユークリッドの互除法を用いれば、非常に速く最大公約数を求めることができるということを学んだ。また、ソートについて今回はバブルソートと選択ソートを中心に学んだ。,,
C-2021-2_U23,バブルソート、選択ソートのやり方,,,,
C-2021-2_U24,バブルソートと選択ソートの時間計算量の理解,オーダー記法の理解,バブルソートと選択ソート、ソートアルゴリズムの計算量の内容と関係,とんでもなく詰まってしまったので、復習を丁寧にやろうと思います。,
C-2021-2_U25,ユークリッドの互除法の正統性が理解できた,オーダー記法についての理解,アルゴリズムとユークリッドの互除法、バブルソート,アルゴリズムとユークリッドの互除法の関係性を知ることができてよかったです。,
C-2021-2_U26,"ユークリッドの互除法を用いることで、最大公約数の問題を比較的簡単に解決できると理解できた。
また、ソートを行うアルゴリズムには様々あり、その計算量は入力の長さの関数を考えることで評価できることが分かった。",特にありません。,"最大公約数の問題は、長方形をなるべく大きな正方形で埋める問題に置き換えることで計算時間を短くすることができる。このとき、ユークリッドの互除法を用いる。
また、ソートとは、与えられたものをある順序に従って並べ替えることであり、ソートアルゴリズムにはバブルソート、ヒープソート、マージソートといったものがある。
計算量は入力の長さの関数として考える。このとき、入力が大きいときの関数の上界を考えることで、計算量を評価することができる。",大きな数の因数分解を高速で行うことができるアルゴリズムが知られていないため、暗号通信に用いられていると知ることができた。次回の授業にも集中して取り組みたい。,特にありません。
C-2021-2_U27,,,,,特にありません。
C-2021-2_U28,,,,,特にありません。
C-2021-2_U29,バブルソート、選択ソートそしてオーダー記法の定義に従って、これらの時間計算量はO(n^2)であること(証明も),"ユーグリッドの互除法を例として言いたいことは分かった(時間的評価)が、
細かいところまでは少し理解に苦しんだ","ユーグリッドの互除法(アルゴリズム)
計算ステップ数と実行時間
バブルソート、選択ソート、計算量、オーダー記法(ランダウ)","前期にpythonを学んでいたのでアルゴリズムの話や、ソートの理解が安易だった。
次はlogが出てくるので楽しみです
",
C-2021-2_U3,バブルソートや選択ソートによって数を小さい順に並べることができ、アルゴリズムにおいてそれらがオーダー記法を用いて表せることがわかった。難しい内容であったが、バブルソートや選択ソートの仕組みであったり、手順がしっかりわかった。,バブルソートや選択ソートの計算的な仕組みを理解するのが難しかったです。仕組みはわかったものの、文字になると結構むずかしく、混乱しました。,"バブルソート：隣り合う要素の大小を比較しながら整列していく（１番目と２番目の要素を比較して順序が逆であれば入れ替える、最後まで繰り返すと一番大きな要素が最後尾に移動する）
ソートの事例：ゴルフのスコア集計
バブルソートの計算量：整列したい数列の長さをnとし、要素の比較回数と交換回数で時間計算量も見積もる。
　　　　　　　　　　　要素の比較回数ー「常に」n(n-1)/2回　（n-1)+(n-2)+ …+1=n(n-1)/2
　　　　　　　　　　　要素の交換回数ー「高々」n(n-1)/2回
選択ソート（最大の要素を探し、それと最後尿素を入れ替える、残りの数列に対して、同じ操作を繰り返す）
選択ソートの計算量：整列したい数列の長さをnとし、要素の比較回数、最大値の更新回数、要素の交換回数で時間計算量を見積もる。
　　　　　　　　　　要素の比較回数：「常に」n(n-1)/２回
　　　　　　　　　　(n-1)+(n-2)+…+1=n(n-1)/２回
　　　　　　　　　　最大値の更新回数：「高々」n(n-1)/２回
　　　　　　　　　　n+(n-1)+(n-2)+…+1=n(n-1)/2回
　　　　　　　　　　要素の交換回数：「高々」n-1回
アルゴリズムと計算量　時間計算量T(a)入力に対して各手順を実行するのにかかる時間の総和
　　　　　　　　　　　入力によって実行する順序が変わる
　　　　　　　　　　　入力に依存する関数がある
　　　　　　　　　　　各入力に対して個別に計算量を考えるのは大変
→入力の長さnの関数として考える
　T(a)→T(n)
計算量のオーダー評価
時間計算量：大小比較、市場の演算、代入などの基本的操作の回数で見積もる
アルゴリズムの計算量＝オーダー記法（関数T(n)がf(n)のオーダーであるT(n)=O(f(x))
T(n)<=cf(n)
まとめ：バブルソート、選択ソートの時間計算量はo(n**)


",具体例が多くスライドに乗っていてわかりやすかったです。,
C-2021-2_U30,,,それぞれのソートの仕組みと必要な試行回数,,
C-2021-2_U31,"ユークリッドの互除法が計算時間が非常に短く、有用であるということを理解できた。
今回の授業でピックアップされた、バブルソート、選択ソート、ヒープソートの手順を理解し、それらを比較したときヒープソートが入力整数が38以上のとき有用であるということが理解できた。",オーダー記法の厳密な値の求め方があまりよく分からなかった。,"様々な計算をよりステップ数の少ないアルゴリズムを考えることで計算時間を短くすることができる。
アルゴリズムにかかる時間の上限はオーダー記法によって評価することができる。
データをある順序に従って並べ替えることをソートといい、バブルソート、選択ソートなど様々な種類がある。","高校数学で学習したユークリッドの互除法の本当の強みを初めて理解できて、興味深かった。
単なる数字の並び替えに複雑なアルゴリズムが必要で、難しく感じた。",
C-2021-2_U33,"euclid_gcdのアルゴリズムのアイデアがわかった。ユークリッドの互除法を使って最大公約数を求められるようになった。
また、ソートのアルゴリズムを理解し、入力が多いときの計算量を見積もるためのオーダー記法を理解した。","ユークリッドの互除法の証明を理解するのに時間がかかった。

","最大公約数を求めるアルゴリズムの仕組みをまなんだ。二つの数の中で最も大きい可能性のある数から1まで割っていく。そして、最大公約数問題を長方形をなるべく
大きいな正方形に敷き詰めることで解決するアイデアを学んだ。また、バブルソート、選択ソートのやり方を学んだ。",ユークリッドの互除法を理解するのに苦労したが、理解してみると面白く感じられた。 特に大きな数の因数分解が難しいことが分かっていて、ユークリッド互除法の威力を実感できた。また、小さな違いによってアルゴリズムの効率性が大きく変わることを感じた。,
C-2021-2_U34,バブルソート、選択ソートの考えを理解することができた。,,,オーダー記法の考えは微積で少しやっていたので、割とわかりやすかった。,
C-2021-2_U35,バブルソートと選択ソートについて具体例を通して、どういった操作をするのかが理解できた。,,,,
C-2021-2_U36,最大公約数問題でのユークリッドの互除法の有用性やバブルソート、選択ソートという二つのアルゴリズムの概要が分かり、実際に簡単な問題を通して、整列手順や要素の交換回数が最大になる場合を考察することができた。,オーダー記法でのT(n)の上限を決める具体的な関数の決め方がよく分からなかった。,最大公約数問題では、しらみつぶし的解法は計算ステップ数が遅くなってしまうが、ユークリッドの互除法を用いれば高速に最大公約数を求めることができる。バブルソートは隣り合う要素の大小を比較しながら整列していくアルゴリズムであり、選択ソートは最大の要素を探し出して、それを最後の要素と入れ替える操作をくり返していくアルゴリズムである。時間計算量を入力の長さnの関数として考え、入力が大きい時の関数の上限を定めたいためにオーダー記法を用いる。,バブルソート、選択ソートの二つのアルゴリズムについてはしっかり理解できた。オーダー記法についてn₀やcの決め方がいまいちよくわかっていないので、自分で調べて分からせておく必要がある,
C-2021-2_U37,ユークリッドの互除法が成り立つ理由,,様々なソートとその評価方法,日誌を忘れていてあまり覚えていない状況で日誌を書いているので次回はすぐに書くようにしたい,
C-2021-2_U38,,ユークリッド互除法を高校で知ったのにもかかわらず、証明でつまづきました。,,,
C-2021-2_U39,ユークリッドの互除法の原理と、バブルソート、選択ソートついて分かりました。,ありません。,まず、ユークリッドの互除法について学びました。互除法とは最大公約数を求める一つの方法で長方形から正方形を除いていくことで最大公約数を求める方法です。これによって計算のアルゴリズムが変わり計算にかかる時間をすごく短くすることができます。さらに、ユークリッドの互除法を用いると、その計算ステップ数は高々Log2Nである。また、ソートということは、整列のことであり、今回の授業ではバブルソートと選択ソート、ヒープソートについて学びました。バブルソートとはある整数列を昇順に整列することで、隣の数の大小関係を比較することによって整列する。また、この様子が泡が水面に浮かぶことに似ていてバブルソートともいう。バブルソートでの要素の計算量は常にn(n-1)/2回で、要素の交換回数は高々n(n-1)/2回である。また、選択ソートはある整数列の中で一番大きい数を探して、最後の数と入れ替える操作を繰り返すことによって昇順に変える整列である。選択ソートでの要素の比較回数は常にn(n-1)/2回で、最大値の更新回数は高々n(n-1)/2回である。また、要素の交換回数は高々n-1回である。時間計算量をT(a)と定義しこれはある入力に対する各手順を実行するのにかかる時間の総和のことである。だが、T(a)ではなくT(n)として入力の長さｎにたいする関数として考える。アルゴリズムでの計算量は最悪計算量いう。最悪計算量とは長さｎの入力のうち、最も時間のかかる入力に対する計算量のことである。また、オーダー記法というものは任意のN0に対してT(n)以上のｃf(n)という関数が成り立つことで、このとき、T(n)＝O(f(n))とかく。オーダー記法の意味はｎが無限にいくほど、定数は無視できるということである。例えば、3n+5をオーダー記法使って表すとO(n)になる。このような記法をオーダー記法という。,,ありません。
C-2021-2_U40,,,アルゴリズムの一つであるユークリッドの互除法を利用した計算の仕方をチャートで表す。また計算時間の観点からnaive_gcdに比べてeuclid_gcdの有用性も示した。ソート問題の中でもバブルソートと選択ソートの中心に説明があった。バブルソートは隣り合う要素の大小を比較しながら整列していく並べ方、選択ソートは最大の要素を探してそれと最後の要素を入れ替える並べ方である。これらの性能評価として時間計算量の最悪計算量からオーダー記法を用いて考えることができる。,,
C-2021-2_U41,2進木を使って考えるソート問題が分からなかったけど、講義を聞いて後から復習してそのルールと欠点がよく分かりました。また、最大公約数問題について視点を変えて問題を正方形と長方形の問題に組み替えユークリッドの互除法を用いることで出力を見つけるための時間が大幅に減るということがよくわかりました。そして、バブルソート、選択ソートが何なのかということと、それの交換回数や比較回数の｀高々'がつく場合と｀常に＇がつく場合の違いについてわかりました。,オーダー記法があまりよく分かりませんでした。,,,オーダー記法を考える際、やはり出来るだけぎりぎりの上限を求めたほうがいいのですか？ぎりぎりの上限というのはどうやってぎりぎりだと確かめるのしょうか？
C-2021-2_U42,オーダー記法によってアルゴリズムの計算量を考えることができた。また、バブルソート、選択ソートの時間計算量はO(n^2)で表される。,,バブルソートは隣り合う要素の大小を比較しながら整列していくという基本的なアイデアのもとに行われており、最終的にランダムに並べられた要素を大きさの順に並べ替えることができる。選択ソートは最大の要素を探してそれと最後の要素を入れ替えるという基本的アイデアのもとで行われている。,コンピューターによって行われているソートや計算のアルゴリズムを知ることができて非常に興味深かった。,
C-2021-2_U43,ユークリッドの互除法の有用性、ソートについて理解することができた。,,"ユークリッドの互除法を取り上げた。最大公約数の問題の解法にはしらみつぶし的解法とユークリッドの互除法が存在する。計算ステップ数とはアルゴリズムが終了するまでに行われる基本演算の回数のことであり、しらみつぶし解法では高々2n、ユークリッドの互除法では高々２log2nであり、ユークリッドの互除法のほうがはるかに速い。
ｎ個のアイテムが与えられたときにそれをある順番にしたがって並べ替えることをソートと呼ぶ。バブルソートとは隣り合う要素の大小を比較しながら整列していくものであり、選択ソートは最大の要素を探し、それと最後の要素を入れ替えるというのが基本的なアイデアである。バブルソートの要素の比較回数は常にn(n-1)/2回、要素の交換回数は高々n(n-1)/2回であるのに対し、選択ソートは要素の比較回数は常にn(n-1)/2回、最大値の交換回数は高々n(n-1)/2回、要素の交換回数は高々n-1回である。
ここで、計算量を入力の長さｎの関数として考える。また関数T(n)に対して「T(n)がf(n)のオーダーである」とはある正定数ｃ、ｎ０が存在し、任意のｎ＞ｎ０にたいしてT(n)<cf(n)が成り立つことであり、これをオーダー記法と呼ぶ。",オーダー記法が難しかった。きちんと復習をしたい。,
C-2021-2_U44,長方形の考え方から、ユークリッドの互除法がなぜあのような計算方法になるのかが理解できた。,最悪計算量を求めることがどのように役に立つのかよく分からなかった。,,コンピューターを使って計算したとしても、入力する数が極めて大きいときには莫大な時間がかかることが分かって驚いた。アルゴリズムの重要性が理解できた。,
C-2021-2_U46,プログラムによるソートの方法を学ぶことができた,,"バブルソート：一つ一つ大小比較でソートする
選択ソート：最大の要素を探して順番に並べていく",臨機応変というのが難しいプログラムにおいて、どの数列でも対応できるようなソートの方法を学ぶことができて面白かった,
C-2021-2_U47,今まで触れてきたユーグリッド互除法や因数分解もアルゴリズムの1つであること。,ヒープソートについてははじめイメージが湧きにくかったですが、徐々にイメージが理解出来てきた感覚です。,"アルゴリズムにはいくつもの種類がある。最小回数で物事を結論づけること
計算のステップ数を減らしてアルゴリズムの実行時間を短くする。",今までの知識が新たに違う見方と結びつけられ、新しい考え方が出来ました。,
C-2021-2_U48,ユークリッドの互除法を使うと、非常に効率よく素早く最大公約数を見つけることが出来ることが分かった。バブルソートや選択ソートを使うと、数列の数字を小さい順に並べることが出来ることが分かった。根付き木を使うことでも、並べ替えることが出来ることが分かった。,,最大公約数を見つけるときはしらみつぶしで見つけるよりも、ユークリッドの互除法を使って見つける方が、効率的で素早く見つけることが出来る。バブルソートは数列の数字を隣りあう数字で大小を比較することによって数字を小さい順に並べていくものである。選択ソートは最大要素を探してそれと最後の数字を入れ替えることで数字を並べていくものである。バブルソートと選択ソートは少し違う。アルゴリズムの計算量は入力の長さによって決める。最悪計算量を知りたいので比較的短い入力はどうでもよい。アルゴリズムの計算量はオーダー表記で考える。2進木でソートすることもできる。,,
C-2021-2_U5,バブルソート・選択ソートの仕組みを理解することができた。,計算量オーダーのくだりで、T(n)の係数や項を無視していい数学的な理由があまり理解できていない。極限と関係があるのか。,ある問題を解決するアルゴリズムは多数考えられるが、その所要時間は大きく変わる。解決したい問題の規模が大きくなっても対応できるものがよいアルゴリズムである。,名前だけ聞くと難しそうだが、バブルソート・選択ソートの仕組みやオーダー記法の基本的な考え方を理解できてよかった。,
C-2021-2_U50,,大丈夫です。,,,
C-2021-2_U51,バブルソートの仕組みを理解できた,選択ソートの内容がいまいちわからなかった,バブルソートについて知る,"うまく理解できなかったことがあったのでしっかり復習したい
",
C-2021-2_U53,バブルソート、選択ソートについて、オーダーのところが良くわからなかったのですが、自分で調べてみて、やっと理解することが出来ました。,特にありません。,今回バブルソート、選択ソート、ヒープソートや、オーダー記法、時間計算量などたくさんのことを学びました。,"今日の授業は、とても頭を使うことばかりで、難しかったですが、なんとかついていけました。自分でも予習、復習をしっかりとして、次回も頑張ります。
今回出された課題を、PDF化して満足してしまって出すのを忘れてしまったので、もし遅れて出すことが可能であれば、出したいです。",
C-2021-2_U54,,,最大公約数問題では、剰余(mod)を使う。ソート（整列）問題は、昇順に並べる。要素の比較回数は常にn(n-1)/2、交換回数は高々n(n-1)/2である。2進木を使うと、並び方によって回数が変わる。,今日は初めて小テストを間違えてしまってとても悔しかったので、次回はしっかり復習をしてから臨もうと思います。ユーグリッドの互除法を折り紙で表現するのは分かりやすかったです。,
C-2021-2_U55,ユークリット互除法やバブルソート、選択ソートなどのアルゴリズムについて詳しく知ることができた。,授業内で理解することができた。,アルゴリズムの一つとしてユークリット互除法がある。ソートは並び替えのことで昇順は小さい値から大きい値に、降順は大きい値から小さい値に並び替える。バブルソートは隣り合う要素の大小の比較をしながら整列する。選択ソートは最大の要素を探し、それと最後の要素を入れ替える。時間計算量はもっとも時間のかかる上界を考える。,一見難しそうなことを扱っているかのように思うが、じっくり考えるとその意味が分かった。,
C-2021-2_U56,ユークリッドの互除法、バブルソート、ヒープソートによる時間計算量の見積もり方が分かった。,まだ計算慣れしていないので、実際に計算するとなると資料を見ながらでないと解くことができない。また、知識量が多すぎて処理しきれない部分があった。,"計算ステップ数とは、アルゴリズムが終了するまでに行われる基本演算の回数である。計算ステップ数が少ないほどアルゴリズムの実行時間は短くなる。最大公約数問題ではmodを基本演算と考える。最大公約数問題を、「長方形をなるべく大きな正方形で埋める問題」に置き換えて考えると高速化できる。このようなアルゴリズムをユークリッドの互除法という。n=min(x,y)とすると、ユークリッドの互除法の計算ステップ数は高々log₂nである。ユークリッドの互除法を用いれば、非常に高速にgcd(x,y)をもとめることができる。バブルソートとは隣り合う要素の大小を比較しながら整列していくものである。バブルソートの計算量において、整列したい数列の長さをnとし、要素の比較回数と交換回数で時間計算量を見積もるとき、要素の比較回数は常にn(n-1)/2回で、要素の交換回数は高々n(n-1)/2回である。選択ソートとは最大の要素を探し、それと最後の要素を入れ替えるものである。選択ソートの計算量において、バブルソートと同様にして、要素の比較回数は常にn(n-1)/2回であり、最大値の更新回数は高々n(n-1)/2回であり、要素の交換回数は高々n-1回である。最悪計算量とは長さn農地、最も時間のかかる入力に対する計算量のことである。入力が大きいときの関数の上界を考える。T(n)がf(n)のオーダーであるとは、ある正定数c,n₀が存在し、任意のn>n₀に対してT(n)<=cf(n)が成り立つことである。このとき、T(n)=O(f(n))と書く。2進木を使った素朴なソートの欠点として、入力数列の並び方で計算時間が変わるというものがある。節点数ｎ、高さｈの2進木が、次の2つの条件を満たすとき、その木をヒープという。1，深さｄ(0<=d<=h-1)の節展はちょうど2^d個存在し、深さｈの節展は左から順に存在する。2，その節点の値も、自分の親に格納された値以下である。入力数列のサイズがｎのとき、ヒープソートの比較回数は3nlog₂nを超えない。",,特にありません
C-2021-2_U57,賢いアルゴリズムを突き詰めると、ある程度使われている数式が分類されているということが感覚的に理解することができた。その中でも、modを使うのは幅広く使われていて、理解することも簡単（使いやすい）方法であるということが分かった。,ユークリッドの互除法の正当性のところの理解が難しかったが、具体的な数字を用いて、数学的に理解しようとして多少理解することができた。,賢いアルゴリズムには共通する方法があり、その一つにユークリッドの互除法であり、割り算の駆使によって最適解を求めようとする。また、整列問題においてバブルソート、ヒープソートといわれるアルゴリズムがあり、今回はそれを学んだ。バブルソートは隣り合う要素の大小比較によって、整列させ、ヒープソートは２進木を構成していく。,高校で習っていた数学に近くなってきたと感じた。ただ、定理や定義などの難しくなってきたので予習復習をちゃんとして授業に置いて行かれないようにしたい。,
C-2021-2_U58,"ユークリッドの互除法のイメージをつかむことができた。
ソートの定義がわかった。",オーダーに関する説明がわかりにくかった。,"最大公約数を求めたいとき、愚直に両方の余りが０になる数が見つかるまで計算し続けるのは数が大きくなると莫大な時間がかかってしまう。
そのため、ユークリッドの互除法を用いることで圧倒的に早く大きな数の最大公約数を求めることができる。
また、いくつかの数字をある一定の順序に従って並び替えることをソートという。
隣の数字と大小を比較し続け並び替えるバブルソートや、一つの数字を抽出しほかの数字と比較する選択ソートなどがある。","文系には難しい。
",
C-2021-2_U59,modを用いた考え方をある程度理解できた。,バブルソートにおける計算量がよくわからなかった。,,,特にありません。
C-2021-2_U6,"ユークリッドのアルゴリズムを用いるのが早い計算方法なのだということが分かった。
ソートというものがあり、その中にも様々な手法があることが分かった。",長方形を正方形に区切って考える理由も、それがどうユークリッドの互除法につながるのかもいまいち理解できなかった。,"最大公約数を求める際はしらみつぶしだと計算ステップが大きくなるため、賢いアルゴリズムを考える必要がある。最大公約数の場合は、長方形を正方形に区切るように考える。これはユークリッドの互除法を表していて、それを用いると高速で計算が可能。
アルゴリズムの中には、数字の整列をするソートがあり、ソートにも様々な種類がある。バブルソートは隣り合う数字の大小を比較して並び替えるものである。",予習があんまりできておらず、理解が出来なかった箇所があった。また、今回も授業に集中できていない箇所があったので、集中を切らさないようにしたい。,
C-2021-2_U60,ユークリッドの互除法の立証、バブルソート、選択ソートの方法,バブルソート、選択ソートの計算量がn²のオーダーである理由,"2整数x,yの最大公約数gcd(x,y)を求める際、除法原理(自然数x,yに対してy=zx+rかつ0≦r<xを満たす整数z,rが唯一存在する)を用いるよりも、
ユークリッドの互除法を用いた方が計算ステップ数(アルゴリズムが終了するまでに行われる基本演算回数)が少ない(前者と後者のそれぞれの計算ステップ数は高々2n、高々2lognなので、n>0より成立)
いくつかの要素を「ある順序」に従って並び替えることをソートと呼ぶ(特に指定されてなければ昇順)。
特に、隣り合う要素の大小を比較して整理することをバブルソート、最大の要素を探し、それと最後の要素を比較して整理することを選択ソートと呼ぶ。
n個の要素を使う場合、前者の計算量は高々n(n-1)、後者の計算量は高々(n+1)(n-1)である。
また、関数T(n)に対して、T(n)≦cf(n)(n>n₀)(c,n₀は正の定数)となるとき、T(n)はf(n)のオーダーであると言え、T(n)=O(f(n))と書く。
これにより、バブルソート、選択ソートの計算量はn²のオーダーであることが分かる。",BR-Mapの存在を忘れていたため、こまめにこのサイトをチェックして、課題の内容を逐一確認するよう心掛けたい。,
C-2021-2_U61,計算方法の工夫でそれにかかる時間が劇的に短くなること。,,効率の良いアルゴリズムで計算時間を短くする、ソートの手法,ソートの手法ってたくさんあるんだなって思いました。,
C-2021-2_U64,ソートというのは計算機科学における最も基本的な問題の一つであり、n個のアイテムが並べられたときに、それらを「ある順序」に従って並べることであることがわかった。また、ソートアルゴリズムには、交換型、分割統治型、選択型などがあることがわかった。また、それぞれのソートアルゴリズムのやり方について学ぶことができた。２進木の読み方について理解することができた。,ヒープソートについての理解がいまいちできなかった。また、ヒープソートの問題を解くことができなかった。,ソートアルゴリズムには様々な種類のものがあり、それぞれのやり方について学んだ。アルゴリズムと計算量の間の関係についてや計算量のオーダー記法について学んだ。また、２進木とは何か、その特徴についてやヒープソートについて学んだ。,ソートアルゴリズムの中でも様々な種類があり、それぞれによってやり方が違うところが難しいと感じた。また、練習問題があまり解けなかったのでもう一度復習をして解けるようにしたい。,特にありません。
C-2021-2_U65,ソートについて。,オーダー記法が難しかった,"ソート（整列）＝並べ替えること
昇順＝小さい方から大きい方へ
バブルソート＝隣り合う要素の大小を比べて並べる
バブルソートの計算量
比較階数は常に：ｎ（ｎ－１）/２

選択ソート＝最大の要素を探し、それと最後の要素を入れ替える
要素の比較階数は常にｎ（ｎ－１）/２
要素の交換回数は常にｎ－１

時間計算量＝入力に対して各手順をおこなうのに必要な時間の総和
→入力の長さｎの関数として考える

〇最悪計算量
長さｎのうち最も時間がかかる入力に対する計算量

〇オーダー記法
関数T（ｎ）に対して「Ｔ（ｎ）がｆ（ｎ）のオーダーである」＝ある正定数ｃ、ｎ０が存在し、任意のｎ＞ｎ０に対してＴ（ｎ）≦ｃｆ（ｎ）が成り立つこと

この時、Ｔ（ｎ）＝Ｏ（ｆ（ｎ））と書く


",前期のプログラミングの時にやっていたソートがこういう仕組みなのだな、と面白く感じた。オーダー記法が難しい。練習したい。,
C-2021-2_U66,ユークリッドの互除法についてやバブルソート、選択ソートの方法は理解することができた。,アルゴリズムと計算量の部分（特にオーダー記法の表し方）が不完全燃焼。,最大公約数問題での除法原理、ユークリッドの互除法を計算ステップ数、計算時間の点から考える。バブルソートや選択ソートの考え方。アルゴリズムと計算量について。,重いか軽いかわからない偽コインの問題は冒頭のページで理解することができました。また前半のユークリッドの互除法の話は簡単に理解することができましたが、後半のバブルソート、選択ソート、オーダー記法は少し難しいと感じました。オーダー記法はまだしっかりと理解できていないので復習をします。,
C-2021-2_U67,,,今回の内容は前回の続きでユークリッド互除法を用いたアルゴリズムだった。そこで用いるのがしらみつぶし的解法であった。また、アルゴリズムが終了するまでの計算回数を計算ステップといい、それが短いほどアルゴリズム時間が短くなる。高速化への手段としては長方形をなるべく大きな正方形で埋めるというものがある。そのようなアルゴリズムをユークリッド互除法という。これにはかなりの正当性がある。そしてもう一つのアルゴリズムとしては選択ソートとバブルソートによるアルゴリズムがあり、これは交換していくタイプのそーとである。また、ヒープソートがある。これは二進木を用いた手段であり、二つの条件をもとにしたものである。,,
C-2021-2_U68,ユークリッドの互除法を用いると簡単なアルゴリズムで素因数分解をすることができることが分かった。,特にありません。,２つの整数の最大公約数を求めるアルゴリズムでは、２つの整数をそれぞれ素因数分解する方法よりも、ユークリッドの互除法を用いたアルゴリズムの方が適している。理由は、素因数分解では数字が大きい時にアルゴリズムを作るのが難しいからである。数字の大小の並び替えでは、ヒープソートでない2進木とヒープソートの2進木の並べ方があるが、計算にかかる時間の関数が数字の多さによってそれぞれ異なるため、数字の多さによって適する方法を選択するとよい。,数字を並べ方の2進木の考え方が分かって面白かった。ヒトの感覚的には、並び替えるのは簡単だが、それをコンピュータに処理させるときには厳密なアルゴリズムを与えなければいけないというのを実感した。,特にありません。
C-2021-2_U69,,,,今回の講義では自分の中でしっかりと理解できていないところが多くあったのでもう一度講義資料を見直して復習しようと思った。,
C-2021-2_U70,今日の内容で分かったことは、データのソートの手法は今まで知っていた方法だけではなく様々な方法が存在するということだ。,オーダー記法について定義を理解するのに時間がかかった。,今日の講義の主な内容は、データの並び替え、つまりソートである。ソートについてはいくつか手法があるが、今回はその中の、バブルソートとヒープソートについて学習した。バブルソートとは、n個の隣り合う数字を左から順に大小比較する作業を行い、次にその作業をもう一度左から順にn-1回繰り返す。これをn(n-1)/2回繰り返すことによって完了する。ヒープソートとは、2進木によるソートを行っていく上で、その木がヒープの状態にあるように要素を構成していくものである。,今回の授業のメインテーマは、データのソートに関するものであったが、以前受講したプログラミングの講義ではバブルソートの手法を用いてソートを行なった。今回学習したヒープソートを用いてプログラムを書けないかどうか試してみたい。,
C-2021-2_U71,最大公約数を表す。,,最大公約数を表す。,講義ありがとうございます。,
C-2021-2_U72,大体の理解はできた。,オーダー表記をしっかり理解しきれてない。,"最大公約数問題を解くための手段としてしらみつぶし的解法がある。ふたつ文字があるうちの小さい方をkとして割り算を行なってあまりが等しいかを検証する。あまりが等しくない場合は、kをk-1に変えて同じように割ってみる。それをあまりが等しくなるまで続けるものである。またこの一連の流れのことを計算ステップ数という。これが少ないほど実行時間が減る。最大でも2k回である。このアルゴリズム遅え。この問題を[長方形をなるべく大きな正方形で埋める]ことに思考を変えてみる。長方形の辺の長さをそれぞれx,yとする。yの方が大きい。r=y(mod x)として、rが０かどうかをみる。0でない場合、yをxに、xをrに置き換えてもう一度行い、r=0になるまで繰り返す。（ユークリッドの互除法）この正当性を示す。xとrはその最大公約数で割り切れて、y-rはxで割れる。そのためxとyの最大公約数の方が大きい。ここでx=gcd(x,y)*a, y=gcd(x,y)+bとすると、y-zx=gcd(x,y)*(b-za)=rとなり、rはgcd(x,y)で割れるため、xとrのgcdの方が大きい。この２つが両立するためには、gcd(x,y)=gcd(x,r)であることが前提になる。ユークリッドの互除法の計算ステップ数は最大で2log2nである。このアルゴリズムは早く終わる。
n個アイテムがあったとしてある規則に則り並べ替えることをソートという。ただソートとのみいった場合、昇順に並べることにする。長さnの数列a[a1~an]をa'[ai1~ain]に並べ替える。バブルソートは基本的に隣あう文字を比較して整理するものである。左端から順に行い右端にいったら左端に戻り、また行う。これをソートが完了するまで行う。整列したい数列の長さをnとすると、要素の比較回数は常にn(n-1)/2回である。要素の交換回数は最大n(n-1)/2回である。選択ソートは最大の要素と右端を入れ替える。このソートの計算量は、数列の長さをnとすると、要素の比較回数と交換回数はバブルソートのものと等しい。あと、最大値の更新回数が最大n(n-1)/2回になる。時間計算量の関数を数列の長さnについてT(n) とする。ここで長さnのプロットのうちもっとも時間のかかる計算量のことを最悪計算量という。関数T(n)に対してT(n)がf(n)のオーダーであるとは、ある正の整数c、n0が存在し、任意のn,n0についてcf(n)がT(n)よりも大きいことをいう。この時T(n)=O(f(n))と表記する。アルゴリズムの計算量はオーダー表記で考える。",,
C-2021-2_U73,様々な方法での昇順を求めるアルゴリズムがわかった。最悪計算量の表記。,２進木を使ったアルゴリズム,,少し複雑な内容だったので、復習をしてより自分の不明な個所を明確にしてできる限り取りこぼさないようにしていきたい,
C-2021-2_U74,バブルソートと選択ソートについて知ることができた。,,バブルソートや選択ソート、計算ステップについて。,,
C-2021-2_U75,"ソートの種類や手順などについて理解することができました。オーダー記法についても、何のために使われるものなのかなどは理解することができました。
",オーダー記法が、少し難しくて理解や説明があまりできませんでした。,アルゴリズムが終わるまでに行われる基本演算の回数を計算ステップ数という。最大公約数を求める方法は、因数分解やユークリッドの互除法などがある。ｎ個のアイテムをある順序に従って並び替えることをソートと呼び、バブルソートや選択ソートなどの種類がある。入力する際に各手順を実行するのにかかる時間の総和を時間計算量と言い、入力の手順によって計算量は変わる。そのうち最も時間のかかる入力に対する計算量を最悪計算量という。入力が大きいときの関数の上限を求めるためにオーダー記法を用いる。アルゴリズムの計算量はオーダー記法で考えられる。,　ソートがどのようなものかは理解することができました。オーダー記法は内容が難しかったのでもう一回見直したいと思います。,
C-2021-2_U76,バブルソートの方法、オーダー記法がよく分かった。,バブルソートと選択ソートの使い分けがどうなされているのか気になった。,あるアイテムが複数個与えられたときにそれらをある順序に従って並び替えることをソートという。またアルゴリズムの計算の際には入力が大きいときの関数の上界を考えるようにするとよい。,回が進むたびに内容が深く、難しくなっていくのでしっかりと復習も頑張りたいと思った。,
C-2021-2_U78,ソートの種類がたくさんあることや、利点、欠点を知った。,バブルソートの計算量の証明が難しかった。,バブルソート、選択ソートについて学んだ。,たくさん学べて楽しかったです。,
C-2021-2_U79,選択ソート、バブルソートの時間計算量の評価の仕方について、理解できた。,ヒープソートについての理解がまだ十分ではありません。,ソート（整列）問題について、ソート問題とは何かについて学び、整列したい数列の長さをｎとしたときの時間計算量という値の計算方法を学んだ。ヒープソートについても学んだ。,,
C-2021-2_U8,　バブルソート、選択ソートは比較的すぐ理解でき、練習問題を問題なく解くことができた。それぞれの計算量がなぜそうなるかも理解できた。,オーダー記法が理解しずらかった。まだ、完全に理解できたとは言えないので次の授業までには自分の口で説明できるほどにしたい。,"　最大公約数を求める問題について考える。このとき正整数ｘ、ｙについてｙ＝ｚｙ＋ｒかつ０＜＝ｒ＜ｘをみたす整数ｚとｒが唯一存在するという除法原理が言える。最大公約数を求める問題においてしらみつぶし的解法という１つずつ数を小さくしていくという方法があるが、この方法では整数の桁が増えるほど計算ステップ数が多くなり、効率的とは言えない。高速化する手段として最大公約数問題を「長方形をなるべく大きな正方形で埋める問題」に置き換えて考えるものがある。これをユークリッドの互除法という。ユークリッドの互除法を用いることで、計算ステップがn=min(x,y)のときに高々２log₂ｎとなり計算が修二に終わるようになる。
　いくつかのアイテムが与えられたときにそれらをある順序に従って並べ替えることをソートという。代表的なソートアルゴリズムとしては交換型・分割統治型・選択型などがある。交換型に分類されるバブルソートは隣り合う要素の大小を比較しながら整列していく方法である。この方法では長さｎの数列において要素の比較回数は常にｎ(n-1)/2回、交換回数は高々n(n-1)/2回である。交換型に含まれるもう一つのソートに選択ソートがある。選択ソートは最大の要素を探し、それと最後の要素を入れ替えるという方法である。このとき、要素の比較回数は常にｎ(n-1)/2回、更新回数は高々n(n-1)/2回、交換回数は高々n-1回となる。計算量は入力の長さｎの関数として考える。その中でも最も時間のかかる入力に対する計算量を最悪計算量という。入力が大きいときの関数の上限を考える際にはオーダー記法を用いる。
　各節点が高々2つの子しか持たない根付き木を2進木という。2進木を使ったソートもあり、完成した２進木は節点の値を（左の子、自分、右の子）の順に読む通り掛け順が用いられる。欠点としては入力数列の並び方で計算時間が変わることや入力サイズをｎとすると最悪の場合、比較回数はｎ（ｎ－１）/２となることがあげられる。",オーダー記法が難しかった。授業中で理解しきれなかったので次回からはもっとしっかり予習しなければならなかったと反省した。,"・バブルソートや選択ソートはどのような際に使われているか教えてほしいです。（日常的に目にするものなど）
・オーダー記法の際に用いるT(n)は最悪計算量のことですか。
・オーダー記法の例１においてn>5となるのはなぜですか。私はn≧５だと考えました（3*5+5=4*5より）。
"
C-2021-2_U80,バブルソート、選択ソートがどういったものなのか、またその時間計算量とオーダーについて理解することができました。また、ユークリッドの互除法についても理解を深めることができました。,オーダーについての自分の理解が本当に正しいのかが心配です。,ユークリッドの互除法をアルゴリズムとして捉えた場合についての説明や、バブルソートや選択ソート、時間計算量、オーダー記法についての説明がありました。,前期の講義で少しソートについて学びましたが、その時には出てこなかったような知識がたくさん紹介されていて面白かったです。またアルゴリズムなどを通して、自分では思いもつかないような考え方に触れることができるのも面白いです。,特にありません。
C-2021-2_U81,アルゴリズムにはいいやつとわるいやつが存在すること。,,"計算時間評価のコンピュータの計算において重要な要素である。また整数の性質と密接にかかわっている。
",奥が深すぎる。やはりコンピュータは数学と共にあることを実感した。,
C-2021-2_U85,n個のアイテムが与えられたときに、それらをある順序に従って並べ替えることをソート（整列）という。バブルソートは交換型、ヒープソートは選択型である。バブルソートは、隣り合う要素の大小を比較しながら整列していくというアイデアである。これを最後まで繰り返すと、一番大きい要素が最後尾に移動する。選択ソートは最大の要素を探し、それと最後の要素を入れ替えるというアイデアである。時間計算量は入力aに対して各手順を実行するのにかかる時間の総和である。最悪計算量は最も時間のかかる入力に対する計算量である。一般に、入力が大きいと時間がそれだけかかる。,全体的に難しかった。計算頑張ります。,バブルソートとヒープソートについて学んだ。,難しかったけど頑張って授業について行きました。,
C-2021-2_U86,バブルソート、選択ソート、ヒープソートの仕組みが分かった。,オーダー記法がよく分からなかった,入力の長さnの関数としてみることで、計算量を求めることができる。,理解が難しい箇所が増えてきたので、予習、復習をしっかりとしようと思った。,
C-2021-2_U88,コンピューター上で計算にかかる時間を計測することができる計算量という単位を理解した。その計算方法は特別な関数などではなく一般的な数列の和の式だったりした。また、オーダー記法がどのようなものかわかった。,オーダー記法がどんなものかはわかったが、それを使うとどのような利点があるのかどうかがまだわかっていない。,今回はバブルソートと選択ソートやその計算量の求め方およびオーダー記法について学んだ。,復習がいままでになく遅くなったので、改善したい。,
C-2021-2_U89,大きな桁数の計算だと、少しのアルゴリズムの違いで、計算時間に雲泥の差ができることが分かった。,ユークリッドの互除法の図形的証明の部分が分からなかった。,しらみつぶし的解放は計算ステップ数が多くなり、計算時間が膨大になる。そのため賢いアルゴリズムを見つけることが重要になる。隣り合う要素の大小を比較して整列していくアルゴリズムをバブルソートと呼び、要素の比較回数は常にn(n-1)/2回となる。選択ソートは、最大の要素を最後尾に持ってくるソートであり、比較回数はバブルソートと同じである。オーダー記法は、入力が大きいときの関数の上限を考えるときに用いる。,最大公約数の問題を、長方形に正方形を敷き詰める問題に変換して考えるというやり方に感動した。今の段階、賢いアルゴリズムは人間にしか考えることができないので、プログラムをするときなどには、常に柔軟な思考を持ち合わせていかなければならないと感じた。,
C-2021-2_U9,,,,オーダー記法が少し分かりにくかったので、定期的に復習しようと思いました。また、同じソート問題のアルゴリズムでも、予想していたより多種多様なアルゴリズムがあって驚きました。,特にありません。
C-2021-2_U91,最大公約数の計算,,"xとyの最大公約数を考える。まずしらみつぶし的解度について考える。kをmin(x,y)とおき、r₁をxmodx,r₂をymodxとする。r₁＝０かつr₂＝０であれば、ged(x,y)=kを出力する。
計算ステップ数とはアルゴリズムが終了するまでに行われる基本演算のことを指し、計算ステップが少ないほどアルゴリズムの実行時間は短くなる。最大公約数問題では剰余が基本演算である。最大公約数を「長方形をなるべく大きな正方形で埋める問題」に置き換えて考えると、「正整数xとyについて、y=zx+rかつ0<r<xであるとき、gcd(x,y)=gcd(r,x)」という定理を求められる。",,
C-2021-2_U92,それぞれのバブルソート、選択ソートとヒープソートでは時間計算量がことなることがわかった。,,ユークリッド互除法を通じてアルゴリズムを、バブルソート、選択ソート、ヒープソートなどのソート法と共に、オーダー記法による計算量推定を学んだ。,,"n0,ｃを求める手段にはどのようなものがあるのかを知りたい。"
C-2021-2_U93,ユークリッドの互除法の意味や、それを使った場合にはしらみつぶしに最大公約数を探した場合よりも計算ステップ数がはるかに少なくなると言うことが分かった。,オーダー記法の概念について完全には理解できなかった。,最大公約数を求める問題で、剰余を基本演算と考えた場合の計算ステップ数が、解法の違いによってどのように異なるのかを比較した。またその中で、高校数学で習ったユークリッドの互除法について復習した。また、ソートの概念とその手法についても学んだ。,,特にありません。
C-2021-2_U95,二つのソートの仕組みを理解した。,宿題になった計算時間のところはあまりわからなかった。,,計算時間についてちゃんと理解しきれなかった。,
C-2021-2_U96,,,,"メールでも連絡しましたが、通信の都合で見るのが遅れました。月曜日だけでなく火曜日も通信が不安定だったため、水曜の朝に見ました。後日ルーターの点検に業者が来ることになりました。

聞きなれない単語が多く理解するのにいつもより時間がかかったけど、しっかり考えたら理解することができたのでよかった。",
C-2021-2_U97,,オーダーについて,・ユークリッドの互除法について・バブルソートについて・ヒープソートについて,以前、別の講義でバブルソートについて取り扱う機会があったが、その時よりも格段に理解が深まったと思う。また、今回新しくヒープソートというものも扱ったため、こちらについても復習をして理解を深めていきたい。,
C-2021-2_U99,今回のアルゴリズムを用いることで、最大公約数問題（長方形をなるべく大きな正方形で埋める問題）や、数字の書かれたカードの並べ替えなどが効率よく行えるようになった。また、できたアルゴリズムの性能評価を数式を用いて行えるようになった。,ヒープソートの使い方がよくわからなかった。,ユークリッドの互除法を用いたアルゴリズムの仕組み、隣り合う二つを比較するバブルソートというアルゴリズムの仕組み、最大の要素と最後の要素を入れ替える選択ソートというアルゴリズムの仕組み、2進木を用いたヒープソートというアルゴリズムの仕組みが分かった。,たくさんのアルゴリズムが出てきたので、頭が混乱しそうになってしまった。,
C-2022-1_U10,,,,"今回は高校数学の活用や並べ替えなど、理解しやすく練習問題も解きやすかった。二進木やバブルソートなど、方法が一個一個スライドで実演されているのでとてもわかりやすかった。
実演ではどれも計算時間はあまり変わらないように思えるが、長い入力はどの方法を使うか計算してから、実際にソートしていくことが重要だと実感した。",
C-2022-1_U11,,,,ユーグリットの互除法は高校の時に数学の計算方法としては知っていたが、長方形に正方形を敷き詰めると考えることで情報科学の分野において計算ステップ数を減らすことのできるアルゴリズムとして用いられているということを知り、今まであまり実用性を感じていなかったがユーグリット互除法が実際に活用されているということが興味深かった。,
C-2022-1_U12,様々な計算の原理をしれました。,,用途に応じてさまざまな計算方法がある。,計算がむずかしかったです。,
C-2022-1_U13,2進木を使ったソートは入力数列によって計算時間が大きく変わってくること。それはもとから小さい順に並んでいたときは毎回、すでに木についている要素全てと比較していつ必要があるため。より、ヒープを使うと効率よく計算することが出来る。,,"バブルソートとは隣り合う要素そ大小を比較しながら並べるやり方。
選択ソートとは最大の要素を探して、その値と最後の要素を入れ替えるやり方。
時間計算量とは入力に対して各手順を実行するのにかかるそう時間のことで、最も時間がかかる入力に対する計算量を最悪計算量という。
時間計算量をT(n)とするとn0以上のときある関数f(n)のc倍よりいつも小さいという状況になる関数f(n)を考えることを、関数の上界を考えるといい、T(n)がf(n)のオーダーであるという。","初めのユーグリッドの互除法について前回まではちゃんと理解できていなかったけど今日の授業を通して、理解することが出来ました。
ソートは、多くの場面で使われているもので、今日のような例を見るととても単純な作業のように感じるけど、実際は膨大な量の要素があり、それを瞬時に整列させなければいけないので、できる限り効率の良い方法でやることが本当に大切だなと感じました。",
C-2022-1_U14,,オーダー記法のf(n)をどうやって決めているのかよくわかりません。,,ソートの方法にもたくさんの方法がある事がわかりました。ユーグリッドの互除法はすごい役に立っていたものだったと知りました。今回の内容は例もわかりやすかったし内容もスッと入ってきたのでよかったです。,
C-2022-1_U15,,,計算のアルゴリズムにおいて因数分解法やユークリッドの互除法があるが、前者は高速なアルゴリズムが確立されておらず計算ステップ数が高々２nなので大きな数だと計算速度が遅いが、後者は計算ステップ数が高々2log2(n)なので計算は瞬時に終わる。またソート問題ではバブルソートや選択ソートがあり、バブルソートでは隣り合う要素の代償を比較しながら整列していき、選択ソートでは最大の要素を探しそれと最後の要素を入れ替える。アルゴリズムの性能評価では、入力aに対して各手順を実行するのにかかる時間の総和である時間計算量をT(a)で表し、長い入力に対し挙動を見積りたい場合関数の上界を考える、それを最悪計算量という。関数T(n)に対して「T(n)がf(n)のオーダーである」とは、ある正定数c、n0が存在し、任意のn>n0に対してT(n)<=cf(n)が成り立つ、この時T(n)＝O (f (n))とかく。ソート問題の昇順においては２進木があり素朴でわかりやすい反面最悪の場合比較回数がn(n)/2となるが、２進木にある条件を二つ加えるとヒープという木になりこの時比較回数は改善される。,,
C-2022-1_U17,ソートとはn個のアイテムをある順序に従って並び替えることである。さまざまな並び替え方がある。２進木が理解できた。,,さまざまな種類のソートの紹介と方法の説明。長い入力に対する挙動を見積もる。,,
C-2022-1_U19,入力整数の個数が大きくなると、二進木によるソートよりもヒープソートの方が最悪比較回数が小さく、より早い処理が可能であることがわかった。,ヒープソートは二つの条件を考慮して振り分けを行うという点で、処理のスピードが若干落ちるのではないかと思った。,,出来上がった数式や結果だけを聞いても理解が追いつかないことが多かったので、実際に手を動かして、理解を深めたいと思った。,
C-2022-1_U20,バブルソートは並べ替える数字の列によっては操作の回数が莫大なものになるため場合によってやり方を変えることが大切になってくる。,,,今日の授業では並び替えの方法について学んだ。実際に自分で最大の時と最小の時の違いを知っていきたいし、公式についても覚えていきたい。,
C-2022-1_U21,ユークリッドの互除法の計算が、数式だけで表されると少し複雑で難しそうだなと思いましたが、説明を聞いて理解できたのでよかったです。２進木をつかう計算方は簡単そうだなと思いました。しかし欠点もあり、入力の要素の列によって計算時間が異なってくるということがわかりました。,,因数分解と違って、ユークリッドの互除法は非常に早く計算できる。ソートは計算機科学の中でも最も基本的な計算方法の一つであり、順番に沿って要素を並び替えることである。基本的なアイデアは、大小比較しながら並び替える、最大の要素を見つけてそれと最後の要素を並び替える、など。アルゴリズムの計算量は、オーダー記法で考えることとする。,,
C-2022-1_U22,バブルソートを理解できた。選択ソートを理解できた。,ヒープソートがよくわからん,nこのアイテムをある順序に従って並べ替えることをソートという。これから、ソートというときは基本昇順を言う。左から隣あう２つのアイテムを比べるのをバブルソートという。,ヒープソートヒープソートが理解できなかったので復習します,
C-2022-1_U23,「最大公約数を求める」のような目的が同じ動作でも、ユークリッド互除法を用いるなどのアルゴリズムの違いで計算にかかる時間が大きく変わることが分かった。,オーダー記法がよく分からなかった。,計算時間評価と、バブルソートや選択ソート、ヒープソートなどのアルゴリズムについて学んだ。,"小テストでニ進木の問題を間違えてしまったので要復習
",
C-2022-1_U24,,あまりないが、予習不足を今回は特に痛感したため、もう少し時間を取れるように善処したい。,,,
C-2022-1_U25,,,"ｎ個のアイテムが与えられたときに、それらを「ある順序」｛基本的に昇順（小さい値→大きい値）｝に従って並び替えることをソート（整列）という。
バブルソートは、隣り合う要素の大小を一番目から比較しながら整列していく。整列したい数列の長さをｎとし、要素の比較回数と交換回数で時間計算量を見積もる。要素の比較回数は、常にｎ(n-1)/2回…(n-1)＋(n-2)+…+1＝n(n-1)/2。要素の交換回数は高々n(n-1)/2回
選択ソートは、最大の要素を探し、それと最後の要素を入れ替える。残りの数列に対して、同じ動作を繰り返す。整列したい数列の長さをnとし、要素の比較回数、最大値の更新回数、要素の交換回数で時間計算量を見積もる。要素の比較回数は、常にｎ(n-1)/2回、最大値の交換回数は、高々ｎ(n+1)/2回、要素の交換回数は、高々n-1回。
オーダー記法、関数T(ｎ)に対して「T(ｎ)がf(ｎ)のオーダーである」とは、ある正定数ｃ、ｎ‘が存在し、任意のｎ＞ｎ‘に対してＴ(ｎ)≦ｃｆ(ｎ)が成り立つこと。このとき、Ｔ(ｎ)＝Ｏ(ｆ(ｎ))と書く。
２進木とは各節点が高々２つの子しか持たない根付き木のこと。
２進木を使ったソートは、１．まずａ₁を根に置く。２．ｉ＝２，３，…、ｎの順に行う。ａ₁を読み込んだら、根から次の動作を繰り返す。ａiを現在の節点の値と比べ、ａiの方が小さかったら左の子へ進み、そうでなければ右の子へ進む。進んだところに節点がなければそこに節点をつくり、ａiを格納する。完成した２進木を通りがけ順に読む。
通りがけ順とは、節点の値を（左の子、自分、右の子）の順に読む。読もうとした節点が子を持っていたら、まず左の子を通りがけ順に読み、次に自分の値を読み、そして右の子を通りがけ順に読む。
２進木は、入力数列の並び方で計算時間が変わる。完成した２進木の深さに依存する。入力数列のサイズをｎとすると、最悪の場合、比較回数はｎ（ｎ-1）/2となる。
節点数ｎ、高さｈの２進木が、次の二つの条件を満たすとき、その木をヒープという。深さｄの節点はちょうど２のｄ乗個存在し、深さｈの節点は左から順にｎ-２(ｈ-1)↑+1個存在する。どの節点の値も、自分の親に格納された値以下である。
入力数列のサイズがｎのとき、ヒープソートの比較回数は３ｎlog₂ｎを超えない。第一ステージで親と比較するごとに１回、第二ステージで左右の子と比較するごとに２回。ｎ個の節点からなるヒープの高さは、log₂ｎを超えない。
ヒープソートはｎlogｎ時間、２進木ソートはｎ²時間、バブルソートはｎ²時間、選択ソートはｎ²時間。
",わからないところが多くなってきたので講義動画を見直すようにしようと思った。,
C-2022-1_U26,入力列によって操作回数が変わるので高々の回数を考えているということ。,互除法の定義のあたりの話が分かったようでわからないので手を動かして勉強したいと思う。,"バブルソートは隣り合う要素を比較して整列する。泡は分かれて上に浮かんでいく様から言われる。
選択ソートは最大の要素を探しそれを1番後ろと交換してそれを全ての数で繰り返す。
入力によって処理する時間は変わるので時間を入力の長さの関数として考える。(:高々の計算)
計算上早くできる支配的な文字について考えるのがオーダー記法
2進木のソートは小さいものは左へ進むよういれる。子供がいなくなって1を入れる
ヒープはきれいな正三角形の2進木ソート早い",入力によって違う処理にかかる時間が違うのを知ってなるほどなと思ったし最速にするためのさまざまな処理法があることを知った。バブルソート法の計算が個々人的に面白かった。,
C-2022-1_U27,バブルソートや選択ソートのやり方、また、ヒープの定義がわかった。,,"２つの数の最大公約数を求める方法で、その２つの数を長方形の縦と横の長さx,y(x<y)としたとき、一辺の長さがxの正方形を長方形に埋めていき余った横の長さをrとし、その作業をr=0になるまで続けるというアルゴリズムをユークリッドの互除法という。
バブルソートとは、隣り合った要素を比較していって順番に並べていくもので、要素の交換回数は高々n(n-1)/2回である。対して選択ソートとは、要素の中で最大のものを探していきながら順番に並べていくもので、要素の交換回数は高々n-1回である。また、２進木を使って純粋にソートすることもできるが、その場合比較回数が多くなることがあるので、ヒープソートという２進木を利用した方法のほうが早く並べることができる。",,
C-2022-1_U28,,ユークリッドの互除法のときのmod計算,,今日のところは特に複雑でしっかり復習して理解を深めたい。,
C-2022-1_U29,　それぞれのソートの特徴を理解することができた。,　オーダー記法のf(n)の求め方が少し曖昧になってしまった。特にlog n を使っている場合に苦手意識を持った。,,,　時間計算量は各手順を実行するのにかかる時間の総和とありましたが、バブルソートや選択ソートの場合、比較回数と最大値の更新回数と交換回数の総和がこれに当たるという理解で大丈夫ですか。それぞれ異なる時間計算量を持ちますが、高次数の項だけで考えるので、最悪計算量がどちらもO(n²)だと考えています。
C-2022-1_U3,バブルソートと選択ソートの具体的な手法を知り、手法の違いからくる要素の交換回数などの違いを理解することができた。また、長い入力の挙動さえわかれば良いので、オーダー記法で簡単な式にして上限を見積もるとアルゴリズムの性能を比較しやすいということがわかった。さらに、２進木ソートとヒープソートの表記の仕方と読み方を知ることができた。,節点数n、高さhのヒープで、深さhの節点が左から順にn-2*h-1+1個存在するという意味がわからなかった。また、バブルソートと選択ソートの時間計算量を見積もるとき、式の項目が違うのにどうやって比べるのだろうと思った。,最大公約数を求めるとき、しらみつぶし的解法よりもユークリッドの互除法のアルゴリズムを使う方が圧倒的に早い。またソートアルゴリズムには、交換型のバブルソートや選択ソート、選択型の２進木ソートやヒープソートなどの種類がある。バブルソートでは隣り合う要素の大小比比較しながら整列し、選択ソートでは最大の要素を探して最後の要素を入れ替える動作を繰り返す。２進木ソートでは通りがけ順に節の値を読むが、入力数列が元々昇順や降順になっている場合、木が深くなり計算に時間がかかってしまう。ヒープソートでは木が正方形に近い形になるためこの欠点を解決できる。アルゴリズムの性能を評価するには、最も時間のかかる入力に対する計算量である最悪計算量を、オーダー記法で考える。オーダー記法はできるだけ計算量の上限に近い方が適している。,高校数学でユークリッドの互除法を習って頻繁に式を使っていたが、なぜそうなるのかはわかっていなかった。今日折り紙の視覚的な説明と論理的な証明を聞いて、初めて意味を理解できスッキリした。また、２進木ソートを通りがけ順に読んでいくと昇順に数字が現れてくる仕組みが面白いと思った。,節点数n、高さhのヒープで、深さhの節点が左から順にn-2*h-1+1個存在するとはどういう意味ですか。
C-2022-1_U30,"問題
ⅰ 7289と8029の最大公約数37
計算回数6回
ⅱ 1274と10505の最大公約数1
計算回数6回
練習問題１
1，52317 25317 23517 23157 21357 12357
2，数が大きい順に左から並ぶとき
練習問題２
1，52317 12357
2，最大更新回数は15回より大きい順に左から並ぶとき
練習問題３
1，5n^3+200n+10000=O
左辺についてnの最高次数で割って、5+200/n^2+10000/n^3
n→∞の時、左辺=5に近づき、5≠0より示された
2，(log2n)^+n=O
左辺をnで割って変形すると
左辺=(log2n)^/n+1
n→∞の時、左辺=1に近づき、1≠0より示された
練習問題１
入力:10,5,7,3,8,9,6,1,20
通りがけ順
1,3,5,7,10,6,8,9,20",,,,
C-2022-1_U32,,,バブルソート、選択ソート、二進木を使ったソートについてのアルゴリズムの説明,高校でのプログラミングの授業と似ていたので、バブルソート、選択ソートはよくわかった。,
C-2022-1_U33,,演習問題を完全に自力で解くことができませんでした。,,アルゴリズムをより深く掘って、バブルソートやヒープソートなどの新しい部分を知れて面白かったです。,
C-2022-1_U34,バブルソートや二進木、ヒープソートなどの概要を理解できた。バブルソート、選択ソートは比較的簡単だったがヒープソートは少々難しく感じた。,時間的計算量やオーダー記法、ユークリッド互除法の正当性の証明などは記号が多く出てきて、不慣れなこともありかなり困惑した。またグラフは時間的評価的に大きな差が出ることはわかりやすいのだが、自分で計算していないことや数が膨大すぎるだけに実感がわきずらいと感じている。,,,
C-2022-1_U35,,ヒープソートのやり方と比較回数の求め方が理解できなかった。,ソートとは基本的なアルゴリズムの一つであり、ランダムに並んでいる数列をある順番に並べ替える操作のことである。,ソートにはいろんな種類があって時に応じて使い分けられるようになりたいと思いました。,
C-2022-1_U37,,オーダー記法がよく分からなかった。,,計算については、話を聞くだけでは理解できないので、後で手を動かすことを大切にしようと思います。,
C-2022-1_U38,"ユークリッドの互除法
バブルソート、選択ソート、ヒープソートのやり方",,,理解できなかった箇所をしっかりと復習したい。,
C-2022-1_U4,ユークリッドの互除法の、正方形を用いた考え方を理解することができた。また、バブルソートや選択ソートの考え方がわかった。,,因数分解よりも、ユークリッドの互除法のほうが非常に高速に２数の最大公約数を求めることができる。n個のアイテムを（昇順に）並べ替えることをソートといい、隣り合う要素の大小を比較しながら整列することをバブルソートという。選択ソートの基本的な考え方は最大の要素と最後の要素を入れ替えることである。入力に対して各手順を実行するのにかかる時間の総和を時間計算量という。,,
C-2022-1_U42,,,"・ソートについて
・バブルソートについて
・選択ソートについて
・アルゴリズムの計算量について
・ヒープについて",現実世界では数をある順序に従って並べるのはとても簡単なことなのに、情報の世界だとバブルソートやヒープソート、選択ソートなどやり方も様々で現実世界よりも時間がかかりそうだなと思った。今までは現実世界で行うより情報の世界で行う方が効率も良く、時間も短縮できた。しかし、今回のソートに関しては現実世界でする方がいいのではないのかと考えた。,（３）のことを教えてください。
C-2022-1_U43,,オーダー記法の公式の意味がよくわからなかった。,,,
C-2022-1_U44,,,バブルソートやヒープソートについて学んだ。,難しい単語が増えてきたので、授業についていくために抑えておきたい。,
C-2022-1_U45,,,,ただ数字を小さい順に並べるだけでも方法によっては試行回数に大きな差が出てくるため、計算機科学においてはとても重要なことだと知り、とても興味深く感じた。,とくにありません
C-2022-1_U46,ユークリッドの互除法についてわかりました。,ヒープソートがよくわからなかったので復習します。,"・n=min(x,y)とすると、ユークリッドの互除法の計算ステップは高々2log2(n)である。

・ソート（整列）...n個のアイテムが与えられた時に、それらを「ある順序」に従って並べかえること
・バブルソート...隣り合う要素の大小を比較しながら整列していく
　→要素の比較回数：常にn(n-1)/2回
　→要素の交換回数：高々n(n-1)/2回
・選択ソート...最大の要素を探し、それと最後の要素を入れ替える
　→要素の比較回数：常にn(n-1)/2回
　→最大値の更新回数：高々n(n+1)/2回
　→要素の交換回数：高々n-1回
・バブルソート、選択ソートの時間計算量はO(n^2)←オーダー表記",今日は小テストで間違ってしまったので、次回は満点を取れるように頑張ります。,今のところありません。
C-2022-1_U47,問１，問２はできた,,ユークリッドの互除法について,難しい内容だったので、しっかり復習しておきたいです,
C-2022-1_U48,ソートの中にはバブルソートやヒープソートなどの種類があることが分かった。,,,,
C-2022-1_U49,それぞれのソートのやり方とオーダー記法を理解することができた。,ユークリッドの互除法の正当性のところがよくわからなかった。,ソート(整列)には交換型、選択型、分割統治型などがあり今回はバブルソート、選択ソート、ヒープソートを扱った。私たちは一目でわかるようなこともコンピューターに説明するには明確な手順を設ける必要がある。それぞれのソートによって計算量は異なり、交換回数は最大値を求めることができる。計算量はオーダー記法で考えることができ計算量は入力の長さnの関数として入力が大きい時の関数の上限として考える。,練習問題を自分の手でやることが大切だと思った。,
C-2022-1_U5,バブルソートと選択ソートが予習段階で一見難しそうだったが、授業で教わると分かりやすくて意外と難しくなかった様に思った。,オーダー記法がアルゴリズムの時間計算量ということで理解が詰まった。,ユークリッド互除法によるアルゴリズム。ソートの種類と過程。オーダー記法というアルゴリズムの計算量の考え方。,,
C-2022-1_U50,,ヒープソートについて,,"バブルソートは元々知っていたので理解したが、ヒープソートはあまり理解できなかったため復習をして理解したい。また、そろそろテストも近くなったため全体の復習も忘れないようにしたい。
",
C-2022-1_U51,バブルソートは隣同士の比較によって行われる,2進木のところが難しかった,ソートの仕方としてバブルソート、ヒープソートがある,遅れてしまって申し訳ないです,
C-2022-1_U52,,,,むずかしくなってきたのでがんばりたい,
C-2022-1_U53,,,"因数分解では莫大な時間がかかるのに比べ、ユークリッドの互除法を使えば最大公約数を瞬時に求める事ができる。
このようなアルゴリズムの工夫はソートを表す際にも用いられる。
ヒープは二進木の弱点を補っている。",数学と情報科学の密接な結びつきを感じる事ができた。,
C-2022-1_U54,ソーティングには沢山の方法がある。地道に調べるには時間がかかるため、早い手段を考えるべきであると言うことがわかった。,ヒープの概念が最初分からなかったが、人に聞いてわかるようになった。,2数の最大公約数の求め方として、しらみつぶしに計算する方法では莫大な時間がかかる。また、大きな数を因数分解するのは難しい。そこで、ユークリッドの互助法を使う。ユークリッドの互助法を長方形と正方形を使って可視化すると、わかりやすくなる。次に、ソート問題を解く。ソーティングとは、数字を大きさ順に並べることである。バブルソートは、隣同士の数字を並べ替えるソーティングである。大きい数字が段々上にいく様子から、泡に例えられた。選択ソートは、最大の数を探し、端と交換するソーティングである。次に、2進木を使う。前の数字より少なかったら左に、大きかったら右に配置する。これによって、最も小さい数は最も左に、最大の数は最も右にくる。これの欠点として、数の最初の並び順によって計算時間が変わることがあげられる。そこで、ヒープが使える。ヒープとは、2進木の枝分かれ全部に子供をつくる方法である。三角形の形になる。これをすると、最も早く最小値がでてくる。,,
C-2022-1_U56,,小テストで出題された前回の２進木を使ったコインの判別と、オーダー記法の示し方がよくわからなかった。,ソートとは複数のアイテムをある順序に従って並び替えることであり、計算機科学における最も基本的な問題の一つである。ソートにはバブルソートと選択ソートの種類があり、それぞれのルールに従って整列される。時間計算量とは入力文字に対して書く手順を実行するのにかかる時間の総和であり、個別に計算量を考えるのは大変であるため、最も時間のかかる入力である最悪計算量が考えられる。２つの条件を満たす２進木をヒープという。,"普段直感的に行なっている並び替えの作業を規則に従ってソートする作業が楽しかった。
",オーダー記法の数の当てはめ方を教えてください。
C-2022-1_U58,,ソートの計算方法が把握できていない。,,予習が最後までできていなかったため、理解に時間がかかった。,
C-2022-1_U59,2進木ソートとヒープソートの違いを理解できた　自分の手で計算できた,,"ソートとは？　→n個のアイテムが与えられた時に、それらをある順序に従って並び替えること。ソートは計算機科学にあける最も基本的な門題の一つである。例えば、昇順の場合（小さい値→大きい値）、降順の場合（大きい値→小さい値）というふうにソートが行われる。代表的なソートアルゴリズムとして、●交換型（バブルソート、選択ソート）　●分割統治型(マージソート、クイックソート)　●選択型(2進木ソート、ヒープソート)　●その他(バケツソート、基数ソート)がある。　　　バブルソートの基本的なアイディアは「隣り合う要素の大小を比較しながら整列していく」、というものである。これを最後まで繰り返す「ことにより、一番大きい要素を最後尾に移動させることが可能となる。そして、この操作を全てのアイテムに対し行うことで、ソートが完了する。　　選択ソートの基本的なアイディアは「最大の要素を探し、それと最後の要素を入れ替える」というものである。最大の要素が順番に並べられていくことで、最終的には全体のソートが可能となる。　　時間計算量とは、ある入力に対して、各手順を実行するのにかかる時間の総和である。一般に入力が大きいとそれだけ時間がかかる。大きい入力に対する挙動を見積もることを可能にするため、入力が大きいときの関数の上限を考える。

",,
C-2022-1_U6,,,,段々と計算や証明が複雑になっているのでしっかり復習していこうと思います。,
C-2022-1_U61,バブルソートまでは理解が追いついた,ヒープソートから若干ついていけなかった,ひたすら、計算、整列を学んだ。,ここ最近小テストの出来が悪いので、復習をこなして臨むようにする,
C-2022-1_U62,,計算量が最適か最悪かの確かめ方,,,
C-2022-1_U63,,,あるものを順番に並べることをソートという。,,
C-2022-1_U64,,,"ソート問題について
数字を昇順もしくは降順に並び替える","寝坊してしまった。日曜日はもっと早く寝るようにしたい。
出てくる式が単純ではないので、予習復習を怠らずにやっていいきたい",
C-2022-1_U65,,,,一番基本的なソート問題について学んだが、一番最後に学んだヒープソートについてまだ理解が追いついていない部分があるので、2進木を使ったソートのあたりから復習し直そうと思った。計算問題についても、話だけを聞いて理解したつもりにならず、実際に手を動かしてテストに向けても準備をしていきたい。,
C-2022-1_U66,,,"ソート問題とはｎ個のアイテムが与えられたときに、それらをある順序によって並び替えることで、計算機科学におけるもっとも基本的な問題の一つである。
代表的なソートアルゴリズムとして、交換型、選択型、分割統治型などがあり、交換型にはバブルソート選択ソート、選択型には2進木ソート、ヒープソート、分割統治型にはマージソート、クイックソートがありそのほかにもバケツソートや基数ソートといったものもある。
バブルソートとは隣り合う要素の代償を比較しながら整列するソートで、整列したい数列の長さをｎとし、要素の比較回数と交換回数で時間計算量を見積もる。
選択ソートとは最大の要素を探し、それと最後の要素を入れ替えるソートで、整列したい数列の長さをｎとし、要素の比較回数、最大値の更新回数、要素の交換回数で時間計算量を見積もる。ここで、時間計算量とは入力に対して各手順を実行するのにかかる時間の総和のことで、入力に依存する関数である。入力が大きいとそれだけ時間がかかる。
アルゴリズムの計算量はオーダー記法で求めることができる。
2進木ソートは、以下の手順で整列するソートである。
１まずa1を根に置く
２i=2,3,…,nの順に次を行う
Ⅰaiを読み込んだら、根から次のⅡを繰り返す
Ⅱaiを現在の節点の値と比べ、aiのほうが小さかったら左の子へ進み、そうでなければ右の子へ進む。進んだところに節点がなければⅢに進
Ⅲそこに節点を作り、aiを格納する
３完成した2進木を通りがけ順に読む
欠点として、入力数列の並び方で計算量がかわる（完成した2進木の深さに依存する）ことや、入力数列のサイズをｎとすると、最悪の場合、比較回数はｎ（ｎー１）/２になることがあげられる。
",,
C-2022-1_U67,いろんな文字の整列の仕方がわかった。,文字がいろいろ出てきて混乱して、すぐに理解することができなかった。,バブルソート、ヒープソートについて。,"新しいことを知れました。
","特にありません。
"
C-2022-1_U68,,,,復習だけして、日誌まで終わらせたと勘違いしていたので、授業後すぐに日誌をつける癖をつけなければいけないと感じた。,
C-2022-1_U69,,,,小テストの偽物のコインの問題に少し苦戦したので復習を強化して授業においていかれないように気をつけようと思う。,因数分解の難しさを暗号へ利用していたけれど、ユークリッドの互除法を利用することで暗号が解けてしまったりはしないのですか。
C-2022-1_U7,アルゴリズムの計算ステップ数を少しでも少なくするための方法がいろいろあるんだなと思いました。,ヒープソートをし終わった後の最後の整列の仕方がよくわからなかった。,ユークリッドの互除法を用いたり、ソートを行うアルゴリズム。。アルゴリズムが終了するまでの基本演算の回数を計算ステップ数という。バブルソートは隣り合う要素の大小を比較し、選択ソートは最大の要素を探し、それを最大の要素と入れ替える。,要素を整列するにもさまざまな方法があって、状況によってどの方法を用いると一番良いのかを分かれたらいいなと思いました。,特にありません。
C-2022-1_U70,,,,,"・オーダー記法の式がいまいち分からなかったので、資料B0ー７の練習問題３が解けませんでした。解説を手厚めにしていただけると嬉しいです。
"
C-2022-1_U71,,ヒープソートの読み方,,,
C-2022-1_U73,"バブルソートと選択ソートの要素の比較回数はn個の中から二つ選んで比べるからn C2＝n (n−１)/２回。
バブルソートの交換回数は、二つを比べた時に交換しなくてもいい場合があるので高々n (n−１)/２回。","入力が大きい時の関数の上限を考えると言うのは一番時間がかかった時のことを考えると言うこと？
アルゴリズムの計算量をオーダー記法で考えると言うのがよくわからない。
バブルソートと選択ソートは理解できたがそれがどこに活用されるかわからない。
選択ソートの最大値の更新回数が高々n (n＋１)/２回であるのが、一番更新しなければいけない並びの例がわからないのでよくわからない。","与えられたn個のアイテムをある順序に並べ変えることをソートと言う。昇順は小さい順で降順は大きい順。バブルソートとは、隣り合う要素の大小を比較しながら整列していくもの。要素の比較回数は常にn (n−１)/２回だが交換回数は高々n (n−１)/２回。選択ソートとは最大の要素と最後の要素を入れ替えるもの。比較回数はバブルソートと同じく常にn (n−１)/２回。時間計算量とは入力する際に各手順を実行するのにかかる時間の総和のことで、実行する手順は入力によって変わる。最悪計算量とは、最も時間のかかる入力に対する計算量のこと。
",,
C-2022-1_U75,言葉の意味について大体のことは分かりました。,詳しい内容については理解しきれなかったです。,バブルソートとは隣り合う大小を比較しながら計算していく手法である。マージーソートとはヒープソートと同様であるが、2進木を使用しないシンプルなアルゴリズムである。,今回も新しい言葉がたくさん出てきてややこしく、理解するのが難しかったです。,
C-2022-1_U76,複数の並べ替えの仕組みを理解できた。,"正確なオーダー記法の計算方法がわからなかった。
ヒープの深さや節点の数の数式がわからなかった。",,わからなかったことが多いので、インターネットでも調べようと思う。,
C-2022-1_U77,,,,用語が多くてきちんと理解できていないように感じた。今後の授業でも出てきそうなので、説明された時になんだったけとならないようにきちんと復習しようと思った。,オーダー記法の正の定数cとn0はどういった数なのでしょうか。
C-2022-1_U78,オーダー記法の意味を知ることができた。,入力数列のサイズがnのとき、ヒープソートの比較回数は3nlog₂nを超えないこと。,"ユークリッドの互除法を使うことによって、最大公約数問題を解くスピードが格段に速くなる。基本的な並び替えの演算にはバブルソートとヒープソートがある。オーダー：n>n₀に対してO(f(n))≦cf(n)　ｃ,n₀は任意の正定数。",,
C-2022-1_U79,要素を並べてソートする方法にはバブルソート選択ソートヒープソートなどがある。,,,,
C-2022-1_U80,最大の変換の通りを求めるときに高校で習った数列が使われること,,,小テストの点数が悪くて悲しかった。,
C-2022-1_U81,2つのソートの方法や有用性について,,バブルソート、選択ソート,今回は授業で理解できた。,
C-2022-1_U82,高校では詳しくは扱わなかったが、今日の講義でユークリッドの互除法の使い方を理解することができた。ソートのうち、バブルソートと選択ソートで数列を並べる際のルールが分かり、自分で演習問題を解くときに応用させることができた。計算時間量を見積もるときには、入力された数列によって計算時間が異なるが、それを無視するために最悪計算量を利用することがわかった。,ユークリッドの互除法のときに出てきた証明で、少し引っかかるところがあったので、補足資料を見て理解を深めようと思う。互除法、ソートの演習は自分で手を動かして取り組むことで、しっかりやり方を身につけ、慣れていきたい。,,用語の意味を単純に知るだけでなく、自分でソートしてみたり、どうしてこの関数が使われているのかを本質的に理解したりする必要があることが多いと感じている。講義の時間だけではやはり理解しきれない部分があるので、自学で予習・復習をしっかり行い、資料も有効活用していこうと思う。B単元では主にアルゴリズムについて学んでおり、特に今回からはソートについて学び始めた。並べ替えは、例えば日頃私たちが何かを検索するときなど、身近なところに用いられているので、その仕組みについて学ぶことは大変有意義だと思う。,
C-2022-1_U85,最大公約数問題を「長方形をなるべく大きな正方形で埋める問題」に置き換えて考えると早く解ける。euclid_gcdは計算が瞬時におわる。最悪の状態を考える。,ユークリッド互除法の証明,ユークリッド互除法の正当性、ソート問題（バブルソート、選択ソート、2進木によるソート）について,,
C-2022-1_U86,2進木の時左に行くと数が小さくなり右に行くと大きくなる,,ソートの詳細,,
C-2022-1_U87,長方形から定規を用いずに正方形を作ることが互除法によってなされることを学んだ,互除法がやりたいことは学んだが、互助法の正当性はあまり理解することができなかった。,今日の授業ではユークリットの互徐法を用いて最大公約数を出すことの方法を学びそれによってアルゴリズムの処理の高速化ができるということを学んだ。,今日は割と高校の数学でも一度やったことがある内容であったので理解はしやすかったように思えた。,
C-2022-1_U88,ソート、時間計算量、オーダー記法、２進木などの用語を理解した。バブルソート、選択ソート、２進木を使ったソート、オーダー記法の計算などの仕方を理解した。,,ソート計算機科学におけるもっとも基本的な問題の一つであり、二つ以上のアイテムを「ある順序」に従って並べ替えることである。代表的なものの分類として、交換型、分割統治型、選択型などがある。,,
C-2022-1_U89,ユークリッドの互除法について深く知ることができた。ユークリッドの互除法の計算の復習ができ、これがコンピュータ・サイエンスでの計算の手段に使われているということが分かった。また、ソート問題が日頃の検索などで使われているというのも初めて知り、検索の仕組みなどを考えてとても納得がいったので良かった。,ソートについて、種類が豊富すぎて、どれが良いのかとかどれがどの用途に使われているのかがまだあまり分からなかったので、もっと知りたいと思った。また、2進木などの計算もあまりまだ理解できてないので、計算は大事だと思われるので復習しようと思う。,今回は前回のユークリッドの互除法の復習やアルゴリズムの復習、そしてソート問題について勉強した。アルゴリズムはユークリッドの互除法によって計算できる。因数分解も用いることができるが、ユークリッドの互除法の方が大幅に時間を短縮できる。ソート問題は整列問題のことであり、ここでは特に数列の要素を昇順に整理することをいう。バブルソートは隣同士の要素を交換したりしながら整列させることである。選択ソートは最大の要素と最後の要素を交換しながら整列させることである。これら二つは選択型と呼ばれている。アルゴリズムの性能評価に対して、入力aに対して各手順を実行するのにかかる時間の総和を時間計算量という。これは入力の手順によって変わる関数である。その中で最も時間のかかる入力に対する計算量を最悪計算量という。これは時間計算量の最大値である。ここでオーダー記法が登場する。アルゴリズムの評価はオーダー記法で行うこととする。,今日の授業を受けて、やはり計算が最重要であることがいっそうはっきりとしました。毎回の感想にも書いている通りですが、高校数学の計算は意外と実際に社会の中で使われていて、ただただ驚くばかりです。それなりにしっかり勉強していて良かったと思いました。しかし、コンピュータ・サイエンスで数学がどのように使われているのか、また、コンピュータの仕組みについてはまだまだよくわかってないところが多いので、これらについてもっと知りたいと思いました。,
C-2022-1_U9,バブルソートについて,ヒープソートの比較回数の上限の出し方がわからない。特にlogが出てくる理由,"ユークリッドの互除法を用いると、計算にかかる時間が大幅に減る。
数の大きさを順番に比較していくバブルソート
",オーダーや、ヒープソートについてちゃんと復習しておきたい,
C-2022-1_U90,ソートについて,,ソートとはある順序に従って並び替えること。バブルソートとは隣り合う要素の大小を比較しながら整列。選択ソートとは最大の要素を探しそれと最後の要素を入れ替えること。,,
C-2022-1_U91,入力が大きいとそれだけ時間がかかる,２進木の使い道,ソートとはある条件に基づいて数字を並べ替えること,計算の難易度が上がった気がした,ヒープについて
C-2022-1_U92,選択ソートがなにかわかった,,バブルソートについて理解できた,小テストの出来があまり良くなかったので次回は頑張ります,
C-2022-1_U93,gcdを求めるときのユークリッドのやり方がわかった,ソートの回数の計算が難しい,アルゴリズムを作る際は、いかに素早く処理できるかが大事。,,
C-2022-1_U94,長い入力に対する挙動をみつもるほうが大切。,,隣り合う数字の大小を考えるのがバブルソートである。最大の要素を探して最後の要素と入れ替えるのを選択ソートという。,,
C-2022-1_U96,"練習問題　ⅰ 解３７。計算回数６。
　　　　　ⅱ 解１。計算回数６。
練習問題１　⒈５回
　　　　　　⒉降順で並んでいるとき
練習問題２　⒈３回
　　　　　　⒉降順で並んでいるとき

",計算量の計算。ヒープソート。２進木がやはり苦手であった。ヒープの方が２進木より早いのだろうか。,最大公約数のアルゴリズムを習った。（長方形を正方形の集合にするのはとても懐かしかった。modも懐かしかった。）しらみつぶしではできない速度で計算できるのがユーグリッドの互除法であった。並び替えのバブルソートについても習った。バブルソートは計算機学における最も基本的アルゴリズムであった。それより早く並び替えれるものが洗濯ソートであった。大きものをずらすという点で共通するとこが多かった。計算量の計算も求めた。,懐かしいことばかりだった。ヒープソートに往いてより理解を深めないとならない。,
D-2020_U10,単位インパルス数列、単位ステップ数列のZ変換。,,,,
D-2020_U11,,Z変換,,,
D-2020_U12,,,離散時間信号は数列で表現でき、z変換できる。,,
D-2020_U13,Z変換の計算方法が分かった,,,Z変換をものにできるよう頑張りたい,
D-2020_U14,Z変換のやり方が分かった,,,,
D-2020_U15,Z変換の性質と逆Z変換のやり方。,,Z変換の性質と逆Z変換のやり方。,,
D-2020_U16,z変換のやり方,,z変換の性質,,
D-2020_U18,フーリエ変換を簡単に表現するためにz=e^sTという置換を用いるという発想を理解できた。,,"一般の信号は単位インパルス関数を用いて表現することができる。
因果性を満たす離散時間信号のフーリエ変換をz=e^sTを用いて表したものをZ変換という。
Z変換には、存在するためのZ値の集合（収束条件）が存在する。",,
D-2020_U19,Z変換の基本的な取り扱い方がわかった,まだ慣れていないので資料を見ながらでないと自力で問題が解けない,,数学的な話で面白かったが、まだZ変換に慣れていないので難しく感じた,
D-2020_U2,,,Z変換は離散時間システムを解析することに使用される。また、Z変換は複素数zのべき級数和なので、zの値によっては収束せず、収束領域を考える必要がある。,,
D-2020_U21,,,Z変換の性質,,
D-2020_U22,Z変換、逆Z変換の手法,,Z変換の性質、逆Z変換,Z変換についてもう少し深く理解したい,
D-2020_U25,Z変換の公式、およびその性質,,,,
D-2020_U27,,,,先週分の課題について、デルタ関数の性質をうまく利用できていない箇所があり、それを一度復習しなければならないと感じた。,
D-2020_U28,ｚ変換についてわかりました。,特にありません。,ｚ変換,ラプラス変換について復習したいです。,特にありません。
D-2020_U29,色々な離散時間信号のZ変換の仕方。Z変換時の収束領域の求め方。,,離散時間信号の表し方と、そのZ変換,級数を、収束する範囲を決めることで分数のような形にするのは良いと思った。これで離散時間信号の解析が出来るんだなと思った。,
D-2020_U3,,,,"手書きノートが黒一色なので重要なところにはほかの色を使おうと思う。
なので授業中にマーカーなどをきちんとつけておきたい。
",
D-2020_U31,,,"離散時間信号を数列で表すことができ、その数列は単位パルス列で表すことができる。
ｚ変換はｚの値によって収束しないことがあるので収束するためのｚの範囲を示さなければならない。","ラプラス変換やz変換は習っていたが、なぜこれらの変換導入するのかわからなかった。
しかし、今日理解することができた。",
D-2020_U32,z変換の定義、収束半径の求め方が分かった。,,,,
D-2020_U34,,,Z変換の定義と意味,Bookrollが使いにくい。毎回fullScreen→escKeyを押すのがめんどくさすぎる。,
D-2020_U35,Ｚ変換の公式,単位ステップ数列,Z変換により、収束できるようになる関数がある,公式を証明して理解を深めたい,
D-2020_U36,Z変換の方法や、Z変換に関して成り立つ性質。,,,,
D-2020_U37,"Z変換とは何か
ラプラス変換との関係
収束領域について",,,前回の続きですが、Cookieを削除したら解決しました。,
D-2020_U38,,,,ただ式のみを理解して使えるだけでなく、なぜ使えるのか・これを利用することでどのような利点があるのかなど、その背景までも知ることに努めていこうと思う。,
D-2020_U39,,,,z変換は一度習ったがあまり身についてないと感じていたのでしっかりと復習しておきたい。,
D-2020_U40,Z変換を導出方法とその特徴,,離散時間信号とZ変換の特徴について,,
D-2020_U41,z変換は離散時間解析にもちいられる,,,"だんだんと何がしたいのか分からなくなってきた
",
D-2020_U42,,実際に収束領域が計算できるかが不安である,,,
D-2020_U43,逆Z変換のやりかた,特にありません,,,
D-2020_U47,Z変換の定義と収束半径についてしっかりと理解できた,"単位インパルス数列と単位ステップ数列の関係の、u(n)=Σ(k=-∞,n) δ(k) が計算してみるとよくわからなかった。",,,
D-2020_U48,Z変換のメリット(フーリエ変換で収束しない信号を収束させられる)を知ることができた。,Z変換の収束領域がなぜ全部ある円の外側になるのかがいまいち分からなかった。,,,
D-2020_U49,Z変換の計算自体は理解できた。,,"離散時間信号は数列として表現でき、離散時間システムを解析する手段としてZ変換がある。
Z変換はzの値によっては収束しないことがあるので収束領域を示さなければいけない。",,
D-2020_U5,,,Z変換の性質と逆Z変換について学んだ,,
D-2020_U50,大まかな計算などはフーリエ変換と似ているので計算自体は問題なさそう。,,,,
D-2020_U52,"Z変換は離散時間信号を解析するための変換方法の一つであるということ。
また収束領域、零点、極などの定義もある。",,離散時間信号とZ変換について学んだ。またZ変換の定義と計算方法についても学んだ。,"フーリエ変換やラプラス変換、Z変換など様々な変換が登場してきて覚えるのが大変だと感じた。
なので、丸暗記するのではなく定義から導出までをしっかり理解していきたいと思った。",
D-2020_U54,z変換のやりかた,,因果性の数列と非因果性の数列のz変換,,
D-2020_U55,"フーリエ変換できない離散信号に対してz変換を行う
z変換は収束領域もセットで求める",,,,
D-2020_U57,,,,z変換の概念がつかみづらかった,z変換の利点は何でしょうか
D-2020_U59,Z変換の方法,,,,
D-2020_U62,離散時間信号は数列として表現できること。Z変換は離散時間システムを解析するために用いられること。,,Z変換について,,
D-2020_U64,,,知識マップを用いて、今までの内容をまとめた。,,
D-2020_U66,Z変換の考え方,,Z変換の勉強,Z変換は別の授業でも習ったので簡単だった。,
D-2020_U7,"離散時間信号におけるz変換，逆z変換は，連続時間信号におけるラプラス変換，逆ラプラス変換に対応する。
これを用いることで数学的に煩雑な計算を避けることができ，解析の点で非常に有用である。
しかし現実にはz変換のためには複素積分を実行する必要があり，これは容易ではない。しかし，部分分数分解などを利用できれば容易に解析することができる。",,,,
D-2020_U9,,,離散時間信号を数列として扱うことや離散信号をZ変換によって複素数に変換し、zの値によっては収束させる事ができる。,,
D-2021_U1,離散時間信号の単位インパルス数列、単位ステップ数列を用いた表現,Z変換,"離散時間信号の単位インパルス数列、単位ステップ数列を用いた表現
Z変換",,
D-2021_U100,Z変換の計算方法について理解できた。,収束領域の求め方が理解できなかった。,離散時間信号のラプラス変換をZ変換という。普通、信号の時間ｔは0より大きいので同様にラプラス変換も0以上の範囲で計算するこのような考え方を因果性という。Ｚ変換の変数zは複素数を指す。z変換が収束するかどうかは変換前の数列が絶対加算可能かどうかにより判別できこれはシステムの安定性にかかわる。しかし変数ｚをうまく設定することができればz変換は収束することができる。この時の設定する範囲を収束領域という。,収束について途中からわからなくなって話をあまり聞いていなかったので次回の授業では最後までしっかりと授業を聞きたいと思う。,
D-2021_U101,,,z変換についての定義を理解する．,,
D-2021_U102,,,z変換とz変換の収束領域、代表的なz変換対,z変換対がいくつか出たので証明できるようにしておきたい,
D-2021_U103,授業内で出てきた単語、式について十分に理解できた。,ｚ変換の収束条件を具体的に計算しないと完全には理解できなそうと感じた。,z変換とその周辺知識について学んだ。,再来週あたりで繋がってくるという話を何回か聞いているのでそれが楽しみである。,
D-2021_U104,,,,"課題を終わらせるのが遅くなったのと、振り返り日誌が遅れてしまったので、以降は気を付けたい。
",
D-2021_U13,Z変換のやり方,,連続時間信号をサンプル値信号に変換した後、Z変換を行うことで離散時間システムを解析することができる。,,
D-2021_U15,ｚ変換の導出と性質の基礎を理解することができた,,z変換の理解,積分とシグマ計算の順序処理に気を付けたい,
D-2021_U17,,,Z変換の導入,,
D-2021_U19,逆変換できるようになった,,,,
D-2021_U20,離散時間信号のZ変換とその収束領域の求め方,,,導出の過程などを丁寧に確認することができました。,特にありません。
D-2021_U21,,,,z変換について理解することができた。,
D-2021_U22,,収束領域がどういうものなのかがわからなかった。,,,
D-2021_U23,,,,ラプラス変換からZ変換がちょっと覚えずらかった。,
D-2021_U27,,収束領域がわからない,,,
D-2021_U28,,,離散時間信号、Z変換,,
D-2021_U29,Z変換により収束させる,,,,Z変換によってなぜ収束させられるのか
D-2021_U3,,,z変換,,
D-2021_U30,,,,表に乗ってない関数のように見えても分解や工夫すれば表の形に合わせることが出来た,
D-2021_U31,z変換と収束について概要を理解した,収束条件についての細かな理解,,,
D-2021_U32,,,,Z変換についてとても理解を深めることができました。,
D-2021_U41,,,,フーリエ変換、Z変換を頭の中でしっかり区別して使えないと、曖昧だとテストで大変なことになると思いました。,
D-2021_U43,,複雑な計算がむずかしかった,Z変換の性質、逆ｚ変換,,
D-2021_U46,"逆Z変換はX(z)から元の離散時間信号の数列x(n)を求める。
逆Z変換の計算については複素数zの関数に関する演算である。",,,,
D-2021_U48,,,"数列での表し方
Z変換について",,
D-2021_U49,代表的なz変換を用いて、あたえられたx(n)をz変換を求めた。,,,,
D-2021_U54,片側Z変換と両側Z変換の違いが分かった。,,,,
D-2021_U56,,,離散時間信号とZ変換について,,
D-2021_U57,,,,Z変換対を復習する,
D-2021_U61,,,z変換を行うことで、離散時間信号数列に対して適当にzの値を定めることで値を収束させることができるということ。また、単位ステップ数列や単位インパルス数列という一定時間あたりに値をとる関数の理解もできた。,改めて三角関数より、指数関数に対する積分のほうが簡単だなと感じた。次回どのようなことを茂名部か楽しみである。,
D-2021_U62,Z変換のやり方と収束領域の求め方を実際に手を動かして理解することができたと思う。,,Z変換の数学的表現、実指数数列や正弦波数列、Z変換の収束領域、零点、極、次数を学んだ,,
D-2021_U63,z変換のやり方が分かった。,,z変換について学んだ。,z変換の収束領域が難しかったので復習したい。,
D-2021_U64,z変換,,Z変換,これから、学習してきた内容がつながってきそうだと思う,
D-2021_U67,,,z変換について学んだ。,,
D-2021_U69,単位インパルス数列によって一般的な数列を表せることやZ変換の計算の方法や収束領域の求め方が分かりました。,片側Z変換と両側Z変換の意味について、理解が難しかったです。,離散時間信号を数列として表す。単位インパルス数列、単位ステップ数列、Z変換の定義や収束領域。,今回は新しい数学的知識が多く出てきたので、理解するのに時間がかかりました。演習問題を通して、しっかりと身に着けたいと思います。,X(z)=N(z)/D(z)において、D(z)=0になると、分母が0になるので、極ではX(z)は存在しないのでしょうか。
D-2021_U70,Z変換の方法と収束領域など。,,,数列の辺りが理解しやすかったです。,
D-2021_U72,,収束領域というのは結局なんなのかが分からなかった。,連続時間信号x(t)をサンプル値信号x_s(t)の系列{x(nT)}として取り出したものを解析するためにZ変換を行った。,,
D-2021_U73,"単位インパルス数列・単位ステップ数列・実指数数列・正弦波数列の式がわかった
z変換の式を知ることができた","z変換の性質がよく理解できなかった
極についての説明で、X(z)の分母が0になっても構わないのかが疑問だった
なぜ収束領域に注目しているのかが分からなかった",z変換の導入,,
D-2021_U74,Z変換の方法を例題を通して理解できた。,,"離散時間信号は数列で表現することができる。
Z変換は無限冪級数の和で表現されているため、収束しないことがある。
そのため、収束するようなZを示す必要がある。-> 収束領域",Z変換が表す意味がわからなかったので、今後の講義でそれをつかみたい。,
D-2021_U75,Z変換の定義など。,収束領域の部分がよくわからなかった。,Z変換の導入。,理解できなかった部分は演習など復習を忘れないようにして理解できるようにしたい。,
D-2021_U76,自分なりに調べて課題に取り組めた。,,,難しかったです。,
D-2021_U77,Z変換の計算過程の理解,,,,
D-2021_U78,,,"z変換の性質として線形性、推移定理、指数数列の積、畳み込み定理などを学んだ。
また、z領域表現から時間領域の信号を求める逆z変換を導入し、具体的な計算方法として、べき級数展開法と部分分数分解法を学んだ。",,
D-2021_U79,,,,,収束領域の考え方を復習したいです。
D-2021_U81,Z変換とはどういうものなのかが分かった。,,Z変換の導入。,,
D-2021_U82,,結局z変換って何なんだろう,,,
D-2021_U83,z変換をどのように行うのか,,いろいろな数列の定義、z変換の定義,別の講義でやったことがあった変換がでてきて理解しやすかった。,
D-2021_U84,,Z変換がどのような意味を持っているのかはあまり理解できなかった,,前回に引き続きあまり聞いたことのない内容が多く理解するのが難しかった,
D-2021_U85,,z変換がどのような場面で必要になるのかわからなかった。,"z変換は、収束しないと復元することができない。
だから、zの値を適切に設定して、収束させれば良い。(x(ｎ)の値がどんな場合でも収束させれる)",,
D-2021_U88,,,標本化した離散時間信号をラプラス変換することでZ変換で表す,,
D-2021_U90,二年の頃、Z変換がどこで出てくるのかわからなかったが、信号処理で出てくるのだとわかった。,,本日の授業で最も重要なのはZ変換であった。,Z変換が出てきて、知識が繋がり感動した。,
D-2021_U91,,,z変換のやり方,分かりやすい,
D-2021_U93,"単位インパルス数列や単位ステップ数列についてはわかった。
",,"離散時間信号を復習し、単位インパルス関数、単位ステップ関数を数列化して定義。
そしてZ変換について詳しく学んだ。Z変換は離散時間システムを解析するために用いられる。
Zの値によっては収束しないことがあるので、収束領域を示す必要がある。
",そろそろ複雑な数学の内容が出てきたので、しっかり復習して次回の授業に備えたいと思う。,
D-2021_U94,Z変換するにあたっての流れ、計算の方法については理解できた。,収束しないことがあるのは分かったが、収束領域を考える際に収束する条件をどう考えるかがあまり分からなかった。,,,
D-2021_U96,,,,"ｚ変換は初めて聞く単語だった。
フーリエ変換はこの授業以外で練習しているが、ｚ変換は練習していないので、
よく復習していきたい。",
D-2021_U97,Z変換はラプラス変換の離散版である。,,,,
D-2021_U99,z変換はラプラス変換の離散バージョン。,,,z変換はフーリエ変換より簡単だった。,
D-2022_U1,Z変換とラプラス変換などの関係性,Z変換の詳しい意味,,難しかった。,
D-2022_U21,,,Z変換の方法を学んだ。,まだ単位インパルス数列や、ステップ関数を含んだ計算がまだ慣れていないので、よく復習していきたい。,今週は特にありません。
D-2022_U24,,,,より多くの関数にフーリエ変換ができるようになってきて楽しい。,
D-2022_U25,,Z変換の終息領域についての話がわからなかった。,,"課題などが徐々にわからないものも増えてきて大変だ。
きちんと復習していこう。",
D-2022_U26,,,　サンプル値信号を数列とみたときのZ変換のやり方や収束条件,,　x(n)の和が無限大にならないとき、Z変換が収束するためのｚの決め方。
D-2022_U29,,,,予習をしっかり行って授業に臨んだので理解できた,
D-2022_U30,,z変換を、もう少し丁寧に理解したい。,,z変換やフーリエ変換など、それぞれの関係を抑えておきたい。,
D-2022_U31,z変換の導出と収束領域の求め方。,数列が絶対可算可能ならz変換が収束するという部分が少し分からなかった。,,,
D-2022_U32,z変換をすることで収束の条件をzの値で決めることができるようになって適切なzでz変換することでフーリエ変換が可能になる。,,離散時間信号をラプラス変換して複素変数z=exp(sT)で置くこと操作をz変換という。,,
D-2022_U36,Z変換,収束領域を求める計算,,数学だった,
D-2022_U37,Z変換に関する一通りの流れはつかめた。,,離散時間信号を単位インパルス信号で表し、それをラプラス変換したものをZ=e^sTとしてZ変換とした。Z変換したものは無限級数で表されているために収束範囲を定める必要があった。,,
D-2022_U38,,,,,特にありません。
D-2022_U39,"z変換とラプラス変換の関係
z変換の収束領域の求め方",,,○○変換についての区別が説明できるようになった。,
D-2022_U40,,,z変換はラプラス変換を離散化したものであり、離散時間システムを分析するために用いられる。z変換は収束しないことがあるので、収束するための範囲として収束領域を求める必要がある。,,
D-2022_U42,,まだZ変換についての具体的な問題を解いてないので実際にZ変換をしたらどうなるのか演習を通して理解したい,,,
D-2022_U44,Z変換,,Z変換について,,
D-2022_U45,,収束領域の求め方，絶対可算可能，絶対値和が無限＝フーリエ変換できない,Z変換,今日の授業は，内容が難しかったので課題でしっかり理解したい,
D-2022_U47,,,,頭にイメージを置いていないとだんだんとこんがらがってきました。,
D-2022_U50,,片側Z変換、両側Z変換の違い、必要性について。収束条件の式。,,,
D-2022_U51,,,"離散時間信号とは、連続信号をサンプリング周期Tでのサンプリングにより、サンプル値信号の系列{x(nT)}として取り出したものである。
また、Z変換は、離散時間信号をラプラス変換したものであり、時間領域から複素数領域への変換をしている。",A/D変換の流れに合わせて必要な情報や数学を学んでいけるので、今日は何を目的としてこの勉強をしているのか、自分で理解しながら授業を聞くことができた。,
D-2022_U52,,,"ラプラス変換の離散バージョンがZ変換。
収束領域はlim(n→∞)Σの形にして発散しない範囲。",,
D-2022_U54,,,今回は新しいことが多かったので少しきつかった,,
D-2022_U55,ｚ変換を理解することができた。,,z変換は因果性を持つサンプル値信号を離散時間でラプラス変換したものである。ただし両側ｚ変換は非因果性である信号にも対応している。ｚ変換のｚの値によっては収束しないこともあるため、収束領域というｚ変換が収束する領域を示す必要がある。またX(ｚ)が多項式の比になっている場合、分母を０にするｚの値を極、分子を０にするｚの値を零点といい、システムの安定性の判定に用いることができる。,面白いです。,
D-2022_U56,,,,z変換のイメージが持てるように勉強していきたい。,
D-2022_U58,,Z変換の応用が何にされているかが分からなかった。,,今回の授業の内容は去年の別の講義で学んだことがある内容で、しっかり復習することができた。,
D-2022_U60,,,,z変換が難しいなと思いました。,特にありません。
D-2022_U61,ラプラス変換とフーリエ変換の違いが分かった。,ラプラス変換とz変換の違いがよく分からなかった。,,,
D-2022_U62,,,,,特にはありませんでした。
D-2022_U65,z変換の解法,z変換の意味,Z変換について,z変換が何を示しているかがいまいち理解できていなかったので復習する,
D-2022_U66,,,Z変換の方法を学んだ,,
D-2022_U67,,Z変換の結果の証明がわからなかった,,,
D-2022_U69,,,,録画を見直してしっかり復習しなければならない。,"資料4ページについて、
x(n)=Σx(k)δ(n-k)　と
x(n)=Σx(k)　　　　との違いが分かりません。
下の式のように、単位インパルス列をかけていなくても良いのではないでしょうか？"
D-2022_U7,,,Z変換について,,
D-2022_U70,,,離散信号は数列で表現することができる。また、z変換を行うことで解析を行うことができる。,,
D-2022_U72,Z変換のやり方やZの値の条件,Z変換とラプラス変換の違いが分からなかった,離散信号のZ変換の方法を学んだ,,
D-2022_U74,,複素数になると1になるやつ,,,
D-2022_U75,"Z変換が離散時間信号に対して用いられ,ラプラス変換を用いて計算されることが分かった.
因果性の定義が分かった",収束条件に対して具体的に説明することができなかった.答えのある例題を何度かこなさないと理解できないように感じた,,,
D-2022_U77,Z変換の大まかな内容。収束領域。具体例。,フーリエ変換とラプラス変換の比較,z変換について。,,
D-2022_U80,,,今日の内容は連続時間信号の標本化だった,授業の進めはこんなペースでよいと思う,
D-2022_U83,ラプラス変換,Z変換,,今何やってるのかよく分かってません,
D-2022_U84,,,Ｚ変換につい,今回も難しかったので復習したい。,
D-2022_U85,,,離散時間信号は数列として解析できることの説明、Z変換。,講義のノートをまとめるのが遅れてしまい、ほかの講義や課題などにまで手が回らなかった。,
D-2022_U87,,,離散時間信号をZ変換を用いて数列を表現する方法,,
D-2022_U89,"ラプラス変換や、Z変換の定義について理解することができた。
またZ変換の求め方についても理解することができた。",零点、極、次数などの言葉の理解があいまいだったので、これからの講義で伝達関数と合わせて理解したい。,"今回の講義では、ラプラス変換、Z変換を学んだ。
その後、Z変換の収束領域を学び、例題で理解を深めた。","今回の講義では、制御工学を学習するにあたって大事なZ変換やラプラス変換を学習しました。
なので色んな分野において応用数学が結びついていると強く感じました。",
D-2022_U9,,,,今日は重要なz変換について学習できたので良かった。,
D-2022_U90,"フーリエ変換で扱えない信号は，ラプラス変換によって扱うことができる．
ラプラス変換では，時間減衰信号を信号にかけて絶対加算可能にすることによって扱っている．
z変換では，zの値を適当に選び収束させて扱う．",,,,
D-2022_U91,,,,前回はフーリエ変換を学習し、今回はZ変換を学習するなど理解すべきことが増えてきたのでしっかりと復習をしていかないとわからなくなってしまうと感じた。ノート、演習等を通して理解を深めていきたいと思う。,
D-2022_U92,,,z変換について。,,
D-2022_U93,"z変換は離散時間システムの解析に用いる
",,,,
