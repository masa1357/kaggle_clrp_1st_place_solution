userid,これまでの授業を振り返って、分かったことを教科書の言葉使って書いてみてください。,これまでの授業を振り返って、分からなかったことを教科書の言葉を使って書いてみてください。,今日の内容で、分かったこと・できたことを書いてください,今日の内容で、分からなかったこと・できなかったことを書いてください,今日の内容を自分なりの言葉で説明してみてください,今日の授業の感想や反省を書いてください,最後に、オンライン講義に関する感想をお願いします。,質問があれば書いてください
B-2020_U10,インターネットには現実世界では考えられないような様々な危険（なりすまし、詐欺、犯罪利用など）が潜んでおり、不用意な発言や発信が自分の意図しない結果を招くことがあるため、SNSでの振る舞いには気をつけなければならないと実感した。,それぞれの法律の成り立ちや、RSA暗号やエルマガル暗号の仕組みなど、難しい話はよくわからなかった。,,,,,,
B-2020_U13,,,,,ICTを使用しない攻撃や各種SNSの匿名性とICT環境の乗っ取りについて,,,
B-2020_U14,,情報を守るための暗号技術は、一般の人が安全にインターネットを使うために、最低限どれくらい知っておくべきなのかわからなかった。,インターネットにおける匿名性は完全には確保されておらず、悪意ある攻撃をすれば特定されるのだと学んだ。,,ICTに関する様々な脅威とその対抗策,,,
B-2020_U15,,,端末の内部における脅威の対策だけでなく、現実の生活においてもICTの脅威に気を付けなければならないとわかりました。snsの情報から個人を特定するのは簡単だとわかりました。エゴサーチは自分の情報がどれくらい広まっているか調べるのに効果的だとわかりました。P2Pネットワーク外のビットコイン取引所が攻撃された場合はビットコインが消失する恐れがあることがわかりました。ネット上の情報を完全に消すことは難しいとわかりました。端末にはそれぞれIPアドレスという住所のようなものが付与されているとわかりました。,無いです。,盗み見や人間関係の弱点を狙われることでパスワードなどの情報がバレてしまうことがある。snsの情報から個人を特定するのは容易である。一度ネットに流した情報は広く出回ってしまうため二度と消せない。チェーンメールは知人から送られてくるため信用してしまいがちだが、すぐに信じてしまわないことが重要である。インターネット上には匿名で利用できるサービスがあるが、IPアドレスから特定することが可能である。匿名であるからと言って好き勝手に振舞うのでなく、現実もネットも同じように振舞うことが大切である。アカウントが乗っ取られると知人に被害が出るのでパスワードを保護するなど対策をしておくことが重要である。,,音声、moodleのアクセス共に問題なく受講することができました。moodleの機能が充実しており、予習してわからなかったところを先生に把握していただき、授業で解説してくださるので効率よく学習を進めることができたと感じています。7回にわたる授業をありがとうございました。,
B-2020_U16,,,・IPアドレスの仕組み　・アナログな手段であっても簡単に個人の秘密情報が奪われること（ソーシャルエンジニアリング）,ICTを利用する/しない脅威の区別,,,技術が発展するほど、その僅かな脆弱性につけこんで悪用するというケースが絶えないのは今後の課題であると思う。だからこそ、その課題に適切に向き合うために、この講義で様々な知識を身につけられたのは良い機会であった。今までの実体験や現状を鑑みても、まだまだセキュリティ等に甘い部分があったように感じるので、自分の情報保護は勿論のこと、他の情報の適切な扱い方を改めるようにしたい。,
B-2020_U17,自分の情報端末を保護するためには、ソフトウェアとハードウェア両方を適切に管理し、マルウェアの侵入を防ぐ必要がある。OSやアプリを最新の状態に保つのが無難である。また、ネットサービス上のアカウントを守るために、自分だけが分かるルールや質問と無関係な答えなどをパスワードに設定するなどの工夫を施したり、信用の無い通信回線を利用しないようにしたりする方が良い。ネット上の情報を保護するための暗号技術も進化している。しかし、情報倫理や研究倫理、著作権を保護する意識など個々人の情報に対する認識も同等に重視されている。ICTを利用する上でも、SNSやメールで迂闊に情報を発信しないように警戒すべきだ。,,,,,,,
B-2020_U18,ブラウザのパスワード保存機能と、同じパスワードを使い回すのとどちらがリスクが高いかを考えると、外から攻撃される文には前者の方が明らかに安全性が高いということ。,,,,,,,
B-2020_U19,ソーシャルエンジニリアリングが一番の脅威なのではないかと考えるようになりました。セキュリティと脅威はいたちごっこの状態であり、おそらくそれほど情きょは変化しないのだろうと思います。このように考えられるようになったのは脅威について学び、個人の対策を理解したためです。,バックアップを失うことはないのかが分かりませんでした。講義を終えて、わからないと感じていることは特にありません。,やはり、人間の不注意や隙を狙った脅威が減らない問題なのではないかと考えることができました。,マイナンバーは利便性を選び、プライバシーを選ばなかった制度なのか。それがよく理解できませんでした。,今回はこれまでに習ったことの復習になった。人間の不注意が原因となるセキュリティー問題、パスワードや個人情報に関する問題、社会的信用、身近なネット脅威など。大事なことはインターネットでも現実社会でもモラルを守ることであるというのが、情報発信する上では重要なのだと学んだ。,最後までやり切れてよかったです。小テストで多く間違ってしまったことは悔しいですが、これからの学習に役立つ知識がたくさん学べたことが嬉しいです。,,
B-2020_U20,,,,,ICTを用いない脅威にオレオレ詐欺やチェーンメールがあり、匿名であることの大切さとそれでも脅威にさらされることがあるということ。ICT環境が乗っ取られることもあるので注意する。,,,
B-2020_U21,,,,内容が身近で分かりやすかった分、情報量が多かったり自分の最初からの偏見があったりして、予習と授業時間内で完全に理解できない部分もあった。,,,,
B-2020_U22,まずは自分で安全な設定を行うことがセキュリティの質を高めるための第一歩である。そして、暗号やサイバーセキュリティ基本法等の情報セキュリティの仕組みや情報倫理について理解することも重要であり、それらは日々更新される可能性があるため欠かすことなく確認する必要がある。,,"セキュリティのための技術やその利点,欠点の理解ができた。",,,今回の授業で今までの講義で取り入れた知識の確認と整理ができたため、これからも社会的なセキュリティについて自分でも調べていきたい。,最初は不安もあったが、説明等もかなり丁寧にしてくださった上に、関連の資料等も載せてあったので学習が進みやすかった。,
B-2020_U23,,"特にありません。
",インターネットと繋がる全てのデバイスにIPアドレスがついていること。,特にありません,,,不都合なことは全くありませんでした。,特にありません。
B-2020_U24,,,,,,,オンライン授業では自分の時間が増えるのでありがたかったのだが、授業の内容についてクラスの子と話す時間が少ないように思えたのでできるのなら対面授業のほうが好ましい。オンライン授業の質はよかったと思う。,
B-2020_U25,,,,,今回の内容は、これまでの内容の総括でした。,,わかった・わからないボタンの活用は、講義時間の無駄を省けて良かったと思います。学生側も他の人のわかった・わからないの状況を閲覧できるとおもしろいかなと思います。,
B-2020_U26,,,,,ICT社会で生き抜くために,,,
B-2020_U27,マルウェアと呼ばれる悪意のあるサイトが存在するということ・ウイルス対策ソフトは既存のマルウェアにしか反応しないということ・パスワードハッシュという、パスワードがそのままサーバに保存されないようなものがあるということ・誰が提供しているかわからない無線LANは使用しないほうが良いということ・研究の査読において、シングルブラインド、ダブルブラインドという公平に評価できる仕組みがあるということ・個人情報はプライバシーと一致しないということ・著作物は人の感情、思想に伴うものであるということ,,,,,,,
B-2020_U29,,,"オレオレ詐欺、他人のパスワードの暗記などICTを使わない攻撃が存在し、それによって詐欺被害や乗っ取り、不正アクセスなどが起きる可能性がある
複数のアカウントの情報をつなぎ合わせるなどして個人が特定されることがある
匿名だからといって特定されないわけではない　
サーバーのIPアドレスの履歴をプロバイダに問い合わせれば、誰の端末によるものかバレてしまう（ただし手間と時間がかかる）
九大はそれ自体がプロバイダなので、学生が九大関連のIDで問題を起こしたら九大が調査できる
自分のID、パスワードが漏洩すれば、自分のICTが乗っ取られることもある",,"社会科学　
I C Tを使わない脅威によって自分や身内、ICT環境に被害が及ぶ可能性がある",,,
B-2020_U31,,,情報を扱う上で安全性の高い情報をきちんと判断することが大切である。また、自分が発信する側の時は常に開放的な場に情報を載せていることを意識して自分や自分にとって大切な人たちの情報を暴露しないようにする。,,今日は全体の総まとめのような内容で社会科学について学びました。情報やネットワークを扱う上で危険がたくさん潜んでいることとそれに対する対策を学びました。,,予習をしてわからないところを簡単に先生に伝えることができるのがよかったです。また、私としては匿名で届くとおっしゃられていたので気軽におせました。遠隔でしたが、授業のスピードもちょうどよかったです。,
B-2020_U32,ネット利用時には、自力で身を守ることが必要であること、不審なサイトに近づかない、不用意にダウンロードやインストールをしない、メールの添付ファイルやリンクに注意する、個人情報をむやみに提供しない、怪しいと思ったら詳しい友達や先生に相談する、パスワード漏洩を防ぐ、(ソーシャルエンジニアリングなどに注意する、複雑なものにする)ということを特に日常生活から強く意識することが重要であることがわかりました。今回他にも様々なことを学びましたが、講義内容以外にも、例えば法律や暗号技術などにはもっと深い勉強が必要になるところがあり、全てを把握してネットを利用するという状況にはならないと思うので、怪しい、分からない、と思った時に焦って行動してしまうのではなく、人に相談する、ということを大切にして行きたいです。,,,,ICTを使わない脅威については、人を騙したり、隙をついたり、覗き見するなどのソーシャルエンジニアリングで、個人情報が奪われるというものがある。様々なソーシャル系アタックへの対策としては、電話ではきちんと聞き返す(オレオレ詐欺)、本人確認する、パスワードはわかりにくいものを、入力時の誰かに見られていないか注意する、生体認証を使うなどがある。情報サービスにおいては、自分の実名を隠している状態なので信頼性が薄い。また、本当はどこの誰なのか、これを書いている私が本当は誰なのかわからない、というような状況も起こりうる。しかしこの匿名性は、時間と権限を使えば守られることはなく、ほとんどの場合特定が可能。ユーザー名とパスワードが盗まれるとアカウントが乗っ取られることになる。そこで、ユーザー名とパスワードを適切に保護し、ウイルス対策をし、パソコン、スマホを他人に渡さないことが重要である。また、知り合いが乗っ取られた時に騙されないように、緊急と言われても慌てず、他の手段で相手と連絡を取ったり、共通の知人に確認してみたりするなど、すぐに相手の要求に答えてしまわないようにすることが大切である。,他人を特定するのが好きな人がいるとのことでしたが、もっと無害で楽しい別の趣味をぜひ持って欲しいなと思いました。,分かった、わからないボタンを利用して、説明量を変えていくスタイルはとても合理的で良いと思いました。,
B-2020_U34,サイバーセキュリティ犯罪に関して、当たり前にインターネットを利用する私たちは当事者であるので、決して他人事とは思わずに、常日頃からそういった犯罪に遭わない・犯罪を起こさないように意識しなければならない。,,,,"ICTを使わない脅威として、ソーシャルエンジニアリングやオレオレ詐欺がある。
また、生体認証にも抜け道があったり、SNSにおいても様々な情報から個人を特定される危険がある。他に、ビットコインの盗難、情報拡散、チェーンメール、マイナンバーからの個人の特定などの脅威がある。
ネット上の匿名性は、必ずしも守られるわけではなく、本人特定も可能である。IPアドレスや写真から、誰が迷惑行為・違法行為をしたかがわかる。
迷惑行為としては、なりすましや乗っ取りがあり、本物か見極めることが重要である。また、TwitterやFBなどと連携するのもセキュリティを上げる有効な手段である。",,,
B-2020_U36,これから私たちはインターネットと共に生きていかねばならないので、やって良いこと悪いことを明確に理解する必要性がわかりました。,,,,インターネットともに生きていく上での注意点,自分の情報は自分しか守れないと心に留めておこうと思いました。,,
B-2020_U38,,まだ共通鍵暗号と公開鍵暗号の区別などがついていない部分があります。暗号の分野は難しかったです。,,,ICTを使わない、人を狙った攻撃について、そして様々な情報サービスにおける「匿名性」について、また「なりすまし」や「乗っ取り」について、またこれらの具体的な過去に起きた例について。,,,
B-2020_U39,個人情報やアカウントを守るため、パスワードは短いものや推測しやすいものは避け、出来るだけ多種の文字を用いた長いものにするべきである。また、通信は様々な技術や法律によって守られているが、そういったものの隙をついて偽URLや偽メールを使ってウイルスを送り込んだり、アナログな手法を用いた対策しにくい攻撃をしたりする輩がいるので、しっかりとした知識を身に着け個人個人で対策をすることが大切である。,,,,,私もSNSを使うことはよくあるので乗っ取りやなりすまし、特定には注意しようと思った。また、それっぽいだけのデマが流れてくることもよくあるので、発信者が知らない人であるということを常に念頭に置いてどんな情報も妄信しないように気を付けていきたい。,,
B-2020_U4,"パスワードは長い、推測されにくい、使いまわさないことが大切である。パスワードはサーバ上にある情報を守るために必須で、パスワードの漏洩を防ぐパスワードハッシュというシステムも利用されている。セキュリティ作成側はセキュリティ・バイ・デザインなど、常に新たな手口に対応する必要がある。
サイバー攻撃側は、フィッシング、サプライチェーン、マルウェア、辞書攻撃などを用いて、パスワードや個人情報を盗み出そうとする。
情報伝達を安全に行うための暗号技術は長年研究されている。基本原理は、暗号化と復号化それぞれの法則を決め、その法則を知る者だけが情報にアクセスできるというものである。一方向性関数が応用されている。
法律によってサイバーセキュリティは保証されている。不正アクセス禁止、特定電子メールの規定、不正競争防止、個人情報保護など、IT化に伴って現在も法律の対象は拡大している。電気通信や電波の規定も法律で定められている。
研究倫理、情報倫理、著作権は大学の研究や仕事においても大切なものであろう。著作者人格権と著作権により、一定の保護期間著作物を生み出した本人の権利は保証される。よって、盗作を疑われないように正しい科学的検証は研究において必須である。捏造、改ざんを疑われないように、ピア・レビューなどでの確認も怠ってはいけない。評価する側は、利益相反など、客観性を失わないように常に心得ている必要がある。",,,,"ICTを使わないICT攻撃は多く身近に存在している。
人を狙った攻撃には、覗き見、オレオレ詐欺、SNS上の情報や性格診断からの個人特定などがある。対策としては、頑丈なパスワードの設定、生体認証の利用、メディアリテラシーが挙げられる。
ビットコイン取引所のシステムや外部委託先のセキュリティなど、本体のセキュリティ以外も守る必要がある。
ネット上での入力情報は消せないもので、プライバシーや個人証明になるものの扱いは慎重にする必要がある。
ネットの情報拡散力を利用したチェーンメールや標的型メールの存在を多くの人が認識するべきである。
情報サービスの匿名性は実名を隠せる点などで保証されているように見えるが、IPアドレスや書き込み履歴から個人を特定できる。調子に乗ってはいけない。一方、この要素を利用してなりすましや乗っ取りを試みる人もいるので、個人のネット環境のセキュリティは大切である。","タトゥーは痛そうなので、デジタルでも入れたくない。
初回に比べて、情報に関する知識が深まったので、セキュリティに対する注意力を強くもてた。",,"SNSのフォローは友達の友達が出てきますが、その経由で全くの赤の他人と繋がることも可能ですか？フォローしているかしていないかの違いだけで、フォローを辿ったら全世界とつながっているのでしょうか？
SNSを安全に使用することは不可能ではありませんか？"
B-2020_U40,,セキュリティに関して、自衛をすることは非常に大事だが、過敏になってしまうとそれはそれで良くないと思う。目安というものが明確にない以上、限度がわからない。,何気ないところで個人情報が抜かれていたり、何も考えずに情報を発信したりしていると危険である。,写真などから個人情報がバレる可能性があることは分かったが、どの程度の情報量から様々な情報が引き出せるのでしょうか。Yahoo知恵袋を駆使して情報を集めることも可能ということでやはりとても細かな情報から色々な種類の情報が取れるのでしょうか。,,,オンライン講義は家で気ままに受けられる反面、授業に対する集中力が落ちがちであったり、良い面と悪い面が両方あるので、工夫すればとても良い授業形態になると思う。,
B-2020_U41,自分のパソコンやスマートフォン、その中のアプリ等にはそれぞれ個別のパスワードを設定しておく必要があり、バックアップも取っておくことが望ましい。またもし、自分のデバイスを紛失した際の対応を準備しておくことも必要。情報倫理にかける行動は法律で罰せられる。この先論文を描く際は著作権などに気をつけて、参考文献や関連研究の取り扱いに気を付けなければならない。,"著作権の法律に関する具体的な事例。
現代の複雑な暗号システムの仕組み。",,,サイバーセキュリティを守るための技術がどれだけ発達しても、最終的な砦はそれを扱う人々の行動によって守られる。人間の行動はデジタル化社会を生きる上での、大きな防壁にも、弱点にもなりうる。,,,
B-2020_U43,,小テストの文脈が難しいことがありました。,,,ICTを使っても使わなくても危険は存在しているということ,,,
B-2020_U44,最初の方の授業で例えば、スマホのアップデートが来ていたらしておかないとウイルスなどにかかりやすくなる、ということや、パスワードを使いまわさないことなど、当たり前のことだけど、面倒くさくてやっていなかったことの思わざる危険などがしれてよかった。今後は今回習ったことを生かして今後できるだけ被害に遭わないようにしていきたい。,法律を知る、のところや著作権のところがあまり日常生活に馴染みがなかったので全体的に理解が浅かった。,,,,,,
B-2020_U45,"パスワードの安全な設定やWi-fi二種類があることを知ることができた。
また研究倫理の授業で利益相反という言葉を知った。",,,,,,,
B-2020_U47,現在、ネットはとても便利になったがそれに伴って様々な危険が存在するためそれぞれ防ぐためにはいろいろな措置があることがわかった。,,,,,,,
B-2020_U5,,,ICT環境にいることは現代、かなり身近であるがその環境でなくなったときでも安全が保たれるようにいろんな脅威について知っておくことが大切だということがわかった。生体認証は思ったよりも脅威があることがわかった。,どこにでも脅威は潜んでいるので、怖いなと思ったし、本当に正しいところから来ているかわからないようなメールが自分自身受け取ることもあるので、そういった脅威を見極められるようになりたいと思った。,,,オンライン授業は家で受けるということもありなかなか集中し続けるのはやはり難しいなと思った。しかし、ボタンを押すシステムがある本講義では、予習の段階でボタンを押すことで参加しているようにより感じられ、またわからなかったところなどにブックマークをつけておくことで講義中、聞きたいところを明確にすることができてよかった。メモが開かなくてもページにアクセスしただけで見れるともっと良いなと思った。,
B-2020_U50,ネットの世界では、セキュリティを守るために暗号化や署名の技術を用いて悪質なプログラムやサイトをブロックしている。しかし、システムを完全に信頼するのではなくICT以外のパスワード管理にも注意を払うべきだ。,国外のセキュリティ情勢にもどのようなものがあるか知りたかった。,ネットに接続する際にIPアドレスがサーバーに送られること。,,様々な方法を使ってネット犯罪は行われる。ICT環境を防御することだけでなく、現実の環境も情報の漏洩に気を遣うべきえある。また、虚構の匿名性を信じずに特定される可能性があることを念頭においてネットを利用する必要がある。,今までの授業で学んだことを社会でどのように活用していくかが学べてよかった。,,
B-2020_U52,,,ICTを使わない脅威に対して気をつけることやICT環境上での自分の情報を守るために気をつけること、してはいけないことがわかりました。,,ICTを使わない脅威について理解し、ICT環境上の匿名性や乗っ取られる危険性があることについて理解する。,,セキュリティ対策などの時に、iPhoneやMacでのセキュリティの確認の仕方や設定方法のスライドを入れてくださったのが、とても役に立ちました。,
B-2020_U53,,,,,ICTを使わない不正行為、SNSでの問題,,先生の顔がわからないまま終わった教科もあり、少しさみしい。集中力を保つのが難しい。別のことをしながら授業を受けてしまうことがあった。moodleの更新を忘れて欠席になることが何回かあり、困った。,
B-2020_U54,,,これまでの内容とに似ている部分も多かったのでわかりやすかったです。やはり、個人情報のあつかいはとても大切だということを再認識できました。,ビットコインがよくわかりませんでした。,,,ほかの授業に比べて、分かったボタンなどの機能により、より効率的な授業になっていたと思います。しかし、資料の量や文字が多く、予習に手間取ったこともありました。,
B-2020_U55,,ハッシュ関数に関する暗号化技術に関して、やんわりとは理解できたのですが、具体的にどうなっているのかについてはあまり理解できませんでした。,,,,,,
B-2020_U56,ICTの安全な利用方法,,,だいたい理解できた。,,今までありがとうございました。,自分たちの学習に配慮してくださって大変ありがたかったです。,
B-2020_U58,,,,特にありませんでした。,,,,
B-2020_U59,,サイバーセキュリティに関する法律が多く、それぞれの法律がどのような役割を果たすのかが難しかったです。,〇〇診断などでも情報を抜かれることがあるということがわかりました。案外簡単に個人を特定することができてしまうということがわかりました。,,サイバー攻撃には人を狙った攻撃、匿名性、なりすまし、乗っ取りなどの脅威がある。気をつけないと思わぬところで情報を引き抜かれることがある。急なメールが来ても、焦らず、確認を取るなどして落ち着いて退社することが大切である。,,"質問に答えていただけてよかったです。前回の質問は、おそらく他人が撮った写真を授業時間内だけで扱われる作品に使おうとしたのだと思います。
授業もわかりやすかったです。終わるとなると少し寂しい気がします。ありがとうございました。",
B-2020_U6,ネット社会が進んでいく中で個人情報などの大切な情報を保護するために様々な対策がされているが、悪用の仕方もどんどん進歩してきている。,,診断系のサイトからも個人が特定されたり、チェーンメールなどが知り合いを介して回ってきたりすることがあることがわかりました。,,ICTを使う時の様々な危険性について。,ネットやSNSはとても原理がけど、悪用される危険性も高いのでちゃんと気をつけて利用したいと思いました。また、技術が進歩していくとまた、新たな対策が必要になると思うので、ちゃんと最新の情報を知っておくようにしたいです。,,
B-2020_U60,,,,,,SNSを多く使う私たちにとって、なりすましなどの攻撃や、匿名性への理解などとても身近な問題だと思うのでとてもためになった。,,
B-2020_U62,自分の情報を守るために、生体認証や複雑なパスワードを使ったり、こまめにアップデートをとるなど、自分で考えて行動することが大切である。,,,特にありません,,,,特にありません
B-2020_U63,これまで色々なSNSのアカウントのIDやパスワードを併用していたが、それは危険な好意であるとわかったので、今すぐ辞めたい。,,,,サイバー犯罪の具体例,小テストの得点があまり良くなかった。,７回の授業にわたり、スライドの作成やTeamsでの講義等ありがとうございました。毎回とても分かり易かったです。,
B-2020_U64,個人情報に関する法律がどんなものかわかった,情報セキュリティを構成する３つの要素の区別があまりわかっていなかった,,,,,早く対面授業が始まって欲しい,
B-2020_U65,,インターネットを使用する際には、サイバーセキュリティ基本法や、不正アクセス行為の禁止等に関する法律など、守らなくてはならない様々な法律があり、その法律の深い理解がまだできていない。,,,インターネットではソーシャル系の攻撃などにより、SNSなどのアカウントやメールなどが乗っ取られたり、パスワードを抜き取られたりして、個人情報を抜かれたり、チェーンメールの被害者加害者になったりしてしまう。また、なりすましなどの手口により、誤情報が拡散されてしまうこともある。,,オンラインだったけど丁寧な説明でわかりやすかったです。,
B-2020_U66,Dos攻撃についてが一番覚えています。13時と課題締め切り直前にMoodleが動かなくなるのは九大生がDos攻撃しているんだなと思っていつも見ています。,,匿名性は過剰信用してはいけないこと。パスワードを１０桁、英数字で構成すると、解析に67年かかること。,,ICTを使わない脅威について理解する、乗っ取られることや匿名性の信憑性について理解する,,個人的には物理を勉強するよりも、サイバーセキュリティのほうがネット社会の人生において役立つし大切な気がするので受けていて楽しかったです。授業を聞いていてわかったつもりでも、小テストを受けると細かい違いが分からないことがあったので、ちゃんと理解して気をつけないといけないなと思いました。,
B-2020_U68,サイバーセキュリティの安全な設定や暗号文技術、情報を扱う上での研究・情報倫理、また著作権やその周りの法律、そして今回のICTを用いない脅威について学んだ。,暗号技術の詳しい説明など細かい点で分からないことはあったが基本的な部分は分かった。,,,,これからもSNSの使い方について気を付けようと思った。,,
B-2020_U69,,,,,自分のSNSや端末をパスワードがあるからと言って油断せずに管理することが重要である。,たとえ非常事態であっても自分の受け取るメールや情報はきちんと選択して取り入れることの重要性を感じた。,,特になかったです
B-2020_U70,安全なパスワードの作り方や、暗号化技術について、今までよくわかっていなかったことを学ぶことができてよかった。,,SNSにおける脅威について理解できた。,,,私たちの生活に欠かせなくなっているSNSの危険性を再確認できた。どう利用するかは自分次第だと思うから、責任を持って利用したい。,,
B-2020_U71,,,,,,,全７回の授業お疲れ様でした。とても身近なところにあるインターネットの脅威や正しい利用方法を知ることができました。ありがとうございました。,
B-2020_U72,,,完全に匿名にすることはほとんどできない,,,,,
B-2020_U73,サイバーセキュリティのための防御方法(設定、暗号、法律、権利など)にどのような種類があるのか学ぶことができた。,著作権の種類や例外の場合の判断、また法律などが少し複雑で理解できているか不安です,,,ICTを使わない脅威の存在の紹介、ネットの匿名性と個人の特定についての話、連携サービスなどによる乗っ取り,,予習→解説→復習の流れがとてもよく、オンライン授業で一番学習効果が高いのではないか、と受講している身として感じました。ありがとうございました。,
B-2020_U74,,,,,,,,特にありません。
B-2020_U75,,今回の授業が一番わからなかった,,小テストで満点じゃなかった,,,パソコンを使うのに慣れてなくて色々と戸惑うことがあった。シンプラZをやり忘れることがあった。春学期ありがとうございました。,
B-2020_U78,研究を行う上で守らなければならない研究倫理や不正を防ぐための方法、個人情報とプライバシーは異なるものであること、著作権・著作者人格権及び隣接著作権や実演家の権利などの具体的な内容や適用される対象の範囲など,公開鍵暗号について、一度変換した暗号を別の鍵で復号できるのかというところがあまり理解できなかった。,身の回りに潜む個人情報特定の脅威について知ることができた。,,ICTへの脅威は社会のICTを用いない範囲においても存在するため注意が必要である。自身がネット上に投稿した情報やサービスの使い方によっては個人情報の特定や乗っ取りなどの被害に見舞われる危険性がある。,予習を十分に行うことができなかった。,,
B-2020_U79,ネット上であっても守るべき法律やリテラシーはあるため、それをしっかりと理解した上で利用をするべきだ。また、攻撃方法を知り具体的な個人情報の守り方まで知っておくことも大切だ。,,,,,性格診断サイトで個人情報が抜かれるのと同様に、よくあるアンケートに答えてお小遣い稼ぎできるみたいなやつも抜かれるのだろうと思い少し恐怖感を覚えました。,,
B-2020_U8,,予想していたよりもたくさんの情報セキュリティに関する法律があり、区別するのが大変だった。,,,"今回の授業では、ICTへの攻撃にはICTを使わない脅威（心理的な隙や行動のミスに付け込まれる。）が存在することを理解した。また様々な個人特定の危険や、匿名性、乗っ取られる危険性について理解した。
　",,,
B-2020_U80,,,,,,私もSNSを利用していて、普段から個人情報を守ることや匿名であることをいいことに悪さをしないことには気をつけているが、今日学んだことに基づいてこれからも注意していきたい。,,
B-2020_U81,個人情報は、守らなければならない大切なものということ、守るために様々なセキュリティーシステムがあり、法律もある、ということ。しかし、少しの油断で情報が漏洩するかもしれないので、いつも警戒しておく必要があるということ。,,,,,,,
B-2020_U85,,,,,,具体例が豊富で理解しやすかった,,
B-2020_U86,著作者人格権は、著作者が精神的に傷付けられないようにするための権利であり、譲渡、相続はできない。著作権は、財産的利益を守るための権利であり、譲渡、相続が可能である。この２つにこのような差があることがわかりました。,,パスワードを数字と英語を組み合わせることで格段に強固にできることがわかりました。,,ICT環境上であってもそうでなくても自分の情報が危険に晒されている可能性があることを自覚し、最低限の自己防衛策を講じる必要がある。また、インターネット上において自分が情報を発信する際は個人情報の漏洩に注意し、自分が情報を享受する際はそれの真偽について吟味することが重要である。,生体認証が進歩するとより様々な観点から対象を識別するようになるだろうから、ちょっとした変化で本人と認めてもらえなくなることがありそうだなと思いました。,オンライン講義で授業時間より少し早くサイトにアクセスしても出席判定になるのはこの授業だけだったので、他の科目もそうなってくれたら良いなと切に願っています。,
B-2020_U87,,,,,,スライドの量が多かったが、その分いろいろな事例を学ぶことができて身になった。,,
B-2020_U89,,,チェーンメールの質の劣化という記述があったが、その点Twitterのリツイート機能は質を落とすことなく情報を拡散することができるため、良くも悪くも強力な機能だと改めて感じた。,,セキュリティ脅威がやってくるのはICTからのみではない。入力画面を盗み見たり、電話越しに聞き出したり、アナログな手段によってパスワードや個人情報が漏洩する可能性もある。また、インターネットにおける個人情報は「自分が表示している/していない」という単純な問題ではなく、自身や知人の写真から個人情報が漏洩する可能性があり、またSNS上などに匿名で書き込んだつもりでもIPアドレス等によって個人を特定される場合もある。,,全体としてオンデマンドでの講義が多い中、Teamsを用いた音声講義で開講していただけたのは、かなり助かりました。大学生にもなって恥ずかしいことですが、自主的に学習する というのが苦手なのでオンデマンド形式での受講はかなり苦痛に感じていました。また、「基本的に自習で、わからない部分を説明していく」と第一回あたりで先生が発言されていたと思いますが、それでも差はあれど、教科書の全ての部分に触れてくださったので、あまり自習という感じはしませんでした。個人的に、春学期に最も対面授業に近い形での講義の一つだったと思います。,
B-2020_U9,研究不正には「改竄」「盗用」「捏造」があり、研究者は研究においてこれを行ってはならない。また、研究者には科学の進歩と社会の安全安心に貢献し、所属する研究機関やクライエントの利益を守る責任がある。情報セキュリティを構成する三大要素は機密性、完全性、可用性を維持することであり、これらを妨害する4大脅威（盗聴・なりすまし・改竄・否認）を防ぐため、受信者と発信者の間で鍵を使って暗号化し、複合化した。「個人情報」は単に個人が持つ情報のことではなく、組み合わせるなどして個人を特定できる情報のことである。また、著作権は知的財産権に含まれており、著作権の内には著作者の権利と著作隣接権がある。これは特許権や商標権の含まれる産業財産権とは別のものである。著作者の権利の中には著作者人格権と財産権があり、映画監督などの持つ権利に著作隣接権がある。著作物として認められるものは著作者の思想や感情を表現したものであり、表現していないアイデアは著作物として認められない。,,"ビットコインは高いセキュリティが保たれていることがわかりました。
チェーンメールでは知らず知らずのうちに加害者になってしまうことがあることも分かりました。
また、ソーシャル系のアタックやチェーンメールなどの対策がわかりました。",昔のチェーンメールの目的がわかりませんでした。,ソーシャル系の攻撃の対策として、聞き返す・本人確認・パスワードはわかりにくいものを設定する・入力時に見られていないか確認する・生体認証を利用するなどが有効であり、性格診断では複数の回答を総合すると個人情報にもつながるような情報を抜かれる可能性があるので注意が必要である。ビットコインは重要なところが複数に分かれており、一つがダメになっても全体に影響が出ることはないが、取引所がダメになると全体に影響が出てしまうと言う難点がある。チェーンメールは知人から送られてくるので信じてしまいやすく、デマやマルウェアの拡散に協力してしまうことがある。また、匿名性の保たれたものであっても何かあれば特定できてしまうので発言には責任を持たなければならない。パソコンや携帯にはそれぞれにIPアドレスが振ってあり、どの端末からのアクセスかなどを特定できるようになっている。,自分の生活に直接役立ちそうな、ソーシャル系のアタックに対する対策などが学べてよかったです。自分がこのような攻撃に遭うことがないように気を付けていきたいです。また、匿名性が保たれているからと言って責任の負えないような行動や発言をすることがないように気を付けていきたいと思いました。,,チェーンメールがお手紙だった頃、不幸の手紙などを回すことによって発信者が得る利益は何がありますか？
B-2020_U92,,,今までなんの怖さも感じずに使っていた携帯やパソコンが思っていたよりも多くの怖さが潜んでいるものであると知りました。,,ICTについて情報の脆さ、どうやって情報が抜かれるのか、普段使っているSNSの怖さやサイバー攻撃、サイバー詐欺について学んだ。,,,
B-2020_U93,,,写真などは考えて載せるべき,,個人情報が漏れる理由や原因,理解しているはずだったが理解できているか不安だ,,
B-2020_U94,"暗号には公開鍵暗号と秘密鍵暗号があることと、それらの仕組み。
サイバーセキュリティ基本法とその歴史。",,,,,自分もSNSをやっているので、他人に乗っ取られたりなどのトラブルに巻き込まれないようにしたい。,普通にわかりやすかったが、時々どのページの説明をしているのかわからなくなることがあった。,
B-2020_U95,,研究倫理やサイバーセキュリティ基本法、また著作権の公表権などのように内容が濃く、多い部分がよく分からなかった。,,,,,,
C-2021-1_U100,,,googleなどでの検索がどのようになされているか疑問に思っていたので、それがなんとなくわかった気がしました。,,,比較回数が少なくなるにはどうするのが一番いいかという点でいろいろな試行錯誤がなされてきたんだなと感じました。,,
C-2021-1_U101,,,,,マージソートとは１つの数列を数個に分割し、整列させてから、その数列を先頭から順に比較し、小さい方から順に新たな数列に格納して整列させる方法である。線形探索とはある数列に要素xが含まれているかを調べる際に、数列の先頭から順に調べる方法である。二分探索とは、ある数列に要素xが含まれているかを調べる際に、昇順または降順に並べ替えた数列の中央の値とxを比較することで要素xが全体の前半分にあるか後ろ半分にあるかを判別し、要素xが存在しない側を探索範囲から外して存在する側を新たな探索範囲としてxと中央値を比較する・・これを繰り返すことで要素xが存在するかしないかを判別する方法である。探索方法においては、線形探索より二分探索が圧倒的に早い。,,,
C-2021-1_U105,,,マージソートアルゴリズムでは、まず数列を2つに分裂させ、それぞれをソートする。そしてソート後の２つの列をマージする。２つの分裂した数列の長さをそれぞれn₁、n₂とすると、比較回数は高々n₁＋n₂-1である。分割とマージは何回も行う。,,マージソートアルゴリズムの仕組み。比較ソートアルゴリズムの仕組み。比較ベースのソートアルゴリズムは必ずO(nlogn)回の比較を要する。そこで、要素の比較を行わずにソートを行う方法はないのか。２分探索法の時間計算量はO(logn)である。,ソートアルゴリズムのそれぞれのやり方は理解できるが、それぞれの比較回数や、オーダー表記などになってくると途端にわからなくなった。また、その方法はいったい何を目的としているのかが分からなくなってきたので、もう一回勉強しなおしたいと思った。,,
C-2021-1_U107,,,,,マージソートと二分探索法,前回の続きという感覚,,
C-2021-1_U11,,,,計算式が難しかったので注意していきたい。,要素が整列してない場合に先頭から探していく方法を線形探索、整列されている場合は真ん中の要素と比較して探す方法を二分探索という。,様々な計算法が出てきていたので整理して理解していきたい。,,
C-2021-1_U12,,,木を使うと比較回数は木の段数を超えない。二分検索で真ん中から比較していくのはすごいと思った。,"二分検索と接尾字を使った二分検索で、比較回数が違ったこと
計算の証明とかまだ追いついていないことがあった",マージソートと二分検索のやり方と、計算量、スピードの比較について学びました。,"とても難しいです。
しかし、新しい比較方法が開発されることでどんどんスピードが上がるということにとても興味が持てました。未来がたくさんある分野なのだと思いました。",,最悪計算量は、比較回数と交換回数を足すのですか
C-2021-1_U13,,,新たなマージの意味やその有用性について学ぶことができ、有利な選択ができるようになりました。,予習,,,,
C-2021-1_U14,,,,,マージソートと二分探索法について,,,
C-2021-1_U15,,,キーワード検索の仕組みがわかった,,最後の方は簡単だった,B単元は難しかったので復習をしっかりしたい,,
C-2021-1_U19,,,,,線形探索よりも2分検索の方が圧倒的に速いということ。,,,
C-2021-1_U2,,,,,マージソートと二分探索のアルゴリズムを見て計算量を確認した。また、比較回数のオーダーが最低でもO(n log n)になることを学んだ。,,,
C-2021-1_U20,,,比較ベースのソートは必ずO(nlogn)回の比較を必要とするということ。,,,,,
C-2021-1_U22,,,,,２つに分割して、それらを比較することにより、少ない回数の比較で並べ替えられる。,,,
C-2021-1_U23,,,マージソート、線形探索、２分探索のやり方を理解できた。２分探索の効率の良さがわかった。,「比較ソートアルゴリズムの比較回数は、少なくともｎ!個の葉を持つ２進木の高さの最小値以下である」というところが理解できなかった。,マージソートでは、整列された入力数列を統合して整列された１つの数列を出力する手法を用いて、分割・統合していく。比較ベースのソートアルゴリズムでは、O(nlogn)回の比較が必要。情報検索を高速で行うために、２分探索を用いることがあるが、もともと要素が整列されていない場合、先頭から探索していく線形探索では比較回数が多いケースも想定される。要素が整列されている場合は、真ん中の要素と比較し、比較する範囲を絞ることで、線形探索よりも圧倒的に速く終了できる。キーワードの場合も、接尾辞を考えて、同様に２分探索を行うことができる。,,,
C-2021-1_U24,,,マージソートの方法と情報検索の仕組みがわかった。,,"B-9では、マージソートとソートの比較回数について学んだ。
B-11では、線形探索、2分探索について学んだ。",情報化社会において、データの検索を高速に行うことの必要性は高まっていると思うので、より効率的にソートし情報検索をする過程を模索していくことが重要だと思いました。一方で、目的に応じてソートアルゴリズムを使い分けるのは少し面倒なのかもしれないと思いました。要素比較以外の方法でソートする方法についても調べてみたいです。,,少し前の授業内容にも関わっているのですが、オーダー記法の()内の関数は何を表しているのでしょうか。また、どのように求めるのでしょうか。
C-2021-1_U25,,,Googleなどにも二分探索が用いられている,,マージソートの他のソートとの違い、二分探索の種類,"予習頑張ります
",,
C-2021-1_U26,,,"マージソートは一度分解して組みなおすので、よりシンプルにして並べることができる。
二分探索は長い文字列を半分にして比べられるので、比較回数が少なくなる。",logの回数がわかりません。,マージソートと二分探索,前回の授業と混ざってわからなくならないように、ソートの範囲をまとめて復習します。,,
C-2021-1_U27,,,"・マージソートのやり方がよくわかった。
・二分探索法のやり方がよくわかった。
",・接尾辞の部分が結局何をやっているのかよくわからなかった。,"・比較ソートとして、新しく「マージソート」を習った。マージソートでは数列を分割して要素数１の数列にし、それぞれを比較していく。
・「二分探索法」は他の方法よりも圧倒的に早く計算できる。",,,"・接尾辞の部分ではなぜ接尾辞の集合とacを比較しているのですか。
・要素数nの集合に対する二分探索のステップ数がlog₂nを超えない、というところの説明がよくわからなかったので、教えていただけると助かります。"
C-2021-1_U28,,,マージソート、二分探索のアルゴリズムを図を通して理解することができた。,比較ソートアルゴリズムの比較回数の証明において、Stirlingの公式以降の説明がいまいちわからなかった。,,普段私たちが使うウェブ検索において、二分探索が行われることやそのアルゴリズムを知ることができておもしろかった。このように身近な例を通してアルゴリズムを知れたことで、より理解が深まるように感じた。,,
C-2021-1_U29,,,マージソートと二分探索が理解できた。,,マージソート、比較ソート、二分探索について学んだ。,練習問題を解くなどして復習を頑張ろうと思います。,,
C-2021-1_U3,,,,,,webサイトにも二分探索が使われているが、最近まで二分探索がみつかっていなかったのは驚きだった。線型探索が相当時間がかかりそうなのは想像できるがその程度の方法しかなかった時と比べるとアルゴリズムの発見は様々な分野での発展に貢献してるんだなと思った。,,
C-2021-1_U30,,,,,マージソート、二分探索,,,
C-2021-1_U31,,,比較ソートはかなり効率の良い方法だが発見されたのが割と最近であるとわかった。,比較ソートの証明が分からなかった。,マージソートはまず数列を分割し、１つずつに分割した後要素を一つずつソートしていくことを繰り返していく方法。２分探索は見つけたい要素を、整列された数列の中から見つける方法で、数列の真ん中より先か後かに酔って絞り込んでいく方法。,検索の方法の最もオーソドックスなものが分かった。,,
C-2021-1_U32,,,マージソートも二分探索も半分に分けるというやり方が主体となっていたが、とても簡単でやりやすいと思った。やり方や比較回数の考え方もわかった。　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　,今回はすべて理解できた。,分割した数列の比較を再帰的に繰り返すソートをマージソートといい、比較回数は高々nlog(2)nである。また、整列された要素から半分ずつ探索するアルゴリズムを二分探索アルゴリズムといい、時間計算量はO(klogn)である。,とてもやりやすい二分探索がごく最近まで知られていなかったというのはとても驚いたし、同じようにまだ知られていないやりやすい探索法もあるのだろうと思った。他の探索法についても調べてみたいと思う。,,
C-2021-1_U33,,,線形探索より2分探索のほうがとてもはやいことが分かった。,,"マージソートは分割して1つの要素にした後統合（マージ）して整列する。
比較するソートアルゴリズムだとO（n log n）回比較する必要がある。比較回数は決定木の辺の数に等しい。
線形探索は左端から1つずつaを探していく方法。最悪の場合ｎ回比較しなければならない。
２分探索は2つに分け、あてはまる半分の方をまた2つにわけるのを繰り返す方法。探索の回数はlog₂ nを超えない。",計算量や比較回数など数式で表されるとよくわからなくなるので、なんでこの回数になるのか自分で求められるように理解したい。,,
C-2021-1_U35,,,マージソート、二分探索とは具体的にどういうことをするのかよく分かりました。,,マージソート、二分探索法について学習しました。マージソートでは分割のちマージすることがポイントだと思います。二分探索法では２つに分けて真ん中と比較というのが基本の考え方です。,今回のところはよく理解できたと思います。しかし、ここ数回学習してきたBの内容は少し難しかったです。特に、計算量の考察についてはまだあやふやな気がします。テスト前などにもう一度教科書をしっかりさらっておきたいです。,,
C-2021-1_U36,,,"・マージソート
　数列を分割していき、比較しながら統合
　比較数：n1+n2-1
　各段最大n回比較、段数は高々log2、よって比較回数は高々nlog2n
・比較ソートは必ずO(nlog2n)回の比較が必要
・線形探索：ソートされてない列の先頭から比較。最大ｎ回
　2分探索：真ん中の要素と比較していく。最大log2n→圧倒的に早い
・文字列でも辞書順をもとに2分探索計算量はklogn
・まず接尾辞を考える→辞書順にソート→2分探索
　計算量はklogn",,"・マージソートとは
・情報検索について：線形探索、2分探索
・文字列のソート
・テキスト検索","マージソート、2分探索は2進木などと比べると個人的には感覚的にわかりやすかったです。
log2がなぜでてくるのかここ数回少し引っかかってましたが数が2倍になったり1/2倍になったりが繰り返されるからですね。
いろいろなソートの最大の計算量が混ざりそうなのでせっかくなのでLGCでまとめておこうと思います。",,とくにありません
C-2021-1_U37,,,２分探索について、それぞれのステップで探索する範囲が１／２以下になる,logの計算,,まだ理解できていないところもあるので復習をしたい,,
C-2021-1_U38,,,,"マージソートの28ページで何の基準でa,b,cを分けているのか分からない。",,"自分的にはマージソートが1番わかりやすく、単純だと感じた。今までで1番効率的な2分探索が発見されたのが最近だということに驚いたし、これ以上に効率的なアイディアがまだありそうだと感じた。
",,
C-2021-1_U39,,,マージソートが再帰的であることを学びました。,2分探索アルゴリズムがいまいちピンときませんでした。よくわからないです。,,,,
C-2021-1_U40,,,,,,googleやYahooなどの検索の裏ではこのような緻密な計算があっているのだなあと感心した。,,
C-2021-1_U43,,,線形探索よりも二分探索のほうが効率がいいということ。,２の階乗ではないときのマージソートのやり方,マージソートと二分探索法について学んだ。,,,
C-2021-1_U44,,,"マージソートがどのようなものであるのか
二分探索について
それらの計算量",計算問題、計算量がなぜそうなるのか。,,,,
C-2021-1_U45,,,マージソートや線形探索、２分探索は理解できました。,公式の意味がよく理解できないです。覚えるものなのでしょうか。,"マージソートは２進木を使用しないのでよりシンプルにできる。
線形探索は効率的ではないので、Sの要素が整理されている２分探索を行う。",今日の授業は前回より少し理解が難しかったです。まだlogを使った公式がよくわかっていないので演習をしたいと思います。,,
C-2021-1_U46,,,,,2分探索やマージソートについて。,計算が出てきた途端にやる気がどっかに行ってしまうので、モチベーションを上げて授業に挑みたい。,,
C-2021-1_U47,,,線形探索よりも二分探索のほうが計算量が少なく圧倒的に早いことが分かった。,比較ソートアルゴリズムの比較回数があまりわからなかったので復習しようと思う。,要素比較によって順序を比較する方法だけではなく、二分探索法を使って順序を比較する方法があり、計算機科学の分野では道なことが多く存在する。,二分探索のアルゴリズム動作がまだ完璧には理解できていないので、復習しようと思いました。,,
C-2021-1_U48,,,単純ではあるが高性能な2分探索が実は最近発明されたと知って驚いた。まだ明らかになっているものが多くない計算機科学にはまだ無限の可能性が秘められていると分かった。,,マージソートとは複数個の列をマージ（統合）するときに、小さいものから先に並び替えることで、新しい列を整列させることができるアルゴリズムである。2分探索は単純で高速なアルゴリズムだが、すでに整列済である必要がある。,,,
C-2021-1_U49,,,"・既存の数列二つの先頭を比べて一つの数列に並べ替えていくながマージソート
・これまでのソートのオーダーはさほど変わらず、nlognかnの2乗
・二分探索法だと大幅に計算量を減らせる場合がある",・二分探索でコンピューターのプログラミングのような文字が出てきたときが分かりにくかった。,"・マージソート　二つの数列の先頭を比較し、新たな数列を作る
・最高比較回数　（二つの数列の要素の合計）-1
・全ての比較ソートは決定木を用いて表せる
・決定木の高さが最悪比較回数
・線形探索法（ある数列の中で特定の要素でなのか、そうでないのかを比較）
・二分探索法　あらからじめ整列された数列でxを見つけ出すときyとの大小関係を用いて見つけ出す",,,
C-2021-1_U50,,,マージソートの実行例をみながらより理解を深めることができた。比較ソートアルゴリズムは決定木で表すことができると知った。,,マージソート、二分探索法の手法を学び、アルゴリズムについての理解を深める。,二分探索は説明の途中で頭が混乱してついていけなくなったので、きちんと復習しておこうと思いました。今回までで代表的なアルゴリズムを一通り学習したので、それぞれへの理解をもっと深めていきたい。,,
C-2021-1_U51,,,二分探索の際に、数列が整列しているときとしていない時では比較回数にかなり大きな差が生じることが分かりました。,各アルゴリズムの最悪比較回数と、そのオーダー表記の値を全部は完ぺきに理解できなかったので、復習して理解しようと思います。,マージソートの仕方、要素を用いた各ソートの最悪比較回数の求め方、そして二分探索の条件による利便性を学びました。,"探索できることだけでも大きな功績だと思うのに、二分探索などの時間が大幅に削減される方法を生み出したことは本当に凄いと思いました。
この発展によって、複雑かつとても長い文字列の処理も短い時間ででき、あらゆることが解明されていく時代がくるのではないかと考えました。",,
C-2021-1_U52,,,マージソートは今まで出てきた他のソートに比べ効率が良い方法だということ,オーダー貴方がどういうものなのかがよくわかっていない,マージソートや二分探索法など効率の良い並び方について,ソートというのはnhkの番組で見たことあってそれがマージソートであったように記憶している。二分探索法やオーダー記法などよくわからない部分も出てきた,,
C-2021-1_U53,,,今日は前回と違ってソートが２種類しかなかったので理解できる部分が多かった。２分探索というものは初めて聞いたけど、こんなにシンプルなものが生まれるのが意外にも遅く、かえってこういうシンプルなものが開発には難しいのかなと感じた。,マージソートと違って、２分探索の時間計算量などでいままでにも多く出てきたlogがあったのでこんがらがりそうだと感じた。,マージソートとは入力数列をより小さい数列に分割して計算を行い、その後マージ（統合）することによって行われる計算方法である。線形探索とは順番に値を比較して、同じものを見つけるものであり、事前にある規定で並べられた数列の真ん中を基準として比べていくものが２部探索である。,前回から様々なソートを学習してきたが、このようなソートというものはどのように生まれてきたのだろうかと疑問に感じました。,,
C-2021-1_U54,,,,,,"今までのソートアルゴリズムはあまり馴染みがなかったが、今回の二分探索法は割と身近なアルゴリズムのように感じられて理解しやすかった。
",,
C-2021-1_U55,,,,,,"2分探索の手法を学んだ。機械的には優秀な方法なのだろうが人間からすると回りくどい手順を踏んでいるなと感じた。
長いテキストを分割して並び替えて、やっとそこからキーワードを検索するってなんか面倒。普通人間だったら上から読んでキーワードを探すはず。
人間の直感的手法と機械にとっての優秀な方法にギャップがあるのなら、よいアルゴリズムを考えるのって難しいんだろうなと思う。",,
C-2021-1_U56,,,２文探索はステップ数がlog₂nを超えない、効率的な作業であるということ。,logが出てくるたびに、なぜ表現にlogが登場するのか腑に落ちなくなってしまう。,マージソートは分割した要素の比較を繰り返すことで並べるもので、2文探索は２分木を利用して行うものである。,前回の復習を含め、ソートの内容やそれぞれのソートの比較について再確認することができた。,,
C-2021-1_U58,,,２分探索アルゴリズムをもとに、キーワード探索や接尾辞を用いたテキスト探索といった日常的なものに当てはめて理解することができた。,,,一見単純そうで容易に思いついてしまいそうな２分探索の歴史が、まだ３０年しかないということに驚きました。,,
C-2021-1_U59,,,,starlingの公式,,これまで習ってきたソートはどのように使われているんだろうと思っていたので、２分探査などの情報検索を用いてウェブ検索を行っていると聞いてなるほどとなりました。また、最近になって接頭辞探査が行われるようになったことにも驚きました。,,ありません
C-2021-1_U60,,,,,マージソートと二分探索法（あと線形法）の原理を勉強した。またそれぞれの計算量についても勉強した。,,,
C-2021-1_U61,,,"比較回数は必ず要素数より小さい。
文字列をソートするのは辞書式で行う。
","二分探索の場合、残り半分のなかで探すとき、次に比較する要素は決まっているのか。
接尾辞の説明がよく分からなかった。","マージソートとは、ある数列を二つに分割し並べ替えた後、それぞれの数列の先頭同士を比較し、小さい方を出力、統合する。マージ＝統合
線形探索とは、先頭から探したい要素xを探すことである。
二分探索法は、甲斐がある範囲をどんどん狭めていきながら探す方法で、効率が良い。","プログラミングっぽい部分があって、興味を持って学べた。
練習問題を定期的に解いて、テストに備えようと思った。",,
C-2021-1_U62,,,内容を図を通して理解できた。,,マージ(統合)ソートとは、すでに整列された２つの入力数列から先頭同士を比較して小さい方から選ぶことで進めていくソートである。また、2分探索とは、ソートされた数列・文字列に対して真ん中と標的を比較して適宜探索位置を絞り込みながら、探索する。そして真ん中との比較を再帰的に繰り返す探索方法である。,わかりやすかったです。,,
C-2021-1_U63,,,最悪時の比較回数はマージソートが今までの中で一番少ないという事実が間違いないのは比較回数が決定木の高さに等しく必ずnlogn回は確実だからということ。要素の比較を行わずソートをするという変わった２分探索をすることで最小単位を大きくし、計算量が抑えられることができるということがわかった。,,2分探索とマージソートの説明。マージソートは、２つの数列を先頭から比較して整列された１つの数列を生み出すアルゴリズム。最小限に分割されたところから何回か繰り返す必要がある。要素の比較には計算量に下限があることを改良して作られた２分探索はある要素とそのソートの真ん中と大小を比べ、それを繰り返す仕組み。比較回数とステップ数が少ないため、素朴にパターンを探索するより圧倒的に高速。,最近小テストの調子が悪く残念で今回は授業についていけたにも関わらずこのような結果となり落ち込んだ。次週から単元が変わるので切り替えて授業に臨みたい。また内容については仕組みは理解できるもののこのようなアルゴリズムを思いつくことに感心し、人間の凄さを実感した。,,
C-2021-1_U64,,,今までのソートの計算量、２分探索のやり方。,,2分探索について,ヒープソートなどに比べてかなり単純でわかりやすかった。,,
C-2021-1_U66,,,,計算方法そのものについては把握したものの概念的な部分の仕組みはいまいちピンとくるほど理解しきれませんでした。,,アルゴリズムがどうとか、方法論がどう、のような言語的な部分を把握しておく必要があります。,,
C-2021-1_U68,,,,,,今回の講義は大方理解できたと思う。二分検索のように、普段のインターネットにおける検索で活用されているの内容はイメージしやすく、興味深かった。,,
C-2021-1_U69,,,現在のインターネット技術にも使われている二分探索法について知ることができた。同じ単語を探すことなどは人間は深く考えずにできてしまうと思うが、それを理論的に見つけ出す方法として二分探索法があることを知り興味がわいた。,ソートに必要な比較回数がnlog2 nに比例して増えるというのがよく分からなかった。,,二分探索法は聞けば簡単に理解できることだが発見されたのがつい最近だと知って意外だった。もしかしたらもっと簡単で高速な計算があるのかもしれないと思った。,,ありません
C-2021-1_U71,,,マージソートと二分探索法のやり方を習得した．,特にありません．,"マージソート，二分探索法を学んだ．
マージソートは分割と比較して結合するという操作を再帰的に行うソートアルゴリズムである．
二分探索法は事前に情報をソートしておくことで，集合から検索するものを効率よく探すアルゴリズムであり，その応用は幅広い．
また，比較ソートの計算量の下限がO(nlog_2 n)であることを，決定木を用いて示した．","決定技を用いた証明が面白かったです．
また今まで習ってきたソートが二分探索法という形で身近に応用されている点に親近感が湧きました．
前回の質問にご回答下さり，ありがとうございました．",,
C-2021-1_U73,,,マージソートの比較回数が「高々」であるのは、分割した2つの数列のどちらか一方が先に空になった場合は、比較回数がｎ１＋n２－１よりも小さくなるからである。,,マージソートでは2つの数列に分割することで、1回の比較で必ず1つの値が得られる。2分探索では各ステップにおいて数列の大きさが半分になるので、特に大きい数列をソートするときに計算量が大幅に減る。,,,
C-2021-1_U74,,,マージソートによる整列、二分探索による検索ができるようになった。,計算量は少し小難しい感じ。,,今日の葉そこそこ分かりやすかった。,,
C-2021-1_U75,,,マージソートの方法と利点が分かった。複数のソート方法を知り、それらを比較して考えることができた。2分探索という処理を学んだことで、データを整列することの有用性が実感できた。,,"マージソートとは、入力数列を分割して、それらの大小を順に比較しマージ（統合）することによって、元の数列を整列した結果を得るアルゴリズム。2つの数列を先頭から順に比較し、小さいほうを新たな数列に格納する。２分木を使用しないので、ヒープソートよりもシンプル。
データを整列しておくことで、2分探索を行うことができる。2分探索とは、検索したいものと整列された要素の真ん中のものを比較する探索の方法。１回の操作で探索範囲が1/2になるため、端から順に比較する線形探索よりも処理が速い。",様々なソート方法を学んだうえで、ソートされた情報の具体的な活用法が分かり、操作の目的や意味が明らかになり興味深かった。,,
C-2021-1_U76,,,マージソートの実行の仕方や、２分探索が効率よく探索を行えることがわかった。,"マージソートの比較回数を求めるのが少しわかりにくかった
","マージソート、比較ソートアルゴリズム、２分探索アルゴリズム、
",数を順番通りに並び替えるだけでも様々な方法があり、それぞれによって効率が大きく変わってくることに驚いた。,,
C-2021-1_U77,,,実際にソートできるようになった。,最悪実行ケースがよく分からなかった。,マージソートや二分探索法について学んだ。,次回からも漏れなく学習していきたい。,,
C-2021-1_U78,,,マージ操作について,,,,,
C-2021-1_U79,,,,,マージソートとは入力された数列を分割、ソート、統合を再起的に繰り返すことで、数列を並べる手法である。また、ソートされた数列、文字列の中に亜ある言葉が含まれているかを探す方法にもいくつかの方法がある。例えば、線形探索というものは先頭から順々に比較していく探索方法であるが、これは数が大きくなるにつれて、時間がかかるようになる。その点二分探索法は比較する数が半分になっていくので、数が大きくなっても計算に時間があまりかからない。,,,
C-2021-1_U8,,,半分に分割してソートしたり探索したりすると、早い,,マージソートと、二分探索の重要ポイントは半分に分割して考えていること,,,
C-2021-1_U80,,,,,ソートの種類で、マージソートと二分探索、線形探索を学んだ。比較ソート以外に探索ソートがあると知り、こっちの方が情報的な処理だと思った。キーワード探索などは日常生活の中でも見かけるものなので実感が湧いた。,,,
C-2021-1_U81,,,二分深索は線形深索よりも少ない比較回数ですむので圧倒的に速い,比較ソートアルゴリズムの比較回数についてｎlog_2nに比例して増えるということがわかりずらかった,,最近になってシンプルな比較方法が生み出されたということにおどろいた。まだまだわかっていないだけでよりよい方法があるとおもうとわくわくした。,,
C-2021-1_U82,,,"・マージソートは２進木を使わないのでシンプル　・二つの数列を先頭から比較する　・比較することによって解が絞り込まれて、それを繰り返すことによって解が決まる
・要素を比較する順番＝アルゴリズム　・大量のデータから目的のものをとり出すことを情報検索という　・線形探索よりも２分探索の方がかなり速い",,"マージソートについて
線形探索や２分探索について
キーワード検索の仕組み",,,
C-2021-1_U83,,,,,マージソートとは２進木を使わず、２つの数値を比較しながら順番どおりにならびかえる手法である。,辞書引きのような探しかたが新鮮だった。,,
C-2021-1_U84,,,二分探索によるならびかえが効率が良いことが分かった。,,,ちゃんと理解することができた。,,
C-2021-1_U85,,,,,ソートするにあたって、二分木などよりも効率的な方法として、マージソートがある。マージソートは、要素を分割して、再帰的に行う。他よりも少ない計算量で行うことができる。二分探索ほうは、一つの要素と、すでにソートされた要素たちと比較して、特に文字列であれば接尾語を比較して検索をかける方法であり、効率がいい。,理論的な内容で、聞いてて面白かったです。単語の検索がどのように行われているのかがわかって楽しかったです。次回からまた内容がガラリと変わるようなので、今一度気合を入れて授業に臨みたいと思います。,,
C-2021-1_U86,,,マージの方がヒープよりもやりシンプル,線形探索法は分かったが二分探索法のアルゴリズムの計算がわからなかった,マージソートと二分探索法について,予習をしていたらもう少し理解が早かったと思う,,
C-2021-1_U87,,,２進木やヒープソートよりマージソートの方がシンプルで速くソートできる。普段使っているキーワード検索は２分探索を活用している。,,マージソートとは２進木を使用せず、分割できるところまで分割し続け、その後２つの数列をマージしていくことで元の数列がソートされる。端から順に調べる線形探索とは異なり、２分探索は半分のところから調べるため圧倒的に早く調べることができる。それを応用してキーワードの検索が行われる。,,,
C-2021-1_U88,,,,,"マージソート→数列AをA1とA2にわけそれぞれを整列した後、先頭から順に比較して統合していきAを整列する。
　　　　　　　比較回数‥高々log",いったんソートの学習が終了したので、もう一度整理して復習しようと思いました。,,
C-2021-1_U89,,,,,"・マージソート　
　二つの数列に分割しそれぞれをソートした後その二つの列をマージする。
　マージとはすでに整列された二つの入力数から、整列された一つの数列を出力する操作のこと。
・比較ソートアルゴリズムは決定木で表せる。つまり要素を比較する順番＝アルゴリズム
・入力数列Aに対するアルゴリズムの比較回数は、決定木の根から葉までの辺の数に等しい。
・アルゴリズムの最悪時の比較回数は決定木の高さに等しい。
・比較ソートアルゴリズムの比較回数は少なくともn!個の葉を持つ二進木の高さの最小値以上である。
・大量のデータから目的に合致したものを取り出すことを情報検索という。（ググる）
その中で二分探索というものがある。
・Sの要素が整理されていない場合
　先頭からxを探していく（線形探索）
・整理されている場合→P 12
",,,
C-2021-1_U9,,,上記と同じ,,,,,
C-2021-1_U90,,,マージソート、線形探索の方法が理解できた,なぜわざわざ二分木でマージソートするか,マージソートと探索のアルゴリズム,bが終了し、そろそろ理解が追いつかなくなってきた,,
C-2021-1_U91,,,二分探索法という方法で要素の位置を確定させることができるようになった,,二分探索法という要素の位置を確定させる方法について学んだ,二分探索法は内容は難しくないが普段気にしていないテクニックのように感じ少し楽しく感じた。,,
C-2021-1_U92,,,二分探索の計算が早いこと、マージソートの方法がわかった。,方法というかそれがどういうものなのかはわかったのですが、具体的な計算となると難しく感じてしまいます。,マージソートと二分探索の授業だった。,,,
C-2021-1_U93,,,二分探索は少しわかった気がしました。,マージソートが全体的によくわからなかったです。,マージソートと二分探索法について,授業を最初から最後までしっかり聞こうと思いました。,,
C-2021-1_U94,,,"マージソートと言う言葉は先週知ったけど意味はわからなかったが、どんな方法か今日理解できた。
線形探索はxが右にあるほど比較回数が多くなるが、２分探索を使えば効率よく行えることが分かった。",数字の２分探索は分かったが、テキストの２分探索が何をしているのかよくわからなかった。,,マージソートは図だけ見ると時間がかかりそうに見えるけど分割して並び替えることで最悪比較回数もそれほど大きくないことに驚いた。,,
C-2021-1_U95,,,,,"・マージソート　すでに整列された２つの入力数列から、整列された１つの数列を出力する操作。
・線形探索　要素が整列されていないため、先頭から順にxを探していく操作。
・２分探索　要素が整列されているため、真ん中の要素とxを比較して探していく操作。",,,
C-2021-1_U96,,,二分探索法の理解,マージソートの比較回数の理解,"マージソート：分割・トーナメント法
二分探索法：半分、半分と詰めていく
",teamsに入ることができずてこずってしまったので、次回からteamsには入れない時はすぐに再起動するようにします。,,B-09 p24に「各段の要素の比較回数の合計はnを超えない」とあったのですが、もっと小さく「n/2を超えない」と言ってもいいのではないかと思いました。n/2を超えることはありますか？
C-2021-1_U97,,,,,マージソート、線形探索、2分探索についての説明,,,
C-2021-1_U98,,,二分探索はとても便利な手法であるが、意外にも３０年ほど前まで発見されておらず線形探索が主流だったことがわかった。,ソート比較回数についての証明を理解するのが難しかったのでよく復習したい。,,"Googleの検索システムなども二分探索などでできていると思うといかに便利な手法なのかよくわかった。
比較する動きを目で追っていくととてっも理解しやすかった。",,
C-2021-1_U99,,,サイズが小さいときには計算時間も大した時間ではないので、重要なのはサイズが莫大になったときにいかに早く計算ができるかである。,"マージソート、２分探索について仕組みや計算方法が理解できた。
テキストの２分探索の理解がまだ足りないと思ったので再度復習したいと思う。",,２つの計算アルゴリズムについてよく理解することができました。,,
C-2021-2_U10,,,ヒープソートは他のソートと比べても、入力した整数が増えるほど比較回数を抑えることができることができ、nlog₂nになることが分かった。,,ソートについて、二本木ソートに続いてヒープソートややマージソートなどの仕組みを理解し、入力整数が増えるほど、二進木の素朴なソートよりもヒープソートが有利であることが分かった。,より複雑な要素比較の際に、より簡単に並べることができるよう様々な工夫がされたソートを知ることができて面白かったです。,,
C-2021-2_U100,,,前回と併せて5つのソートについて理解することができ、使い方を理解した上で、どのような場面で使うかも理解できた。また、ソートを行った後に要素の探索を行うことで2分探索をおこなえ、長さが1/2になることを理解した。,,ヒープとは、深さdの接点はちょうど2^d子存在し、どの接点の値も自分の親に格納された値以下であるという木である。それを用いたソートをヒープソートという。マージソートとは、数列をより小さな数列に分裂させ、整列の終わった数列同士をマージ(統合)することで整列結果を得るというものである。比較ベースのソートアルゴリズムは二つの要素の比較結果により、解の候補を絞っていき、決定木で表せる。要素を比較する順番がアルゴリズムである。大量のデータから目的に合致したものを取り出すことを情報検索という。整列されていない場合に先頭から探していく方法を線形探索といい、整列されている場合に真ん中の要素から比較していきながら探索する方法を2分探索という。,最初に全く疑問であったソートの仕組みが理解出来たことによって、普段あんまり考えずにやったりする作業をアルゴリズム的に説明すると難しい説明になっていたりしておもしろいと思った。,,
C-2021-2_U101,,,ヒープの作り方と出来上がったヒープから数値を並べる方法を理解することができた。また、マージソートの方法となぜサイズが１になるまで分割をするのかという理由をが分かった。練習問題も理解することができたと思う。,特にありません。,"ヒープとは節点数n、高さhの２進木のうち①深さd(0<=d<=h-1)の節点がちょうど2^d存在し、深さhの節点が左から順に存在し、②どの節点の値も自分の親に格納された値以下であるという２つの条件を満たすもののことをいう。常にヒープになるように２進木を作り、出来上がったものについて根を取り出して最後につけ足した数を根に持ってきてヒープになるように調整する操作を繰り返すことで数を順に並べることができる。ヒープソートの比較回数は入力サイズがnのとき3nlog_2(n)を超えず、計算量のオーダーはO(nlogn)となる。素朴な２進木のソートとヒープソートを比較すると入力が多いほどヒープソートの方が速い。
マージソートもヒープソートと同様に比較回数はO(nlogn)である。サイズが１になるまで分割をすることでソートをしたことと同じ状況を作り出してマージを繰り返すことで並べ替えが完了するという手法である。
比較ベースのアルゴリズムは必ずO(nlogn)回の比較を必要とする。比較ソートアルゴリズムは決定木で表すことができ、比較回数は決定木の根から葉までに通る辺の数に等しく、最悪時の比較回数は決定木の高さに等しい。また、比較ソートアルゴリズムの比較回数は少なくともn!個の葉を持つ２進木の高さの最小値以上となる。","今回の授業でも具体的な数列を用いてソートの手順が示されていたので、文字だけではよく分からなかったヒープの条件やマージのやり方について理解がしやすかった。前回は前日の夜までに何度か確認したものの講義資料にアクセスできない状況だったので、慌てて予習をする形になってしまい、理解が追い付かない部分があったが、今回は予習ができていたので授業内容がスムーズに頭に入った。比較をしないアルゴリズムについて興味を持ったので自分で調べてみようと思う。

前回は抽象的な質問と要望で失礼いたしました。補足のお話で理解ができました。ありがとうございました。",,
C-2021-2_U102,,,ヒープソートの比較回数が二進木のソートの比較回数を下回るのはn=38の時だとわかった。マージソートは数列を分割して、それぞれを整理してから統合する方法であることがわかった。,,今回の講義ではヒープソートやマージソートについて学んだ。最後に二分探索法も少し学んだ。,今回の講義ではヒープソートやマージソートのことを主に学んだがいかに計算量が少なく数列を昇順に並べ替えられるかを考えるのは面白いと感じました。二分探索法についてもしっかりと学んでいきたい。,,
C-2021-2_U103,,,ソート問題の解法へのアプローチには様々なものがあるが、今回扱ったヒープソートやマージソートは比較ベースのソートアルゴリズムの中では比較回数が少なく、また比較ベースのソートアルゴリズムの必要な比較回数のオーダーはｎlog₂nとなることが分かった。,,前回の講義に引き続きソート問題について、ヒープソートやマージソートなど様々な比較ベースのソートアルゴリズムについて触れ、その比較回数について学んだ。,今日も、様々なソート問題の解き方が知れて面白かった。次回以降から詳しく要素比較以外の方法について教えていただけるようなので楽しみにしています。最後に少しだけ触れた探索法は、日ごろよく使う検索エンジンの原理ということで、興味のある学習ができてうれしいです。,,
C-2021-2_U104,,,,まだオーダー表記に関して分かりはしたけれど理解はできていないと思った。,節点数ｎ、高さｈの2進木について、深さｄの節点が２^d個存在し、どの節点の値も自分の親に格納された値以下であるとき、その木をヒープという。また、すでに整列された2つの入力数列から整列された1つの数列を出力する操作をマージという。,どのようにすればより速くソートできるか、数学的に考えるのが楽しく、またその一方で難しいと感じました。,,
C-2021-2_U105,,,2進木を使わずに要素を比較するやり方が存在する。,ヒープソートがマージソートよりも優っているところはどこなのか疑問に思った。マージソートだけでよかったのではないかと思った。,ヒープソートとマージソートについて主に学んだ。2進木を使った例を解いた。2進木とは左の子を通り掛け順に進み、次に自分の値を読み、そして右の子を通り掛け順に読むというものである。ヒープソートのヒープとは節点数n、高さh、の2進木が深さdの節点はちょうど2^d個存在し深さhの節点は左から順に存在する、そして、どの節点の値も自分の親に格納された値以下であるという条件を満たす時の木のことである。2進木を使わず、よりシンプルなものがマージソートである。,,,
C-2021-2_U106,,,2進木を使ったソートの作り方やヒープソートのやり方について先週よりよく理解することができた。またマージソートの計算方法や比較ソートアルゴリズムおよび比較ソートアルゴリズムと2進木の関連について学ぶことができた。,マージソートを行った際に得られるメリットやどのような場面でマージソートが利用されいるのかがあまり想像することができなかった。,ヒープの条件、2進木を使ったソートとヒープの関連、ヒープソートの比較回数の上限や各ソートアルゴリズムの計算量の比較、マージソートアルゴリズムのやり方と比較回数、比較ソートアルゴリズム、線形探索について学びました。,2進木の性質や各計算アルゴリズムとの関係が面白かった。また授業で扱った計算アルゴリズムがO(nlogn)になっていることに驚いた。また線形探索はヨウ素を用いないという点が今までになかったので面白かった。,,
C-2021-2_U107,,,,,ヒープソートの仕組みと特徴、マージソートの仕組みと特徴、ソートにおいて比較回数を減らす方法や決定木の説明,"オーダー記法のイメージがつかめてきた。ヒープソートのように煩雑な手順でも、比較回数の効率の点から見ると理にかなっていることに感心した。
",,
C-2021-2_U108,,,要素をある基準に沿って小さいものから大きな要素の順で並べ替えることを「ヒープソート」という。特に深さdの節点が丁度2^d個あり左から順に存在し、どの節点の値も自分の親に格納された値以下であるとき、その２進木を「ヒープ」という。また、ヒープの条件２を満たさなければ適宜親と入れ替えてもよい。入力数列のサイズが n のとき、ヒープソートの比較階数は 3nlogn を超えない。アルゴリズムの計算量は O(nlogn)で表される。ちなみに、 正の定数 c を自由に変化させることで　O(cf(n))= O(f(n))　が成り立つことに気付いた。一方「マージソート」とは、２つの数列から整列した１つの数列を出力することで、２つの数列のサイズがそれぞれA、Bであったとき、その比較階数は高々 n[nlog₂n] （回）である。今までのソートを用いると、比較階数は結局  n[logn] 以上になる。,マージソートは、２本木を用いない点でヒープソートよりも簡潔であるはずなのに、どちらの場合でも計算量は最低でも n[nlogn] であるのはなぜなのか。,ヒープソートは２本木を用いながら数を比較していく一方、マージソートは、ヒープソートと同様に O(nlogn) の比較で、しかも２本木を使わないシンプルなアルゴリズムである。しかし、結局どちらもアルゴリズムの比較計算量は、少なくとも n[nlogn]よりも大きくなってしまう。具体例からその仕組みを紐解き、そのアルゴリズムの計算量を改めて数式を用いて調べた。,,,
C-2021-2_U109,,,ヒープソートのやり方、マージソートのやり方を理解することができた。,ヒープソートに関してやり方や計算量は分かったが、その前準備の説明がよく理解できなかった。,ヒープソート、マージソート,分からなかった部分は講義動画をもう一度見て復習したい。,,
C-2021-2_U11,,,"ヒープソート、マージソートのやり方
比較ベースのソートアルゴリズムは、O(n*logn)会の手順が必要だということ
",,"2進木を使った素朴なソートの欠点を除いたものがヒープソートだということ
ヒープソートとマージソートの手順、比較回数
比較ベースのソートアルゴリズムの比較回数に関する説明
",先週よりもオーダーが小さいソートを知れて、とても興味深い授業でした,,
C-2021-2_U110,,,今回は、ヒープソートとマージソートのおおよその手法については理解できました。,,今回学んだのはヒープソートとマージソートである。ヒープソートとは、入力文字列をヒープと呼ばれる上から順にぎちぎちに詰め子は親よりも小さいという条件を満たした二進木を生成し、二進木の根からソートしていくというものである。このとき二進木の高さは高々log2nであり各節の比較回数は３回であるから比較回数は高々3ｎlog2nであり、オーダーはnlognである。マージソートはすでに整列された二つの数列を比較し統合するもので、ある数列を分割し最小の数列にし再び統合しなおすというものである。このとき、比較回数は高々nlog2nであり、オーダーはnlognである。そして、このオーダーが比較を伴うソートの中で最小である。,,,
C-2021-2_U111,,,,,,個人的に、マージソートは今までのソートアルゴリズムに比べて理解しやすかったです。計算量はソートにおいてとても重要な要素であると改めて思いました。,,
C-2021-2_U112,,,二進木の仕組みについて復習を行い、理解することができた。ヒープソートの仕組みの基本と、マージソートの仕組みについて理解できた。マージソートが２つのすでに整列した数列を用いて、ソートしていく方法についてしっかりと学ぶことができた。,ヒープソートについて全体像はつかめたが、細かい箇所で理解できていない箇所があるのでその部分を重点的に復習したい。また、比較ソートアルゴリズムの比較回数について、具体的な例を用いてしっかり復習する必要があると感じた。,二進木の欠点は、入力数列の並び方で計算時間が変わることである。二進木について「深さｄの節点がちょうど2＾d個存在し、深さｈの節点が左から順に存在し、どの節点の値も自分の親に格納された値以下」であるときその木をヒープという。二進木の素朴なソートとヒープソートはどちらが速いか比較すると、途中からヒープソートが逆転し、入力整数の個数が大きい程、ヒープソートの方が速い。また、マージソートとは二進木を使用せず、数列をマージ（統合）することで整列させる。マージソートでは、比較する２つのもともとの数列はそれぞれ整列している。,ヒープソートは今まで学んだソートよりも少し複雑に感じた。マージソートは想像しやすく、比較的簡単に理解できたと思う。これまでの授業で様々なソートアルゴリズムについて学んだのでもう一度全体像を把握して、細かい知識やその方法などを復習していきたいと思う。また、比較ソートアルゴリズムの比較回数について詳しく学ぶと、難しいと感じたが、同時に興味を持つようになった。また、最後に情報選択について少し学んだが、馴染みのある内容だったので関心を持った。,,特にありません。
C-2021-2_U113,,,マージソートは、数列を分割し、並べ替えた後マージするソート方法である。,ヒープソートの第2ステージが分からなかったので手を動かしてやってみたいです。,ヒープソートとマージソートについての説明。,最初のほうはｎ＾2のほうが比較回数が少なかったですが、ｎが大きくなってくるにつれてヒープソートが逆転して少なくなったことが面白いと思いました。,,特にありません。
C-2021-2_U114,,,バブルソートや選択ソート、2進木ソートに比べてヒープソート、マージソートのほうが効率がいいことが分かりました。nlognのオーダーで表されるグラフがどのように描かれるのかよく想像できていなかったのですが講義内で説明してくださり、入力数列が長くなればなるほどその差は大きくなっていくことも分かりました。また、2進木における高さと入力数列の長さとの関係性も理解することができました。,特にありませんでした。,ヒープソートは、2進木ソートの入力数列の並び方で計算量が変わってしまうという欠点を改善したソートアルゴリズムである。ヒープを作るときは、節点が2^d（d:深さ）個並ぶように敷き詰め、親よりも子のほうが大きい値であれば親と子を入れ替えるという過程を繰り返す。ソートするときは、根を取り出し、最後につけた節点を根に格納し、親よりも子のほうが大きい値であれば親と子を入れ替えるという過程を繰り返す。ヒープソートの比較回数は3nlog₂nを超えないため、時間計算量はnlognのオーダーになる。マージソートとは、ある入力数列を分割して整列したあと大小を比較しながら統合するソートアルゴリズムである。サイズn₁、n₂の数列二つをマージするとき、高々n₁+n₂-1回の比較を行えばよい。さらに比較ベースのアルゴリズムはどんなものでも最低O(nlogn)回比較する。また、比較ソートアルゴリズムの最高比較回数は、決定木の高さに等しい。,ソートにも多くの種類のアルゴリズムがあることを知り、より短い時間で終わらせることができ、欠点をなくした新たなアルゴリズムを開発しようと励んできた変遷が垣間見えたように思います。まだ学問で言えば序の口だとは思いますが、この分野を少し身近に感じることができて嬉しいです。,,スライドで書かれているオーダーはすべてそのアルゴリズムにおける時間計算量のオーダーですか？比較回数のオーダーであることもありますか？
C-2021-2_U115,,,新しいアルゴリズムを理解できた,,"●軽いか重いかわからないコインの比較　●T（ｎ）は全部足す　●ヒープの作り方　●その計算量　●マージソート
",2進木からはじまりヒープソートを理解できた。マージソートも理解しやすく便利だと思った。次回からデータサイエンスに関わることを勉強できるということで楽しみです。,,
C-2021-2_U116,,,ｎ＝2^kかそうでないかでマージソートの実行の仕方が変わるのが分かった。,比較ソートアルゴリズムの比較回数(4)(5)の内容が理解できなかった。,一度二つに分割しそれを整列させた後に全部を整列しなおすというマージソートがある。分割（マージ）を複数回することでより簡略化できる。,すべてのソートが出てきてどれが一番良いのか気になった。,,
C-2021-2_U117,,,,ユークリッドの互除法でxとyの更新を繰り返すと必ず余りがxとよりも小さくなることはわかったが半分以下と言える理由が理解できなかった。,ヒープソートとあうアルゴリズムがある。これは2進木を使った素朴なソートの欠点を解消する。ヒープソートの比較回数は3nlog2nをこえない。そのため入力整数が多くなるほどヒープソートのほうが二進木の素朴なソートより速くなる。次にマージソートは既に整列された2つの入力数列から整列された1つの数列を出力するアルゴリズムである。マージソートの比較回数は高々nlog2n。,高校で習ったユークリッドの互除法がアルゴリズムとしてここで使われることを初めて知り勉強した意味を感じられた。,,特にありません。
C-2021-2_U118,,,マージソートのやり方が分かりました。,２進木の読み方がよく分かっていないので自分で読んでみようと思います。,完成した２進木は、節点の値を左の子、自分、右の子の順に通りがけ順に読む。読もうとした節点が子を持っていたらまず左の子を読む。節点数ｎ、高さｈの２進木が深さｄの節点がちょうど２のｄ乗個存在し、深さｈの節点は左から順に存在し、どの節点の値も自分の親に格納された値以下の木をヒープという。ヒープソートと同様の比較回数で２進木を使用しないマージソートも存在する。,,,
C-2021-2_U119,,,前回小テストで間違えていたところがなぜ間違ってしまっていたのかをちゃんと理解することができた。また前回の課題は友達と協力して手探りで行ったが、どのようにしたらよいのか理解できた。ヒープがどういうものかを理解できた。マージソートがどういうものかも理解できた。,,前回の小テスト・課題の補足説明とヒープソート・マージソートの仕組みついて学んだ。,今回の授業の最初に行われた前回の小テストの補足がすごく納得できるものだった。小テストをした際はなぜ間違えたのか理解できなかったが、日本語の違いによって試行の回数が変わることを理解でき、これ以降はそういうところにも気を付けていこうと思った。また、なぜヒープを用いるのかを理解できたので、ヒープソートというものを理解するのに、すごく役に立ったように感じた。今まで並んできた、バブルソート、選択ソート、ヒープソート、マージソートの違いをちゃんと覚えれていないので、ぐちゃぐちゃになってしまっているので、一回しっかり復習の時間をとろうと思った。,,
C-2021-2_U120,,,ヒープソート、マージソートのしかた。,マージソートにおいて、比較は最終的な2つの数列間でのみ行うという理解で良いのか。,ヒープソートは左から格納し、親＞子となるように格納する。マージソートは数列を1個単位に分解し、そこからマージを続け、2つのブロックにマージ出来たら、比較しながらマージする。決定木は一意に解が決まった二進木。,比較回数などがo(n log n)になることは分かったが、それに至る過程の理解が足りてないと思った。,,
C-2021-2_U121,,,ヒープソートとマージソートのアルゴリズムの概要や実行例についての説明を理解することができた。,比較ソートアルゴリズムの比較回数のところの説明が分からなかった。,,,,
C-2021-2_U122,,,"ヒープソートとマージソートの定義
素朴な２進木の欠点",,２進木は素朴なものだと欠点がある。２進木のなかでもある条件を満たしたヒープを使うと良い場合がある。さらに、ヒープと比較回数のオーダー表記が同じであるマージソートは２進木を使わないのでよりシンプルである。,"前回までのバブルソートや選択ソートよりは難しかったです。
",,
C-2021-2_U124,,,マージソートの実行についてできるようになった,,"ヒープソートについて
マージソートアルゴリズムについて
比較ソートアルゴリズムの比較回数",数列の理解は地味に難しいけど、今回もしっかり復習して身につけたいと思う。,,
C-2021-2_U125,,,"ヒープソートは２進木を使用したソートの方法であり、深さdの節点はちょうど2^dであり、どの節点の値も自分の親以下の値である。
マージソートは一つの数列を二つに分割し、それぞれ並べ替えてマージすることで並べ替える方法である。分割する場所は、真ん中が望ましく。奇数個の場合はq=[n/2]としたとき、A1＝[1…q] , A2=[q+1…n]に分割する。
これら二つのアルゴリズムはバブルソート、選択ソートよりも計算量が少なく効率が良い。",,ヒープソート、マージソートについて。ヒープソートは２進木を使用したアルゴリズムであり、マージソートは２進木を使用しないためよりシンプルなアルゴリズムである。二つとも計算量はO(nlogn)で表される。,今回は前回に引き続きソートのアルゴリズムについてだったが、前回よりも面白い仕組みの並べ替えアルゴリズムで楽しかった。あらゆる比較ベースのアルゴリズムは必ずO(nlogn)の比較を要するというのが印象に残った。ヒープソートは第１ステージと第２ステージがあり、マージソートはいったん分割してからまたマージするので、意外と面倒だと思った。,,
C-2021-2_U126,,,,,２進木ソートの、操作回数過多の可能性があるという欠点を克服するのがヒープソートである。個数が大きくなるほどヒープソートのほうが作業回数が少なく済む。ヒープソートと同様の操作で、２進木を使わないのがマージソートである。マージソートのアルゴリズムは、入力された要素をサイズ１まで分割し、その後比較して要素を並べ替えていく。,"前回の証明課題が理解できていなかったが、授業冒頭の解説を聞いて、ようやく少し理解することができた。あらゆる比較ベースのアルゴリズムは必ずO(n log n)回の比較を要する、ことが明らかになっているという話をきいて、興味深く思った。

",,特にありません。
C-2021-2_U127,,,前回学習したバブルソートや選択ソートよりも、ヒープソートやマージソートは、より機械的にソートを行うものだと感じられました。また、要素比較には、時間削減という観点では、どうしても限界があることがわかりました。,特にありません。,,,,
C-2021-2_U128,,,,最後の証明問題は少し難しかった。講義銅やスライドを見直して復習しようと思う。,,ソートの総まとめの授業で覚えることは増えましたが、とても面白かったと思います。来週から内容がまた少し変化するようなので頑張りたいと思います。,,
C-2021-2_U129,,,,,ソート問題として、ヒープソートとマージソートについて学んだ。ヒープソートとは、まず常にヒープになるように二進木を構成し、できた二進木の根から数を取り出して並べ、最後に追加した節点を削除して根に入れ、またヒープになるようにするという作業を繰り返していくものである。マージソートとは、まず分割を繰り返していき、それをマージしていくものである。,,,
C-2021-2_U13,,,比較ベースのソートアルゴリズムはどうやってもO(nlogn)より効率良くなり得ないことや、ヒープソート、マージソートをどのように行うのかがおおよそわかった。,3nlog2nをどのように導出したのかがよくわからなかった。,,,,
C-2021-2_U130,,,それぞれのソートの方法や、計算の効率の違いなどをオーダー記法や図から見ていったのでわかりやすかった。実際に自分でも手順を踏んで行なってみたい。,,様々なアルゴリズムの種類を学び、それぞれのやり方やオーダー記法についての計算の効率について学んだ。,様々なソートやアルゴリズムの方法について学んで、最初のころよりはなんとなくこの分野に関する理解が深まってきたように感じる。ただ、少し複雑だったところもあるので、しっかりと復習をしていきたい。,,
C-2021-2_U131,,,2本木のヒープソートの第一、第二それぞれのステージのやり方と、マージソートの仕組みをしっかりと理解することができた。,,,,,
C-2021-2_U132,,,マージソートの概念についてなんとなく理解できた。,マージの操作がよくわからなかった,マージソートとヒートソートについて学んだ,最近本当に難しい内容になってきた。,,特にありません
C-2021-2_U133,,,ヒープソートやマージソートの手法について理解できた。比較ベースのソートアルゴリズムに必要な比較回数の最低限があることが分かった。要素を比較する順番がアルゴリズムだといえると分かった。,ヒープソートやマージソートの比較回数のところでなぜlognがでてくるのがわからなかった。,ヒープソートやマージソートといった新たなソートの方法を学んだ。今までやってきたソートアルゴリズムのオーダーについて比較し、一番速い場合の必要回数について学んだ。,ソートの方法は予習や授業を通して理解できたが、比較回数のところでつまずいた。復習で理解できるように努めたい。回数を重ねるごとに、自分にとってわかりにくい内容になってきているので、できるだけ予習で理解できそうなところは、自分の力で頑張りたいと思った。高校まででは、習ってこなかった内容なので、情報科学の内容に新鮮さを感じた。特に、今やっているソートの話は初めて聞くことばかりでそれにとても当てはまる。,,ヒープソートやマージソートの比較回数のところでなぜlognがでてくるのでしょうか。
C-2021-2_U136,,,ヒープの条件が二つあること、それぞれの比較回数と計算量。,,ヒープソートとマージソートの定義と問題の解き方。,内容が難しいので復習を入念にしようと思いました。,,
C-2021-2_U137,,,ヒープソート、マージソートの手順を理解することができました。また、練習問題の解放も理解することができました。,二分探索法のしくみを理解することができなかったので、復習を通して次回までに理解しておきたいです。,ヒープソートは条件を厳しくすることで、比較回数を少なくした整列方法である。また、マージソートもあり、ヒープソートよりも比較回数を減らすことができる。また、二分探索法という方法も存在し、ネット検索などでも活用されている。,どんどん内容を理解するのんが難しくなっているなと思いました。身の回りで用いられているソートを勉強数ることができ、嬉しかったです。,,それぞれのソートがどの場面で用いられているのか気になりました。授業中に教えていただいたにも関わらず、聞き逃してしまっていたら申し訳ございません。
C-2021-2_U138,,,前回の課題について理解が深まった。,,,,,
C-2021-2_U139,,,,,,初めて聞くような概念ばかりだったが、しっかり理解することができたのでよかった。,,
C-2021-2_U14,,,,自分の手でやってみたときに慣れていないせいかヒープソートは時間がかかってしまったので、その効率性の高さがいまいち感じられなかった。,2進木を使った素朴なソートの欠点は入力数列の並び方で計算時間が変わる点である。2進木を使ったソートのうち、あるきまった２つの条件を満たしたとき、その木をヒープという。ヒープソートの時間計算量はO(nlogn)時間である。長い目で見たときヒープソートは最悪比較回数を少なくすることができる。ヒープソートと同じく、O(nlogn)回の比較で要素を整列するアルゴリズムであり、２進木を使用しないものでマージソートというものがある。,様々なソートを学習することで、自分でも何かを整列させたりするときに役に立つなと感じた。,,
C-2021-2_U140,,,ヒープソートの成立条件、マージソートの作り方,比較ソートアルゴリズムの比較回数,2進木の作り方、ヒープソートの作り方、マージソートの作り方と比較回数,選択ソートやバブルソートの内容がうろ覚えになっていたので復習しようと思う。,,
C-2021-2_U141,,,ヒープソート、マージソートの意味と使い方。,ソートの計算量と比較回数の計算。,ヒープソートとマージソートの仕組、計算量、使用方法と比較回数の説明。,ソートの運行の仕方と使い道、そして様々のソートの違いが理解できたが、計算量と比較回数は数学的な部分が多くてよく理解できませんでした。色々調べて頑張りたいと思います。,,
C-2021-2_U142,,,ヒープソートやマージソートは今日までの授業でやった他のソートと比べると比較回数は少なく済み、速いソートであるということが理解できた。また、ヒープソートとマージソートの比較方法も理解できた。,比較ソートアルゴリズムの比較回数のすらいどの特に(5)のところで話している部分があまり理解できなかった。,"最初は前回の課題についての説明があった。次に2進木を使ったソートの説明があった。2進木ソートの最初の説明は省略されていたが、欠点として入力の並びによって計算が変わるという点がある。既に並んでいる数列が比較回数が最も多く最悪なパターンである。この後、ヒープの説明に入った。ヒープでは一つ一つの深さが埋まってからしか次にいかない。ヒープソートではヒープを満たしているかのみを気にすればよい。2進木のソートとヒープソートでは量が増えれば増えるほどヒープソートの方が速い。
マージは、2つの数列から整列された1つの数列を出力する操作。マージソートも比較回数はヒープソートと同じで、速い。最後に少しソートが使われる例として、最たるものである検索について少し話があった。",ヒープソートやマージソートがなんのためにあるのか正直よく分かっていなかったのですが、今回の講義でその意味や比較回数を少なくすることの必要性が分かりました。最後にソートの最たる例として情報検索の話があり、今まで習ったものがようやく私たちが日常で使っているものに落とし込まれてきて、興味がわいてきました。,,
C-2021-2_U145,,,,O(nlogn)より効率がいいソートアルゴリズムの検討,,練習問題を解きなおして理解を深めたいと思います。,,
C-2021-2_U146,,,,,,前会の課題と内容がいまいち理解できていなかったが、序盤の話ですこしわかったきがして、安堵した。ヒープソートとマージソートについてはきちんと理解することができて良かった。,,
C-2021-2_U147,,,,,"ヒープソートとマージソートについて学んだ。節点数n､高さhの2進木が　1深さd (0≤d≦h -1)の節点はちょうど2のd乗個存在し、深さhの節点は左から順に存在する　2どの節点の値も自分の親に格納された値以下である　ことを満たす時、その木をヒープという。また、すでに整列された2つの入力数列から整列された1つの数列を出力する操作をマージという。
",少し集中できていませんでした。頑張ります。,,
C-2021-2_U148,,,ヒープソートやマージソートについて実際に行い理解することができた。,,ヒープソートはある条件を満たした２進木をヒープといい数字をヒープに従って書き、そのヒープの頂点から数字を抜き取ることでソートする方法をヒープソートという。このソートでは比較回数は 3n log2 nを超えない。マージソートは２つの整列された入力数列から整列された1つの数列を出力する操作であるマージを利用し、数字を分割して並び替えする方法である。この時の最悪時の比較回数はn log2 nである。,ソートを比較を行わずにする方法が思いつかないので次回の授業に興味がわいた。,,
C-2021-2_U149,,,練習問題２の１,,,,,
C-2021-2_U15,,,ヒープソート・マージソートの原理が理解できた。,,,,,
C-2021-2_U151,,,,分からなかったわけではなかったが、ヒープソートの操作が少し複雑に感じた。,,上記の通り、ヒープソートの操作に時間がかかった。次は全部一発で理解できるようにしっかりと集中して講義に臨みたい。,,
C-2021-2_U152,,,二進木についてわかった。,,,,,
C-2021-2_U153,,,各ソートのアルゴリズム、実行のやり方、高々の比較回数がなぜその回数になるのかなどを授業や練習問題を通して理解できました。,,ヒープソート、マージソート、比較ソートのアルゴリズム、実行例、高々の比較回数などについて学びました。,次回でソートの分野は終わりでデータ分析の内容に入っていくので、しっかりと今までの内容を復習して各ソートについてより理解を深めてから次の内容に臨みたいです。,,
C-2021-2_U154,,,,,,第６回の宿題がいまいちわからなくて前回の授業を完全に理解できていないまま授業に臨んでしまったけど前回の課題の説明を聞いて自分なりに理解することができたので良かったと思います。また、授業前に前回の授業のきちんと復習することもできたし、今回の授業の予習をして臨むこともできたのできちんと理解することができました。,,特にありません。
C-2021-2_U156,,,ヒープソートの二つのルールをどちらとも満たしている場合にのみヒープソートは成り立つ,マージソートの仕組みは理解できたものの、式になっている部分の理解がまだできていない,ヒープソートは数字の大きいものは二進木の上に移動する、マージソートはmerge（合併）という名の通り、分割して並べ替えてからそれぞれを合併して考える方法,講義ありがとうございました。,,⑶の通り、式の部分の仕組みについてもう一度説明してほしいです。
C-2021-2_U157,,,,ヒープソートのアルゴリズムなどが難しいとは思ったが何回か見ていたら分かった気がするので、分からなかったことは特にない。ソート問題の最速のオーダーの証明が難しかった。,,難しい部分も多かったが、大方理解できたのでよかったと思う。次回の内容は今までのことが関係するようなので、よく復習してから授業に臨もうと思う。,,
C-2021-2_U158,,,ヒープソート、マージソートの仕組み,計算量の導き方,ヒープソート、マージソート、情報検索,ソートはいままで知らず知らずのうちに使っていたんだなと思った。,,
C-2021-2_U159,,,"マージソートの概要、具体例の説明をきいて具体的なイメージが持てた

",,マージソートの概要、具体例の説明,今回の内容は比較的わかりやすかったです,,
C-2021-2_U16,,,,"ヒープソートやマージソートのオーダーやガウス記号がつくところの意味が理解できなかった
",,"ソートの方法には様々な種類があって、それぞれどのように動かしていくのかは理解できた
しかし、それが実際にどのような計算のもとで動いているかについては一回では理解できなかったので講義動画を理解できるまで見直そうとおもった。",,
C-2021-2_U160,,,"マージ すでに整列された2つの入力数列から、整列された1つの数列を出力する操作
ふたつの数列を先頭から順に比較し、小さい方を新たな配列に格納する。
マージ操作の比較回数
Ｎ１とN2とすると高々Ｎ１+N2-1回の比較を行えば良い。比較回数は高々n(log2n)
",,様々なソート方法があり、それぞれの数列に適した物をつかうべきである。マージソートは長い数列を2つに分け、それを別の方法でソートし、それをマージする。それを繰り返す。,マージソートは分かりやすくて画期的な方法だと思った。,,
C-2021-2_U162,,,,ヒープソート、マージソートをオーダー表記したときにlog2nにおける底の２がなくなる理由が良くわからなかった。,,ソートのやりかたについては理解できたのだが、それを計算式で一般化するときについていけなくなってしまった。,,
C-2021-2_U163,,,ヒープ、マージソートとは何か,それらの意味,"二進木：読み方：通りがけ順（節点の値を左、自分、右の順んで読む）、欠点：完成した数列の並び方に計算時間が依存し、膨大になることがある。
この二進木を利用したソートがヒープソート。すでに整列二つの数列から、一つの数列を出力する操作をマージといい、これを利用したソートをマージソートという。","最近どんどん難しくなってきているので頑張らなければならないと感じた
",,
C-2021-2_U164,,,,,ヒープソート・マージソートと各種ソートアルゴリズムの計算量比較,並び替えなんてどうやってもどうせ一緒の計算量になるだろうと勝手に思い込んでいたが、方法次第で大きく計算量が変わるというのは自分の中の常識を覆されて興味深かった。,,
C-2021-2_U167,,,,"・計算が多すぎて混乱した
・ヒートソートの第一ステージ、第2ステージというのが意味が分からない

",,"　前回までの授業に比べて「手を動かして」という説明？のされ方が多かったので理解度は低かった。予習でわからない部分が解消されていないのでもう一度復習したいと思う。
二分探索はサクサク進みすぎたので最初から説明してほしい。
",,"
・ヒートソートの第一ステージ、第2ステージというのが意味が分からない
"
C-2021-2_U168,,,ヒープソートやマージソート、2分探索のやり方が分かった。,,今日の授業では、ソートアルゴリズムのうち、ヒープソートとマージソートの操作の方法と、二分探索の方法を学んだ。,前回に引き続き、ソートアルゴリズムの内容で、計算を多くするので、分かりづらい部分もあるが、習得できたと思う。,,
C-2021-2_U17,,,それぞれのソートの実行の仕方はよくわかった。,比較回数を求めるということがまだ難しい。Oが出てくるとより難しいと思ってしまう。,"2進木を使ったソート、ヒープソート、この2つのソートではどちらが速いのか
マージソート（実行例、分割）、ソートのまとめ、比較ソートの比較回数",難しい点が多かったので、時間をかけて少しずつ復習しようと思う。,,これ以外のソートはあるのですか？
C-2021-2_U170,,,,オーダー表記による表し方,,ヒープソートとマージソートの違いを理解することができたので良かったです。,,
C-2021-2_U174,,,２進木を使用するヒープソートの方法とマージソートの方法が分かった。,,与えられた数字を昇順に並び替えるソート問題の新しい方法と数字の数ｎの大きさによってどの方法を用いるべきだろうか。,ソートするための新しい方法を知ることができました。ｎが２８以上になるとヒープソートの方が素朴なソートより速くなるのは、驚いたしすごいなと思いました。また、ヒープソート、マージソートよりも速く情報をソートすることが可能かどうかがすごい楽しみです。個人的には、可能であることを期待しています。,,
C-2021-2_U18,,,2つのソートの仕組みがわかりました。またオーダー記法が計算量の上限のようなものだということがわかりました。,オーダー記法のlogのところはよくわからなかったです。,ヒープソートは各階に含まれる数と親と子の数値の大小の2つの条件を加味しながら木の根のように順番を並べていくアルゴリズムである。マージソートは与えられた数値を2つの数列に分けてそれぞれから1つずつ抽出、比較し並べるアルゴリズムである。,昇順に並べるといっても様々な方法があり人間がやればどれも手間がかかるものばかりなのにコンピューターがやれば大きなちがいが出てくるということが面白いと感じました。,,
C-2021-2_U19,,,ヒープ、マージソートの仕組みを知った。,比較回数に関する計算を完全には理解できなかった。,ヒープソート、マージソート等効率のいいソートも存在する。,日記の記入を完全に忘れていたので次はもっと早く書きたい。,,
C-2021-2_U20,,,,,前回までのバブルソートやヒープソートを踏まえて、比較するアルゴリズムのマージソートなどについて学んだ。,,,スターリングの定理...名前だけは聴いたことある気がするが、何かよくわかっていない。
C-2021-2_U21,,,ヒープソートとマージソートの仕方を、説明を聞いたり実際に手を動かしたりして理解することができた。,,ヒープソートとマージソートについて、比較回数やそのオーダー表記を学んだ。,,,
C-2021-2_U23,,,,ヒープソートの比較回数が3nlognを超えないこと。,,,,
C-2021-2_U24,,,O(n log n)が要素比較の限界である,ヒープソートの一連の流れの把握が難しかった,ヒープソートとマージソート、要素比較の限界,式が複雑に見えて敬遠しそうになっていましたが、講義を聞いて納得できたので幸いでした。,,
C-2021-2_U25,,,2進木の欠点を補うヒープソートとその仕組み。,二分探索法について。,ヒープソートとマージソートの仕組み。,次回はすべての内容を一発で理解できるように予習をしっかりしたい。,,
C-2021-2_U26,,,要素の比較を行うアルゴリズムのうち、最も効率がよいのはヒープソートおよびマージソートであると理解できた。また、ヒープソートの手順についても理解することができた。,特にありません。,"2進木を使った素朴なソートでは、入力数列の並び方で計算時間が変わってしまう。そこで、ヒープと呼ばれる2進木を考える。ヒープは、節点数n、高さhの2進木のうち、
(1)深さd(0<=d<=h-1)の節点はちょうど2^d 個存在し、深さhの節点は左から順に存在する
(2)どの節点の値も、自分の親に格納された値以下である
という2つの条件を満たすものである。
ヒープを用いたヒープソートでは、入力数列のサイズがnのとき比較回数は3n*log2(n)を超えない。よって、ヒープソートのオーダーはO(n*log(n))である。つまり、nが大きくなるほど、2進木の素朴なソートよりもヒープソートのほうが比較回数が少なくなる。
また、マージソートは、ヒープソート同様O(n*log(n))回の比較で要素を整列するアルゴリズムであり、数列を分割→整列→統合する操作を再帰的に繰り返すものである。
ヒープソートおよびマージソートは、比較ベースのソートアルゴリズムの中で最速である。
",予習の段階ではヒープソートについてあまり理解できていなかったが、授業を聞き、実際に手を動かすことで理解することができた。次回の講義も集中して受講したい。,,特にありません。
C-2021-2_U27,,,,オーダー記法がいまいちわかっていない。,,ソートにはたくさんの種類があるというのが実感できよかった。,,
C-2021-2_U28,,,,,,,,特にありません。
C-2021-2_U29,,,"木がヒープとなる条件
速度においてO(nlogn)の有効性が分かった。
マージソートの仕組みはある程度理解できた
","ヒープソートの比較回数が3nlognを超えない理由があまりわからなかった。
全体的にlogがでてくる理由が分からなかった","２進木の読み方
ヒープ(節点など)
マージソートのアルゴリズム
二分探索の概要",要素の比較を行うソートで前回(マージソート・選択ソート)より難解なソートを学んで、logがでてくる箇所がよくわからなかったので復習して理解を深めていきたいです。次は二分探索について深く学んでいくので楽しみです。,,
C-2021-2_U3,,,ヒープソートの手法やマージソートの手法がわかり、並べ替えることができました。大量の数値を計算するためにはヒープソートやマージソートの方がバブルソートや選択ソートに比べても時間が少なく、効率が良く活用できることもわかりました。,計算式、範囲の部分はやはり、十分理解できたとはいえません。もっと前の授業の講義資料に戻るなどの対策を講じて基礎の部分から復習をしたいと思います。,"[ヒープソート]
２進木＝各接点が高々二つの子しか持たない根付き木のこと
小さければ左、大きければ右
通りがけ順：接点の値ちを（左の子、自分、右の子）の順に読む

欠点：入力の並びによって計算時間が変わってしまう。
　　　入力列のサイズnとすると、最悪の場合比較回数はn(n-1)/2となる
ヒープと呼べる条件
①深さd(0<=d<=h-1)の接点は２のd乗個存在し、深さhの節点は左から順に存在する
②どの節点の値も、自分の親に格納された値以下である。

ヒープソートの比較回数
入力数列のサイズがnの時、ヒープソートの比較回数は3Nlog2Nを超えない
ヒープソートの計算時間はO(nlogn)時間→大きな数字になればなるほど計算する時間が他のソートに比べて短くなる。

[マージソート]
O (nlogn）回の比較で要素を整列する
マージ：すでに整列された二つの入力数列から整列された一つの数列を出力する操作
＝二つの数列を先頭から順に比較し、小さい方を新たな配列に格納する。
マージ操作の比較回数
サイズn1の数列Aとサイズn2の数列Bをマージするためには高々n1+n2-1回比較を行えば良い。
マージソートの比較回数
入力数列のサイズをnとすると、
・マージソートの長さの総和は各段常にn
→各段の要素の比較回数の合計nを超えない
・マージソートの段数は高々log2N
→比較回数は高々Nlog2N

[比較ソートアルゴリズムの比較回数]
・二つの要素の比較結果によって解の候補を絞っていく。
・決定木で表せる。
→要素を比較する順番＝アルゴリズム
・入力数列Aに対するアルゴリズムの比較回数は決定木の根から葉（Aに対する解）までの辺の数に等しい
　最悪時の比較回数は決定木の高さに等しい。
　少なくともn個の葉を持つ２進木の高さの最小値以上
　nlognに比例して増える",自主学習の解説をしてくださったので、わかりやすく、疑問が解決できました。　ありがとうございました。,,ありません
C-2021-2_U30,,,ヒープソートの原理、マージソートの仕組み,数式の部分,2進木の発展系であるヒープソートとあらかじめ整列された列を使うマージソートを理解する,,,
C-2021-2_U31,,,"ヒープソートのアルゴリズムを理解できた。
マージソートが2進木を使わずにソートできるということが分かった。
比較ベースのソートでは必ずO(nlogn)回の比較を必要とするということが分かった。","なぜ比較ベースのソートでO(nlogn)より効率のよいアルゴリズムがないのかよく分からなかった。
マージソートの比較回数についてよく理解できなかった。","ヒープソート、マージソートのアルゴリズムを学習した。
比較ソートアルゴリズムは必ずO(nlogn)回の比較を必要とする。",前回より更に複雑なアルゴリズムが出てきて、理解するのが難しかった。,,
C-2021-2_U33,,,"親がでかいようにヒープソートを構成できるようになった。入力数列のサイズがｎのとき、ヒープソートの比較回数は3nlog2nを超えないことが分かった。
マージソートを使えばすでに整列された2つの入力数列から、整列された1つの数列を出力することができる。",,入力数列が３８を超えるとヒープソートの方が２進木の方より効率的になる。マージソートは２進木を使わないためよりシンプルなアルゴリズムである。,,,
C-2021-2_U34,,,ヒープソート、マージソートの仕組みを理解することができた。,,,,,
C-2021-2_U36,,,ヒープソートとマージソートのアルゴリズムを学んで、簡単な数列のソートや比較回数を実際に手を動かして身に着けることができた。要素の比較によって順序を決定するとどうしてもo(nlogn)の時間を要することが数値的にもイメージ的にも理解できた。,要素の比較を行う以外の方法で順序を決定するにはどうすればよいか思いつくことはできなかった。,ヒープソートは2進木を用いたアルゴリズムであり、まず常にヒープとなるように2進木を構成していき、完成したヒープから節点をひとつづつ削除しながら数を並べていく。ヒープソートはnlognのオーダーで計算することができ、nが大きくなっていった時に2進木の素朴なソートよりも比較回数が低くなり計算が速い。マージソートでは2進木を使用せず、数列を分割してその後マージするという操作を再帰的に行うことによって最終的に整列した数列を得る。マージソートもnlognのオーダーで計算でき、2進木を用いないのでシンプルである。,ヒープソートとマージソートのアルゴリズムが新たに学べて良かった。マージソートはかなりシンプルなアルゴリズムであり、理解するのに苦労はしなかった。,,
C-2021-2_U37,,,ヒープソートとマージソートについて知った,,ヒープソートとマージソート,講義をしっかり理解できたのでよかった,,
C-2021-2_U38,,,,30ページの説明で言いたいことはわかりましたが、式の理解ができませんでした。,,比較回数を考えるときに２進木の応用の決定木という考え方が新たに出てきて改めて２進木の大切さがわかった。,,
C-2021-2_U39,,,マージソートとヒープソートの整列方法とその時間複雑度について学び、比較ソートアルゴリズムの比較回数についても学びました。,ありません。,今日はヒープソートとマージソートについて学びました。ヒープというのは、節点数ｎ、高さhの２進木が、ある二つの条件を満たすとき、その木のことをいう。一つめの条件は、深さｄの節点はちょうど２のｄ乗個存在し、深さｈの節点は左から順に存在することである。これがどういうことかというと、２進木に数字を埋めていくときに、左から順に空いているところがないように埋めていくことである。２つ目の条件は、どの節点の値も、自分の親より小さいことである。ヒープソートの第一ステージは条件を満たしながら2進木を埋めることである。次に、第二ステージは第1ステージから完成したヒープから、節点を一つずつ削除しながら、数字を並べていくことである。例えば、あるヒープの最も上にある数を取り出し、最後の数字（一番下の右側）と入れ替える。ここで、ヒープの一番上にある数字は条件２により一番大きい。この操作を繰り返すことによってヒープソートができる。また、ヒープソートの比較回数は入力数列のサイズがｎであるとき、3nlog２のnを超えない。なぜなら、第1ステージでの親と比較するごとに一回、第２ステージで左右のこと比較するごとに２回であり、ｎ個の節点からなるヒープの高さは、Log2のｎを超えないためである（条件１による）。よって、ヒープの時間複雑度はO(ｎLogｎ）である。次に、マージソートはヒープソートと同様に時間複雑度がO(ｎLogｎ）である。また、マージソートは2進木を使わないのでよりシンプルであることが特徴である。マージの基本的な概念は、既に整列された２つの入力数列から、整列された一つの数列を出力である。つまり、２つの数列を先頭から比較して小さい方を選別していくことで、新しい数列を得ることである。また、マージソートの比較回数は高々（各数列のサイズを足してから１を引いたこと）つまり、A＋Bー１と言える。また、入力サイズが２のｎ乗の場合にはずっと２に割って行けばよいが、入力サイズが２のｎ乗ではない場合、ガウス記号を用いてそのサイズの半分より大きい最小の整数に分けて整列する。例えば、サイズが５の場合、その半分は２．５であり、２．５より大きい最小の整数は３であるため、3個と2個に分けると整列できる。また、マージソートの各段において分割された数列の長さの総和は常にｎであり、マージソートの段数は高々Log2のｎであるため、マージソートの比較回数は高々ｎ（Log2のｎ）である。また、あらゆる比較ソートのアルゴリズムは、必ずO（ｎＬｏｇｎ）回の比較を要する。,,,ありません。
C-2021-2_U40,,,マージソートがとても便利そうなのが分かった。比較ベースだとどうやってもnlognを下回れないことも分かった。,比較ベースのアルゴリズムだと結局どれが一番効果的なのかが良く分からない。比較回数の小ささだけが評価基準なのだろうかと悩んだ。,2進木を利用したヒープソートの説明があった。ヒープという木があり、条件を設けた2進木を行うことでより効率的なソートとなっている。2進木の欠点として、順番によって比較回数がバラバラであり計算時間が並び方依存であることが挙げられるがヒープソートではこれを補っている。また、マージソートも習った。どちらも比較回数が対数を用いた値で小さく抑えられている。これらの比較ベースのアルゴリズムは必ずO(nlogn)回の比較回数が必要であることも分かっている。,,,
C-2021-2_U41,,,ヒープソートは、前に学習したバブルソートや選択ソートなどや2進木を用いた素朴なソートよりもnが38を超えると効率的になり、nの数によって使い分けた方がいいことがわかりました。また、比較ソートベースのソートアルゴリズムはバブルソートや選択ソートに比べて時間計算量のオーダー表記が小さくなるということもわかりました。,ヒープソートの総合比較回数についての考察で、第1ステージにおいて全部でnー1回の比較になる理由がわかりませんでした。,"節点数ｎ、高さｈの2進木で、深さdの(0≦d≦hー1)節点はちょうど2のd乗個だけ存在し深さhの節点は左から順に存在する、かつ、どの節点の値も自分の親に格納された値以下である2進木をヒープという。入力数列の並び方で出来た2進木の深さが変わるのは不便なので深さを同じようにさせたくハープを導入した。ヒープを作る上で、以下の二つのステップをみたす。まず、一つ目のステップでは、どの節点の値も自分の親に格納された値以下になるように、左から右の順番で子を追加し、もし条件に合わないときには親と子を入れ替え条件を満たすまでそれを続ける。第2ステップでは、第1ステップで完成したヒープから、節点を一つずつ削除しながら数を並べていく。まず、根から数を取り出して並べ、最後に追加した節点を削除しその節点の数を根に格納する。ここで、子の値の方が根の値よりも大きければ、右の子と左の子のうち大きい方と根の値を交換し、親の値と子の値の大小関係が満たされるまで入れ替え続ける。ヒープソートにおいて、入力数列のサイズがnのとき、比較回数は2nlog(2)n+nlog(2)nより3nlog(2)nを超えない。(ここで(2)は底を示す)。そしてヒープソートの計算量は、O(nlogn)時間となる。なお、バブルソートや選択ソートなどの2進木を用いた素朴なソートとヒープソートの最悪比較回数を比較すると、n=38でヒープソートの方が少なくなり優勢になることがわかる。
ヒープソートよりシンプル(2進木をつかわないので)で、ヒープソートと同様にO(nlogn)の比較で要素を整列するアルゴリズムであるマージソートというものがある。マージソートは、入力数列Aをより小さな数列A1とA2に分割し、整列が終わったらa1とA2をマージ(統合)することによって、Aを整列した結果を得る。マージとは、すでに整列された２つの入力整列から整列された1つの整列を出力する操作であり、２つの数列を先頭から順に比較し小さい方を新たな配列に格納することで整列する。サイズn1とサイズn2の数列をマージするとき、高々n1+n2ー1回の比較を行えば良い。要素比較を1回行うと必ず1つの要素が出力され、また、最終的に出力される数列のサイズはn1+n2であり、最後に残った要素は比較相手がいないからである。ちなみに、２つの数列において値が小さい方から交互に現れるとき比較回数は(n1+n2ー1)回となる。マージソートのやり方は、入力数列を2つの整列に分割しそれぞれをソートした後ソート後の二つの列をマージするということを再帰的に繰り返すということである。なお、マージソートにおいてはサイズnの数列をA[1...q]とA[q+1...n]に分割する。ここで、q=[n/2]とする。このとき、マージソートの各段において分割された数列の長さの総和は常にnであり各段の要素の比較回数の合計はnを超えない、かつ、マージソートの段数は高々[log(2)n]であるので、マージソートの比較回数は高々n[log(2)n]となる。実はあらゆる比較ベースのソートアルゴリズムは必ずO(nlogn)回の比較を要する。ソートしていく2進木を決定木といい、比較ソートアルゴリズムは決定木で表せる。ここで、比較ソートアルゴリズムの比較回数は少なくともn！の葉を持つ2進木の高さの最小値以上である。決定木の高さのさをhとすると、この葉の数は高々2のh乗なので、(2のh乗)>n!が成り立ち、これを変形すると、4≦nならばh>(1/2)nlog(2)nとなり、ソートに必要な比較回数はnlog(2)nに比例して増えるということが分かる。ちなみに、比較ソートアルゴリズムの性質は比較のおかげで解の候補を絞り込むということにある。
大量のデータから目的に合致したものを取り出すことを情報検索という。情報検索を高速に行う方法のひとつとして、データをあらかじめソートしてから2番探索を行う方法がある。
整数が集合に含まれるかを調べたいので(整数の探索問題)、入力を整数集合S、整数xとし、出力をSにxが含まれているならyes、Sにxが含まれていないならnoとして考える(整数の探索問題)。Sが整列していないとき、先頭(左端)からxを探していき(線形探索)、最悪の場合n回の要素比較をしなければならず、線形探索の時間計算量はO(n)となる。これは計算量が多すぎるので、以下のやり方でxを探していく。(2分探索)
Sが整列されているとき、真ん中の要素yとxを比較してyがxより大きいときyより前半部分、xよりyが小さいときyより後半部分でまた真ん中の値と比較し、y=xになるまで繰り返す。",いまいち納得していない箇所(黄色いマーカーをひいている所)がまだあるので復習してちゃんと分かるようになっておこうと思いました。,,特にありません。
C-2021-2_U42,,,ヒープソートの比較回数は入力数列のサイズがｎのとき、ヒープソートの比較回数は３ｎlog2(n)を超えず、ｎ個の節点からなるヒープの高さはlog2(n)を超えない。マージソートはすでに整列された二つの入力数列から整列された一つの数列を出力する操作である。サイズn1の数列Aとサイズn2の数列Bをマージするためには高々n1+n2-1回の操作を行えばよい。,,"ソートの種類にはバブルソート、選択ソートのほかにもヒープソート、マージソートがあり、核ソートアルゴリズムの計算量はそれぞれO(n log n),O(n^2)で表される。",前回に引き続き、コンピューターが行っているソートについて知ることができて面白かった。様々なアルゴリズムが存在することが分かったので、どういう状況でどのソートを用いればよいのかを自分でも判断できるようにしたい。,,
C-2021-2_U43,,,ヒープソート、マージソートについて知ることができた。要素を比較する方法であると、計算量は必ずO(nlogn)となることが分かった。,,"二進木を使ったソートの欠点として、入力数列の並び方で計算時間が変わることが挙げられる。節点数ｎ、高さｈの二進木が１．深さｄの節点はちょうど2^d個存在し、深さｈの節点は左から順に存在する　２．どの節点の値も自分の親に格納された値以下である　の二つの条件を満たすとき、その木をヒープという。この条件を満たすように第一ステージ、第二ステージを踏んで行うソートをヒープソートと呼ぶ。ヒープソートの比較回数は3nlog2nを超えることはなく、計算量はO(nlogn)となり、n=38以上で素朴なソートよりも早く計算できるようになることがわかる。
マージとはすでに整列された二つの入力数列から整列された一つの数列を出力する操作のことをいい、計算量はやはりO(nlogn)となる。
よって要素の比較によって並べ替えをおこなうと、必ずO(nlogn)かかることになる。",ヒープソートのやり方が難しそうだった。自分の手でできるようになりたいとおもった。,,
C-2021-2_U44,,,,説明を聞くとヒープソートよりも2進木ソートのほうが手順が少なく簡単なように感じてしまうので、莫大な数になった時に実際にヒープソートのほうが早く計算を終えられるのか疑問が残った。,ヒープとなる条件を満たした2進木を利用して数の並び替えを行うことをヒープソートという。入力する数の量が増えるほど、単なる２進木ソートよりもヒープソートを用いるほうが計算時間が短縮される。２つの整列された入力数列から１つの整列された数列を出力することをマージソートという。マージソートは2進木を使わないため、ヒープソートよりも単純と言える。,並び替えの方法にも、ヒープソートやマージソートなど様々なやり方があって面白かった。,,
C-2021-2_U46,,,,,,人間が作業としてやる分には面倒に感じるが、コンピュータにとっては効率的な方法であるソートがとても面白かった。,,
C-2021-2_U48,,,ヒープソートが何なのかが分かった。また、マージソートが何なのかも分かった。最悪計算量はヒープソートとマージソートでは同じだが、マージソートの方が簡単なソートの仕方だと分かった。入力が長いものはヒープソート、マージソートを使った方が効率が良く、短いものは素朴なソートまたはバブルソートや選択ソートを使った方が効率が良いことが分かった。,,ヒープソートとは簡単に説明すると、2進木を上から埋めていき、子が親よりも大きくならないようにしたもののことを言う。ヒープソートの計算量はオーダー記法で表すと、バブルソートと選択ソートよりも入力が長い場合、速く計算できる。マージソートは2進木を使わないのでよりシンプルである。マージソートは数列を分割していき、その後マージしていくというものである。マージソートはオーダー記法で表すと、ヒープソートと同じである。比較ソートアルゴリズムはO(nlog n)より速くするアルゴリズムはない。 ,少し実際にどんなことでソートが使われているかが分かったので良かった。次回は検索の話だと思うので実際のソートの使われ方を知ることが出来ると思うので楽しみ。,,
C-2021-2_U5,,,二分探索法を仕組みを理解し、実践できた。,ヒープソートやマージソートに出てくるシグマの計算の仕組み。,アルゴリズムには多くの種類があり、ヒープ構造と呼ばれる二分木の一種を構築して並べ替えを行うヒープソートや、端から順番に隣接する要素同士を比較・交換していくバブルソート、データ列を細かく分割し、整列しながら次第に併合していくマージソフトなどがある。,一見すると難しそうなアルゴリズムがたくさん出てきたが、それらの目的は理解できたのでよかった。二分探索法は図書館の本棚から任意の本を探し出すのに応用できるらしいので実践したい。,,
C-2021-2_U50,,,,特にありません。,,,,
C-2021-2_U51,,,ヒープソートの並べ方、取り出し方がわかった。,要素の比較を用いずに並べる方法が見当もつかなかった,"ヒープソート、マージソートについて知る
",図示されて説明されているのでわかりやすかった。,,
C-2021-2_U53,,,ヒープソートを作る際、親と入れ替えて条件を満たすようにする操作が、以前学習した、バブルソートに似ているなと思い、全部学習してことがつながっていることを実感できて面白かったです。マージソートはとてもシンプルで、理解しやすかったです。,2進木を使ったソートの例が、見たら分かりますが、自分で作るとなったときに、何度やっても良くわからない部分があり、難しかったです。,今日は、2進木を使ったソート、ヒープソート、マージソートなどについて学びました。新たなアルゴリズムを学ぶことが出来ました。,今日の授業も、アルゴリズムを学びました。この頃やっと、アルゴリズムに慣れてきた気がします。しかし、今回習った、ヒープソートは少し理解に苦しみました。次回までに分かるようになっておきたいなと思いました。,,比較階数のとき、良く対数logを目にするのですが、なぜlogがこんなにもソートと関係性が深いのか不思議です。理由などがあったりするのでしょうか。
C-2021-2_U54,,,レポート課題はあまりできなかったが、解説を聞いたら分かった。ヒープソートのやり方、特に条件２に合わないときのやり方が分かった。,比較回数でなぜlogが出てくるのかよく分からなかった。,ヒープソートでは、最後の数字が比較できないので、比較回数が減る。マージソートでは、すでにソートしてあるので、マージするだけでよい。アルゴリズムの最悪時の比較回数は、決定木の高さに等しい。,前回小テストを間違えて悔しかったのですが、今回は満点をとれたので次回も頑張りたいです。前回と合わせてソートアルゴリズムを何種類も学んだので、それぞれのやり方や比較回数、オーダーをしっかり復習しようと思います。だんだん授業の内容が難しくなってきたので、予習・復習を今まで以上にしっかりしようと思いました。,,
C-2021-2_U55,,,ヒープソートとマージソートの定義、そのやり方を知ることができた。,やり方をまだ覚えられていないので復習したい。,アルゴリズムのなかには二進木を使ったソートがある。そのソートは通りがけ順に読むが、入力数列の並び方で計算時間が変わる。また、2進木を使ったソートの中で節点数n、高さhの2進木が深さdの節点はちょうど2^d個存在し、深さhの節点は左から順に存在する、どの節点の値も、自分の親の値に格納された値以下であるという二つの条件を満たす木をヒープという。マージソートはすでに整列された2つの入力数列から整列された1つの数列を出力する操作をするソートである。,ヒープソートとマージソートのやり方を知ることができたので、それを実際に自分でやってみて、使えるように手を動かして練習したい。,,
C-2021-2_U56,,,前回分かってなかった、2進木やヒープソートの仕組みについて知ることができた。,,2進木とは各節点が高々2つの子しか持たない根つき木のことである。通りがけ順とは節点の値を左の子、自分、右の子の順に読むことである。読もうとした節点が子を持っていたら、まず左の子を通りがけ順に読み、次に自分の値を読み、そして右の子を通りがけ順に読む。2進木を使った素朴なソートの欠点は、入力数列の並び方で計算時間が変わることである。入力する列のサイズがｎのとき、ヒープソートの比較回数は3log₂nを超えない。マージソートアルゴリズムは2進木を使用しないので、よりシンプルになる。マージとはすでに整列された2つの入力数列から、整列された1つの数列を出力する操作である。サイズn₁の数列Ａとサイズn₂野数列Ｂをマージするためには、高々n₁＋n₂ー1回の比較を行えば良い。マージソートの比較回数は入力数列のサイズをnとすると、マージソートの各段において、分割された数列の長さの総和は常にｎで、各段の要素の比較回数の合計はｎを超えない。マージソートの段数は高々log₂n、よって、マージソートの比較回数は高々nlog₂nである。比較ベースのソートアルゴリズムは2つの要素の比較結果によって、下位の候補を絞っていくので、あらゆる比較ベースのソートアルゴリズムは、必ずＯ(nlogn)回の比較を要する。情報検索を高速に行う方法の一つとして、データをあらかじめソートしてから2分探索を行う方法がある。ｓの要素が整列されていない場合、先頭からｘを探していくことを線形探索という。,,,
C-2021-2_U57,,,ヒープソートとマージソートの学習で、２進木を利用するヒープソートに比べてそれを利用しないマージソートという対比を理解することができた。また最悪時の比較回数もマージソートの方が優性であるということも理解した。,帰今回の講義を聞いているとヒープソートがマージソートに勝っている点がないように聞こえた。ヒープソートの優れている点がどこなのかわからなかった。,今日の講義では主にヒープソートとマージソートについての学習を行った。これらはどちらもO(n log n)回の比較で要素を整列するアルゴリズムでヒープソートが２進木を利用するのに対し、マージソートはそれを利用しないので、よりシンプルである。,今までは何となく知っている内容がぽつりぽつりとあったがいよいよ初見のものだらけになってきた。予習はしているがそれだけでは把握しきれない箇所も出てきたので復習もしっかりしていきたいと思った。,,
C-2021-2_U58,,,"オーダー記法の使われ方、基本的な考え方がわかった。
ソートの具体的な使われ方がわかった。",ヒープの定義がわかりにくかった。,"ヒープソートは二進木を用いるが、並び方によって計算時間が変化する。
マージとはすでに整列された２つの数列の先頭の大小を比較して１つの数列に整列しなおすこと。
ソートは検索エンジンに用いられており、二分探索法が使われている。","ソートは意外に身近な所で使われているのだなと思った。
",,
C-2021-2_U59,,,,,,バブルソートは聞いたことがあったが、ヒープソートやマージソートは聞いたことがなかったので、新たなアルゴリズムについて知ることができた。,,
C-2021-2_U6,,,なぜ一つの方法だけを使ってのソートをしていないのかが分かった。使う用途やデータ数に合わせてソートを考えて使うことの重要性を理解できた。,比較ソートアルゴリズムの比較回数の説明のところが複雑でいまいち理解できなかった。,２進木のソートでは小さいものを左に大きいものを右において並べるため、ものによって比較回数が大きく異なる。ヒープソートはとりあえず大きい順になるように並び替えながら２進木を作り並べるため、比較回数がある程度決まっており最大の回数が増えすぎない。マージソートはプログラムがシンプルかつ比較回数が大きくなりすぎないため便利である。,授業中は理解できずにおいてかれてしまったが、授業動画を見返して何とか理解することが出来た。予習時点で難しそうなところのめぼしをつけておきたい。,,
C-2021-2_U60,,,ヒープソート、マージソートの内容理解,ヒープソート、マージソートの比較回数の計算,"2進木を用いて、親よりも小さい値を親よりも左の節点に、大きい値を親よりも右の節点に置いていき、通りがけ順に読むことでソートを行うことが出来る。
しかし、単純に2進木を用いても、入力数列の並び方によって計算時間は変わるものの、ヒープと呼ばれる木を用いることで計算時間の短縮を図ることが出来る。
ヒープとは一番深い葉の節点が左から順に存在し、それ以外の深さdの葉の節点が2^dである、子の値が常に親の値以下の木のことである。
それを踏まえて、常にヒープになるよう、2進木の節点を交換していき、最後の数を根と入れ替えながらソートする方法をヒープソートと呼ぶ。
前者の方法と後者の方法では、入力数列の項数が多ければ多いほど、後者の方が計算時間が短くなる。
また、入力数列をそれぞれ1つの要素に分割した後、それらをマージ(既に整列された2つの数列から整列された1つの数列を出力すること)するソート方法をマージソートと呼ぶ。
マージソートはヒープソートと同じく、O(nlogn)回の比較でソートできる方法だが、ヒープソートのように2進木を使わない分シンプルである。
ちなみに、比較によるソートアルゴリズムは必ずO(nlogn)回の比較を要し、マージソートとヒープソートは比較によるソートアルゴリズムの中で最も効率的だと言える。",再び日誌を書くのが遅れてしまった。出来る限り授業があった日のうちに日誌を書くよう心掛けたい。,,
C-2021-2_U63,,,,,,新しいソートの種類を学ぶたびに簡略化のための努力が見えて少し感動する。,,
C-2021-2_U64,,,２進木を使ったソートについてある程度理解することができた。また、マージとは、すでに整列された2つの入力数列から整列された1つの数列を出力する操作であることを学んだ。ヒープソートもマージソートも比較回数は同じであるが、マージソートはヒープソートに比べて2進木を使用しないので、よりシンプルであることがわかった。,それぞれのソートの比較回数や計算量についての理解が深く図れていないことに今回の授業で気づいた。マージソートアルゴリズムについてなんとなく理解できたが一般論となると、式が難しいと感じた。,今回の授業では、ヒープソートとマージソートについて学んだ。また、それぞれの比較回数についても学んだ。また、マージソートアルゴリズムのやり方について学んだ。最後に、今まで学んだ、バブルソート、選択ソート、２進木を用いたソート、ヒープソート、マージソートの最悪時の比較回数と比較回数のオーダー表記について学んだ。,前回のバブルソート、ヒープソートに加えて、ヒープソートの詳しい内容やマージソートについて学んだが、まだそれぞれをうまく判別できるほどの理解に達していないので、復習をしてそれぞれの計算量や比較回数まで区別できるようにしたい。,,特にありません。
C-2021-2_U65,,,,特にありません,"二進木＝各節点が高々２つの子しか持たない根つき木
↑は、節点の値を左、自分、右の順に読む（通りがけ順）→左優先
入力数列の並び方で計算時間が変わる

ヒープ＝左の方から分かれている部分が多くて、下ほど数値が小さい

入力数列のサイズがｎのとき、ヒープソートの比較階数は３ｎlog＾２ｎを超えない
・親と比較する→一回
・左右を比較する→２回
ｎこの節点からなるヒープの高さはlog₂nを超えない
ヒープソートｎlogｎ時間
２進木ソートｎ＾２時間
バブルソート、選択ソートｎ＾２時間


マージソートアルゴリズム
＝ヒープソートと同様にｎlogn回の比較で要素を整列するアルゴリズム
マージ＝すでに整列された２つの入力数列から、整列された一つの数列を出力する操作

サイズｎの数列とサイズｍの数列をマージするためには高々ｎ＋ｍー１の比較を行えばよい
入力すーれつのサイズをｎとすると、マージs－トの格段において分割された数列の長さの総和は常にｎ→格段の要素の比較回数の合計はｎを超えない
マージソートの段数は高々log₂ｎ→比較階数はｎ(log₂ｎ)
※オーダー表記ｎlogn

比較ベースのソートアルゴリズムは、２つの要素のひっかう結果によって会の候補を絞っていくので、必ずＯ（ｎlogn）回の比較を要する
要素をひっかうする順番＝アルゴリズム
最悪時の比較回数＝決定木の高さ

大量のデータから目的に合致したものを取り出すこと＝情報検索
",図が丁寧でわかりやすかった。,,
C-2021-2_U66,,,ヒープソートとマージソートのアルゴリズムや計算量について理解できた。,比較ソートアルゴリズムの比較回数のところが後半理解できなかった。,ヒープソート、マージソートのアルゴリズムについて。　　　（二分探索法）,ヒープソートは少し複雑ですが、手順に従えばソートすることができると思いました。,,
C-2021-2_U67,,,,,2進木を利用したヒープソフトというものがあり、2進木には入力される数字の順番によまｔり計算時間が変わるという欠点がある。ヒープと呼ばれるものには2つの条件があり、それら2つでヒープソートとなっている。また、素朴な2進木のソープとヒートソープを比較すると、ある数からヒートソープのほうが効率よくなる。また、マージソートというものがあり、マージというのはすでに整列された2つの入力数列から一つの数列を作るというものです。また、二分探索という方法もあります。,,,
C-2021-2_U68,,,整数の個数nによって、どのソートが早いかが異なるということがわかった。今回の例では、nが小さい時、2進木の素朴なソートのほうが優れていて、nが大きい時はヒープソートのほうが優れている。,特にありません。,整数の並び替えでは、素朴な2進木の場合、最大n(n-1)/2回の比較回数になる。しかし、ヒープソートを用いた場合3nlog2(n)回ででき、nが大きくなるとヒープソートの方が試行回数が少なくなる。,前回ならったバブルソート、選択ソート以外にも色々なアルゴリズムがあることが知れて面白かった。,,特にありません。
C-2021-2_U70,,,今日の内容では、前回学習した２つのソートの方法に加えて、新たにマージソートという手法を用いて数列をソートすることができた。また、自力で比較回数を求めることができた。,比較ソートの比較回数を求めるところで、決定技の高さから比較回数がnlognに比例するという説明がよくわからなかった。,今回の内容は前回のソートの続きで、マージソートについて学習した。マージソートとは２つの入力された整列された数列に対して、それぞれの先頭の要素を比較して小さい方を抜き出すという作業を繰り返すことによってソートしていくというものである。また、これを利用して、１つ以上の整列された入力数列を各要素が２つになるまで分割を繰り返し、その小さい方の塊から順にマージソートをしていく方法をとることでソートすることが可能である。そして、この方法の比較回数は高々n[log2n]となる。,今回の授業ではソートの３つ目の方法について学習したわけであるが、これらを一般化して、比較ソートの比較回数は必ずO(nlogn)が必要になるという結論になることが面白かった。,,
C-2021-2_U71,,,ツールとしての使い方とその特徴が分かった。,使い方と仕組みなどは分かったが式に書き換えるとわからない部分があった。,数の列を並び替えるためのいくつかの種類のアルゴリズムについてその使い方と利点、欠点について学んだ,式について分からないところがあったので後から復習しようと思います。,,
C-2021-2_U72,,,大体の理解はできた。,,"二進木を用いてソートを行う。まず、適当な数字を用意する。それと、その次の文字との大小を比較して、小さければ左に、大きければ右におく。これを繰り返す。これは入力数列によって計算回数が変わる。最悪なパターンは、入力数列のサイズをnとして、計算回数がn(n-1)/2回になってしまうものである。これを解決させるために節点数がn、高さがhの二進木で、深さdの節点が2^d個存在して(条件１)、どの節点も親より小さいものである(条件２)ヒープを考える。ヒープソートを考える。単純にヒープになるようにすれば良い。条件１を常に守りつつ、ヒープの条件２に合わない事象が生じた場合、親と入れ替える。そこから一番数が大きい数字、つまり根っこを取り出し、一番最後の数字を根に置く。その後、条件２に合うように並べる。これを二進木がなくなるまで繰り返す。入力数列のサイズをnとすると、ヒープソートの比較回数が3n*log(2)nを超えない。そしてn個の節点からなるヒープの高さをは、log(2)nを超えない。ヒープソートの計算時間はO(n*logn)であり、ただの二進木の計算量の時間よりn=38から小さくなる。マージソートアルゴリズムは、ヒープソートと同様、O(n*logn)の計算量を二進木を用いずに行う物である。すでに整列されている２つの数列から、整列された１つの数列を出力するものである。つまり、各数列の先頭のみを比較する。サイズn1の数列とサイズn2の数列をマージするには、n1+n2-1回の比較を行えば良い。マージソートを行う前に真ん中で数列を２つに分けてそれぞれマージしてから、その２つの数列をマージする。n≠2^kの時は、商の分分けて、どちらかに+1する。マージソートの比較回数はn*⌈log(2)n⌉回である。これまで様々なソートの比較回数が出たが、オーダー関数で話をすると、２種類しか出てきていない。これがオーダー関数を用意した理由になる。例えば大きさの不明な数列a,b,cがあったとして、この数列のソート後の数列は3!=6通りであり、その文字の大小を比較して、それを二進木のように並べられたものを決定木という。アルゴリズムの最悪の場合の比較回数は木の高さに等しい。決定木の高さをhとして、これは少なくともn!の葉を持つ。高さhの葉の数は2^hが最大であるので、2^hよりn!が小さい。スターリンの公式なども利用すると、ソートに必要な比較回数はn*log(2)nに比例して増える。",今回がアルゴリズムそのものの本質を着くような内容で、大変興味をそそられた。,,
C-2021-2_U73,,,,２つの比較回数を求めるところで少しつまずいており、まだこの比較回数になるかをよくわかってないので復習をする。,,O(nlogn)まで比較回数を減らすことができたので要素を比較しない方法でこれを減らせるか楽しみである。また、しっかり理解できていないところがちょくちょくあるのでそこの復習を忘れずにしたい。,,
C-2021-2_U74,,,nlogn以外にも考え方によっては効率的に並び替え方法を変えられることを知った。,,今回の授業では前回に引き継づいた内容でオーダーの内容を詳しく説明し、新しい考え方を紹介した。,,,
C-2021-2_U75,,,ヒープソートとマージソートがどのようなものか理解することができました。,決定木やStirlingの公式の部分があまり分からなかったです。,節点数n、高さｈの二進木で、深さの節点がちょうど２＾ｄ個存在し、深さｈの節点が左から順に存在し、どの節点も自分の親に格納された値以下であるとき、その木をヒープという。ヒープソートの計算量はＯ(ｎlogn)である。ヒープソートと同様にＯ(nlogn)回の比較回数で、２進木を使用しないのでよりシンプルなものをマージソートという。マージとはすでに整列された２つの入力数列から整列された一つの数列を出力する操作である。マージソートの比較回数は高々nlog₂nである。あらゆる比較ベースのアルゴリズムは、必ずＯ(ｎlogn)回の比較に要する。,分からなかったことを復習して分かるようにして、ソートに関する理解を深めたいと思います。,,
C-2021-2_U76,,,マージソート、ヒープソートの操作方法が分かった。,比較ソートアルゴリズムの比較回数(4)、(5)のスライドが難しかった。,2進木を使ったソートの欠点は入力数列の並び方で計算が変わることである。この欠点を解消するように深さdの節点がちょうど2^d個存在し、深さhの節点は左から順に存在し、どの節点も自分の親に格納された値以下であるときその木のことをヒープという。また入力数列のサイズがnの時にヒープソートの比較回数は3nlog2(n)を超えない。2進木の素朴なソートとヒープソートでは入力個数がある値をとったときにヒープソートが最悪比較回数が大きかったのが逆転する。また、マージソートの段数は高々log2(n)で、比較回数は高々n[log2(n)]である。,ソートアルゴリズムが効率よくされていくための方法が確立されていくのが面白いと感じた。,,
C-2021-2_U78,,,ヒープの条件として、深さｄの節点は、2のd剰個ありまた、の親に格納された値以下であることが分かった。マージソートは、すでに整列された二つの入力数列から、整列された１つの数列を出力する操作である。,ヒープソートの比較回数の求め方がわからなかった。,今日は、ヒープソート、マージソートについて学びました。どれが一番早くできるか取捨選択してソートの種類を選ぶことが大切だなと感じました。,様々なソートを知れてよかったです。,,
C-2021-2_U79,,,２進木を用いたソート、ヒープソート、マージソートがどういったアルゴリズムなのか分かった。,それぞれのソートのオーダーについてまだ深く理解できていない。,２進木についてのソートの特徴とその欠点、ヒープソートの特徴、マージソートの特徴について学んだ。,新しいソートアルゴリズムを3つも学べて、興味深かった。,,特にありません。
C-2021-2_U8,,,今回の授業ではヒープソートとマージソートの話であったがどちらも実際に練習してみるとできた。前回の授業と併せて4つのソートを理解できた。,予習の段階で2進木のソートの図が何を指しているのかがよく分からなかったが、授業を聞くと理解できた。,2進木を使った素朴なソートの欠点としては、入力数列の並びにより計算時間が変わるという点である。よって、最悪の場合サイズｎの数列の比較回数はn(n-1)/2回となる。この2進木の深さｄに対して節点が各列２のｄ乗個、左側から存在し、どの節点の値も親より小さいという条件を満たすとき、その木をヒープという。ヒープソートはこの木を用いたソートである。ヒープソートはサイズがｎのとき比較回数は3nlog₂ｎをこえない。また、計算量はＯ(nlog₂ｎ)時間となる。ヒープソートと比較回数が同様であるが2進木を使用しないマージソートというものもある。マージとはすでに整列された２つの入力数列から整列された1つの数列を出力する操作である。マージ操作はサイズｎ₁、ｎ₂の2つの数列をマージするときには高々n₁＋n₂-1回の比較をおこなえばよい。マージアルゴリズムはある数列をサイズが1になるまで分割し、それぞれの列のマージを再帰的に繰り返していく操作である。マージソートの比較回数はサイズｎの入力数列に対して高々ｎlog₂ｎ回である。比較ソートアルゴリズムの比較回数は少なくともn!個の葉を持つ2進木の高さの最小値以上であるため、あらゆる比較ベースのソートアルゴリズムは必ずO(ｎlog₂ｎ）回の比較を要する。Ｏ(nlogn)よりも早くするためのソートは比較ソート以外になら存在する。,今回はじっくり予習をしてから授業に挑んだので、授業で先生の話を聞きながら理解することができた。,,ありません。
C-2021-2_U80,,,2進木とヒープソートの関係が分かり、それに伴ってヒープソートがどういったものであるのかが分かりました。またマージソートのやり方も理解することができました。,比較ソートアルゴリズムの比較回数の部分が難しかったです。,2進木の説明から始まり、ヒープソートの定義とやり方、計算量についての説明がありました。また、マージという言葉の意味とマージソートアルゴリズム、その比較回数と、これまでに学んだ比較ソートの比較回数についての説明もありました。さらに線形探索、2分探索についても少しお話がありました。,これまでの講義で取り扱ったソートについては以前聞いたことがありましたが、今回出てきたヒープソートやマージソートは聞いたことがなかったので、興味深かったです。一見複雑そうなマージソートが効率が良いというのが驚きでした。,,特にありません。
C-2021-2_U81,,,ヒープソート、マージソートのアルゴリズム概略と仕組み、応用について学習した。,普通に内容が難しくて完全に内容を吸収できなかった。,ヒープソートやマージソートに代表される有名ソートアルゴリズムを学習した。,様々なソートアルゴリズムがあることを知れてよかったです。,,
C-2021-2_U83,,,,,ヒープソートとマージソートの比較回数,,,
C-2021-2_U85,,,２進木使った素朴なソートには、入力数列の並び方で計算時間が変わるという欠点がある。ヒープソートは二分ヒープ木を用いて行うソートのアルゴリズムであり、２進木の欠点を補ったものである。第１ステージでは常にヒープになるように２進木を構成していき、第２ステージでは、第1ステージで完成したヒープから、節点を一つずつ削除しながら並べていく。マージソートはヒープソートと同様に、O(n log n)回の比較で要素を整列するアルゴリズムで、2進木を使用しないのでよりシンプルである。マージとは既に整列された2つの入力数列から、整列された１つの数列を出力する操作。マージソートは、入力数列に対してその数列のサイズが１より大きければ、２つの数列に分割してそれぞれをソートし、ソート後の２つの列をマージし、これを再帰的に繰り返す。,,ヒープソート、マージソートの考え方、二分探索について学んだ。,今回学んだヒープソートとマージソートは、前回学んだソートよりも難しかった。,,
C-2021-2_U86,,,ヒープソートの比較回数は高々3nlog₂n回マージソートの比較回数は高々nlog₂n回,,ヒープソートとマージソートについて。,これまでに様々なソートがでてきているのでそれぞれの特長についてしっかりと復習しようと思う。,,
C-2021-2_U88,,,ヒープソートとマージソートの仕組みを完全に理解できました。あらゆるソートの計算回数がO(nlogn)を下回ることがないことがわかりました。,特になかったと思います。,ヒープソートとマージソートがどのような過程を踏むかやその計算回数の比較を学びました。,今回は前回に比べてすんなり理解できました。,,
C-2021-2_U89,,,選択ソートやバブルソートよりも効率のいい、ヒープソートやマージソートの仕組みが分かった。,比較ソートアルゴリズムの比較回数がなぜ、O(nlogn)回以上になるのか分からなかった。,"二進木をつかった素朴なソートは、最悪の比較回数は、n(n-1)/2。一方、ヒープソートは、最悪の比較回数は、3n[log2n]。n＞=38のとき、n(n-1)/2＞3n[log2n]となり、ヒープソートの方が速くなる。さらに、マージソートの最悪比較回数はn[log2n]で、ヒープソートよりも少ない。また、比較ソートのアルゴリズムは決定木で表せるので、要素の比較の順番そのものが、アルゴリズムである。
",今日の内容は今までで一番難しく、理解が十分でないところが多々あった。次の授業では、十分理解しながら授業についていけるように、予習をしっかりしたい。また、ヒープソートやマージソートはやり方を言葉で暗記しても、難しいので、実際に何回かやってみて覚えたい。,,
C-2021-2_U9,,,,,,ヒープソートやマージソートの比較回数を考えるときに少し混乱してしまいました。少し難しかったのですが、次の授業までにきちんと整理し理解しておこうと思います。,,比較ソートに必要な比較回数が増えるときに、なぜn〖log〗_2 nに”比例”するのですか。
C-2021-2_U93,,,ヒープソートの作り方と、その読み取り方が分かった。マージソートの実行例を見て、そのやり方を理解することができた。,入力数列のサイズがnのとき、ヒープソートの比較回数は3nlog2nを超えない理由がよく分からなかった。マージソートの段数と比較回数の上限が一意的に定まる理由が理解できなかった。,2進木を使ったソートについて、その欠点を含めた特徴を学習した。また、それに関連してヒープの概念と作り方を学習した。マージの概念と比較回数について学習し、それの応用としてマージソートの手法を学習した。,,,
C-2021-2_U95,,,ソートは前回習ったものより今回の方が過程が少なく済むということ。,比較回数の計算が微妙に理解しきれていない,ハープソート、マージソート、二分法に関する授業だった。,一回の授業で分かりきらない部分をしっかりと事後学習等でカバーする,,
C-2021-2_U97,,,,・ソートアルゴリズムのオーダー表記について,・ヒープソートについて・マージソートについて,,,
C-2021-2_U99,,,バブルソート、選択ソートに加えて、新しいソートとして、ヒープソートやマージソートが分かった。,,2進木には、欠点として入力数列の並び方で計算時間が変わるというものがあるので、ヒープを導入するのがよい。ヒープソートとマージソートは同じ比較回数で、マージソートは２進木を使わず、より簡単である。,アルゴリズムがたくさん出てきて少し難しかった。,,
C-2022-1_U10,,,,,"・ヒープソート：深さdの節点はちょうど２のd乗個存在し、深さhの節点は左から順に存在する、どの節点の値も自分の親に格納された値以下である、の二つの条件を満たした２進木を作る方法。完成した２進木は節点を一つづつ削除しながら読む。要素の比較回数は高々3nlog[2]n回。(※０≦d≦h-1、hは２進木の高さ、nは節点の個数とする。）
・マージソート：入力数列をより小さな数列に分割し、それぞれ整列させた後に統合する方法。
・二分探索法：データを昇順または降順に並び替え、検索したいデータ（以後、目標と表記）が中央の要素より大きいか小さいかを調べる。これによって、目標が全体の前半分にあるか後ろ半分にあるかわかるので、目標が存在しない側の半分は検索対象から外される。この操作を繰り返し行うと、１回の操作ごとに検索対象のデータ群が半分になっていることがわかる。この探索は、中央の値が目標と一致するか、検索範囲の要素数が１になる（目標が見つからなかった）ことにより終了する。
この探索法は、値を文字の索引順に置き換えて応用することも可能である。",,,
C-2022-1_U12,,,バブルソート、選択ソート、ヒープソート、マージソートの違いが分かるようになりました。,,アルゴリズムにはさまざまな種類があり、効率の良いものを選ぶことが大切である。,計算が難しかったです。,,
C-2022-1_U13,,,"比較ベースのアルゴリズムは必ずnlogn回の比較が必要になる理由について
ｎ個の文字があったときこの決定木の葉はｎ！枚必ずある。また木の高さがｈとすると、枝分かれがすべて行われたときが最大の葉の枚数になり、その最大値は２のｈ乗となる。
だから２のｈ乗≧ｎ！となり、Stirlingの公式を使って変形していくと、ソートに必要な比較回数はnlog[2]nに比例して増える。",流れは理解できたので、実際に手を動かして証明の理解を深めたい,"ヒープソートやマージソートにおいて比較時間は比較ベースアルゴリズムより速い
マージとはすでに比較されている２つの入力数列から１つの数列を出力すること。マージソートのアルゴリズムは分割を複数回繰り返し、そしてマージを複数回することで行われる。
比較ベースのアルゴリズムは必ずnlogn回の比較が必要になる。
多くのデータから目的に合致したものを取り出すことを情報探索といい、線形探索より２分探索のほうが圧倒的に速い。（文字列の整列の順番は辞書の順番と同じ）",今日の内容は少し難しく感じました。でも実際に、2進木などを書いてみると分かることが多くあったので、証明でまだ曖昧なところは自分でもう一度やってみようと思います。ソート比較において、大切なことはやっぱり、比較回数をいかに少なくして時間を短く、そして確実に出力することだと改めて今日感じました。１つずつしらみつぶしにしていくのが誰でもできるやり方だし簡単だけど、時間がかかる上に見落としてしまうことがあると思うので、多少やり方が複雑でも効率の良い方法を適切に使うことが必要だと思いました。,,
C-2022-1_U14,,,,,"条件を守りながらヒープになるように２進木を作っていき、根をとりはずして最後に追加した葉を根の部分に入れてヒープになるように条件を見ていく作業を繰り返して行って入力した数列をソートしていくものをヒープソートという。大きいサイズの入力数列の時２進木の普通のソートよりも断然早くなる。一つの入力数列を小さな数列に分割して整列し終わった後にマージ（統合）していくものをマージソートという。
Googleのように情報検索する時にはソートされたデータの真ん中の要素と比較することを繰り返して絞っていく方法を２分探索という。",,,
C-2022-1_U15,,,,,要素を整列させるアルゴリズムの一つにマージソートアルゴリズムがある、これは入力された数列をより小さな数列に分割し、整列し終わった後にそれぞれの数列をマージすることによって元の数列を整列した結果が得られる。比較ベースのアルゴリズムは必ずO(nlogn)回の比較を要する。比較ソートアルゴリズムは決定技によって表せられ、その比較回数は少なくともn！個の葉を持つ２進木の高さの最小値以上であり、ソートに必要な比較回数はnlog2(n)に比例して増える。,,,
C-2022-1_U17,,,情報検索を高速で行う方法のしくみを理解する事ができた。ヒープソートの方が早くなる場合がある。,,,Bの単元が終わり、様々な並べ方について学習できた。少ない入力整数の個数で具体的に考え、理解しやすかった。,,
C-2022-1_U20,,,今日はそれぞれにかかる時間とグラフの意味がわかった。,計算を自分で素早くおこなうこと,,今日は自分の計算がどの思考で早くなるのかがわかった。,,
C-2022-1_U21,,,ヒープソートは２進木ソートに比べると無駄な時間を省けるという利点があることがわかった。２進木ソートは入力数列の並び方によって計算時間が変わるという欠点があるが、ヒープソートはその欠点を克服できているということも学んだ。マージソートは、それぞれの配列がすでに「ソート済み」ということを利用するので、シンプルで速いということがわかった。,,,ソートには交換型、分割統治型、選択型、など様々なものがあるとわかった。それぞれについて、計算の仕方や計算時間のスピードや複雑さなど異なっていて、デメリットがあることがわかった。内容が少し難しくなってきたので（一般式nとかで考えるとわからなくなる）気合を入れて頑張りたいと思う。マージソート気に入った。,,
C-2022-1_U22,,,マージソートの手順はよく理解できた,オーダーや比較回数が絡んでくると少しよくわからない,マージソート・・・入力Aを小さな数列に分割して整列し終わった数列を統合して結果を得る,前回からオーダーのところがよくわかっていないままなので理解できるように頑張りたい,,
C-2022-1_U25,,,比較回数の求め方がわかった。,,"マージとは、すでに整列された2つの入力数列から、整列された1つの数列を出力する操作。入力数列のサイズをｎとする。マージソートの格段において、分割された数列の長さの総和は常にｎであるから、格段のようさの比較回数の合計はｎを超えない。段数は高々「log₂ｎ」。比較回数は高々ｎ[log₂ｎ]
あらゆる比較ベースのソートアルゴリズムは、必ずO(ｎlogｎ)回の比較を要する。比較ソートアルゴリズムは決定木で表せる。要素を比較する順番＝アルゴリズム。アルゴリズムの最悪時の比較回数は、決定木の高さに等しい。比較ソートアルゴリズムの比較回数は、少なくともｎ！個の葉を持つ2進木の高さの最小値以上
大量のデータから目的に合致したものを取り出すことを情報検索という。
二分探索の時間計算量はO(logｎ)",いろいろなソートが出てきて頭がこんがらがっているのでしっかり整理しようと思った。,,
C-2022-1_U26,,,"数列を整列する方法が様々あることがわかった。
情報検索にもソートが使われているということが知れた。","いろいろなソートが出てきてごちゃごちゃしているので整理していきたい
","ヒープソートは大きい方を上に入れ替えていういく。上の方を根と呼ぶ。入力整数の個数が増えれば増えるほど2進木と比べて短くなっていく。入力数列のサイズがnのとき、比較回数は3n log2n、ヒープの高さはlog2n。
マージは既に整列された２つの数列を一つの数列に整列し直すこと。一つの数列を要素に分割してそこからマージ繰り返すとソートされた数列ができる。
比較ソートアルゴリズムの比較回数はソートの高さに比例。
線形対策は先頭からある文字を探していく。要素が整列されてる場合は中央値と比較して探す範囲を狭めてする二分探索の方が早い。
",,,
C-2022-1_U27,,,ヒープソート、マージソート、２分探索の仕組みとそれらがいかに早いかが分かった。,数式がたくさん出てきたのでそこの理解が追い付かなかった。,ヒープとは、２進木が正三角形になるように順に値を並べていき、どの節点の値もその上についている値以下であるような２進木のことを言い、それを利用してソートするアルゴリズムをヒープソートという。また、マージとは、２つの整列された入力数列から１つの整列された数列を出力する操作のことを言い、それを利用してソートするアルゴリズムをマージソートという。さらに、２分探索とは、入力した要素ｘと整列された要素Ｓの真ん中の要素ｙを比べていきながらＳの中にｘがあるかどうかを探すものである。,,,
C-2022-1_U28,,,,,,ヒープソートを理解するのにすごく時間がかかった。,,
C-2022-1_U29,,,,　あらゆるソートアルゴリズムの比較回数はO(n logn)以上であるという話を何となく理解はできましたが、友達に説明できる状態ではないと思います。,,　ソートアルゴリズムを一通りやってきたので、それぞれのやり方、関係性を頭の中でよく整理したいと思いました。とりあえず今は、名称を聞いてその方法でソートできるようにしたいです。また、比較回数が〇〇を越えないという内容に苦手意識があるので、自分の言葉で説明できるくらいまで持っていけるよう頑張ります。,,
C-2022-1_U3,,,"それぞれのソートアルゴリズムでの比較回数のオーダー記法がどのように求められているのか理解することができた。ヒープソートでは、高さh、入力サイズnの時、節点数の最大が2^h=nとなり、hがlognを超えない。親との比較、左右の子との比較を考えると3lognで、入力サイズがnであるため総比較回数は3nlognである。マージソートでも同様に高さは高々lognで、各段の比較回数はnを超えないため、総比較回数はnlognである。比較ソートアルゴリズムの比較回数を決定木Tを用いて考えると、Tは少なくともn!の葉を持ち、高さから葉の数を求めると高々2^hであるため、2^h>n!　故にh>logn!,　n!>(n/e)^nなので、h>nlogn-nloge　が導かれ、Onlognの比較回数が必要であることがわかる。",比較ソートアルゴリズムの計算ステップを表す高さと、それぞれの段で何回比較が必要かを順を追って考えることでどれだけの比較回数が必要となるのか考えるのが難しかった。また、入力サイズが2^kにならない時にも適応させるのが少し難しかった。,マージとは、すでに整列された二つの入力数列の先頭から順に比較し、小さい方を新たな配列に格納することで、整列された一つの数列を出力する操作のことである。マージソートでは入力数列を二分割する作業を繰り返し、それらをマージすることで整列させる。ヒープソートやマージソートなど、二つの要素の比較結果によって解を絞っていく比較ソートアルゴリズムでは、必ずO(nlogn)の比較回数を要する。また、情報探索を高速に行うには二分探索を用いる。二分探索では、整列された配列の真ん中の要素との比較を繰り返すことで合致する要素を見つけ出すため、整列されていない配列の一つ一つの要素と比較して探し出す線形探索よりも少ない比較回数で済む。,それぞれのソートの比較回数を見ていくことで、バブルソートや選択ソート、二進木ソートよりもヒープソートやマージソートの方が効率がいいアルゴリズムであることに納得した。エクエルのソート機能などはヒープソートやマージソートを使っているのか、それとも入力サイズが小さいからバブルソートなどを使っているのか気になった。,,
C-2022-1_U30,,,,それぞれのソートの比較回数についてなぜその式で比較回数がわかるのかとかがごっちゃになっているので一つ一つについてもう一度資料を読みながら復習して理解したい。,,,,
C-2022-1_U32,,,ヒープソート、マージソート、二分探索の仕組みがわかった,,,,,
C-2022-1_U33,,,,,"・ヒープソートとマージソートの説明と計算の具体的なやり方
・ソートアルゴリズムのまとめ
・二分探索法について",アルゴリズムといっても、様々な種類があって、それぞれに特徴や意味があるということを知れてよかったです。これから練習して行って、計算問題を自力で解けるようにしていきたいです。,,特にありません。
C-2022-1_U34,,,,,,自分は数学が苦手なので、記号を用いての説明はかなり理解が難しい。もっと多くの例にぶつかることで、自分の中でかみ砕いて消化していけるようになりたいと思う。,,
C-2022-1_U35,,,様々なソートのやり方と仕組みを理解することができました。比較回数に関しても少しだけ理解できた。,,,どんどん難しくなってきていると感じた。アルゴリズムを学んでプログラムがどんな計算をしているのかが少しだけ想像できるようになってきた気がしている。,,
C-2022-1_U37,,,,,ソートアルゴリズムには沢山の種類がある。,,,
C-2022-1_U38,,,"マージソート
情報検索
線形探索
二分探索法",それぞれの細かい仕組み,2つの数列を最初から順番に比較して並び替える行為をマージソートという。1つの数列を何度も半分に分割し、それを比較していくことで並び替えることができる。数列が順番に並んでいる場合、ある要素がその数列の集合に含まれているかを確かめる方法がある。それが２分探索法である。半分の場所で比較することで、探すのにかかる時間を短縮することができる。,,,
C-2022-1_U4,,,,,,重要なポイントを繰り返し強調していただいた点がありがたかった。ヒープソートが難しいのでできるようになりたい。,,
C-2022-1_U41,,,二進木のやり方、ヒープやマージについて,,,,,
C-2022-1_U42,,,,,"・ヒープソートについて
・マージについて
・マージソートアルゴリズムについて
・比較ソートアルゴリズムについて
・情報検索について",一番最後のスライドの「余談」というので接尾辞を使ってテキストを２分検索することが発表されたのが１９９１年であることを知り、かなり最近のことであったことにとても驚いた。このような情報検索や計算方法、またAでやった伝達方法などにもまだまだ僕たちが知らない情報の世界がたくさんありそうであることはとても興味深い。,,
C-2022-1_U44,,,二分探索は効率が良い,,ヒープソーとマージソートの違い、特徴、二分探索の利点などを学んだ。,,,
C-2022-1_U45,,,,とくにありません,,,,とくにありません
C-2022-1_U46,,,オーダー表記について前回より理解できました。解説ありがとうございました。,ヒープソートやマージソートの時間についてあまり理解できなかったので、実際にやってみて理解しようと思いました。,"・2進木…各節点が高々2つの子しか持たない根つき木
・2進木ソート…Ai(i＝2,3,…,n)を現在の節点の値と比べ、
　　　　　　　Aiの方が小さい→左
　　　　　　　Aiの方が大きい→右
→入力数列のサイズをnとすると、最悪の場合、比較回数はn(n-1)/2となる
・通りがけ順…節点の値を左の子、自分、右の子の順に読む

・ヒープ…節点数n、高さhの2進木で
　　　　　I深さd(0=<d=<h-1)の節点はちょうど2^d個存在し、深さhの接点は左から順にn-(2^h-1)個存在する。深さh-1までの接点の合計数は(2^h-1)個。
　　　　　IIどの節点の値も、自分の親に格納された値以下である。
・ヒープソート…①常にヒープになるように2進木を構成していく
　　　　　　　　　IIを満たしている間は、左の子、右の子の順に追加していく
　　　　　　　　②①で完成したヒープから節点を一つずつ削除しながら数を並べていく
　　　　　　　　　根から数を取り出し最後の数を根に格納し、IIを満たすまで、大きい方の子と入れ替える。（根＝上、葉＝下）
→入力数列のサイズがnの時、ヒープソートの比較回数は、3nlog2nを超えない
　①で親と比較するごとに1回
　②で左右の子と比較するごとに2回
→n個の節点からなるヒープの高さはlog2nを超えない

・マージソート…すでに整列された2つの入力数列から整列された1つの数列を出力する
　　　　　　　　2つの数列を先頭から順に比較し小さい方を新しい配列に格納する
→サイズn1の数列Aとサイズn2の数列Bをマージするためには、高々n1+n2-1回の比較を行えば良い

・マージソート:O(nlogn)時間
・ヒープソート:O(nlogn)時間
・2進木ソート:O(n^2)時間
・バブルソート:O(n^2)時間
・選択ソート:O(n^2)時間
",今日は小テストで満点を取れたので、次回も全部正解できるように課題で復習しながら頑張りたいです。,,今のところありません
C-2022-1_U47,,,,,,"計算が複雑になってきているので、しっかり勉強してテストの対策をしていきたい。
",,
C-2022-1_U48,,,,2進木ってなんだろうって思いました。,,,,
C-2022-1_U49,,,"ソートのやりかたは５種類かある。ソートアルゴリズムの計算量を比較するとn2乗関連よりlogn関連のほうが圧倒的に早い。特にnが大きくなった時。
高さhの比較木の葉の数は高々２のh乗。この前練習３がよくわからなかったのですが補足を見てわかりました。",練習問題２の２,ソートのやりかたはいくつかあるができるだけ計算量を減らすためにソートのやり方を選択し工夫するべき。,,,
C-2022-1_U50,,,,,"・マージソートアルゴリズムとはヒープソートと同様に、O(nlogn)回の比較で要素を整列するアルゴリズムであり、二進木を使用しないためシンプルである。
・マージとは既に整列された二つの入力数列から、整列された一つの数列を出力する操作。
・サイズn1の数列Aとサイズn2の数列Bをマージするためには、高々n1+n2-1回の比較を行えばよい。
・要素比較を一回行うと、必ず一つの要素が出力される。
・最終的に出力される数列のサイズはn1+n2であり、最後に残った要素は比較相手がいないので、比較回数は高々n1+n2−1回
・数列AとBにおいて値が小さい方から交互に現れる時、最大の比較回数(n1+n2−1回)となる
・比較ソートアルゴリズムは決定木で表せることができ、要素を比較する順番、すなわちアルゴリズムである。
・入力回数Aに対するアルゴリズムの比較回数は決定木の根から葉(Aに対する解)までの辺の数に等しい。
・アルゴリズムの最悪時の比較回数は、決定木の高さに等しい
・比較ソートアルゴリズムの比較回数は、少なくともn!の葉を持つ２進木の高さの最小値以下である。","・インターネットの調子が悪く、ところどころteamsの不調があった
・計算についての章が終わったため、復習を忘れないようにしたい",,
C-2022-1_U51,,,マージソートは隣の入れ替えを小規模の物から大規模の物へと移していく物である,比較ソートがあまりわからなかった,バブルソート、ヒープソートのほかに、マージソートもある,遅れてしまって申し訳ないです,,
C-2022-1_U52,,,二分探索は線形探索よりも圧倒的に早いということを確認できました。,,"降順で並んだn個の入力数列を、ヒープソートを用いて昇順に整列した時の第一ステージと第二ステージの比較回数の合計
→2n[log2(n)]+n-1
∵第一ステージはn-1 回の比較(親との比較をそれぞれ一回)
  第二ステージは高々2n[log2(n)]回の比較(根の数を取り出した後、小さな値が根に入る。ヒープの高さは高々[log2(n)]なので、全部で2n[log2(n)]

マージソート：すでに整列された二つの入力数列から、整列された一つの数列を出力する操作
・サイズn1の数列Aとサイズn2の数列Bをマージするためには、高々n1+n2-1回の比較を行えば良い
・マージソートの格段において、分割された数列の長さの総和は常にn→各段の要素の比較回数の合計はnを超えない。
・マージソートの段数は高々[log2(n)]
・よって、マージソートの比較回数は高々n[log2(n)]

・比較ソートアルゴリズムは決定木で表せるため、要素を比較する順番＝アルゴリズムである
・入力数列Aに対するアルゴリズムの比較回数は、決定僕の根から葉(Aに対する解)までの辺の数に等しい→アルゴリズムの最悪時の比較回数は、決定木の高さに等しい。
・比較ソートアルゴリズムの比較回数は、少なくともn!個の葉を持つ二進木の高さの最小値以上である

大量のデータから目的に合致したものを取り出すことを情報検索という
→情報検索を高速に行う方法の一つとして、データをあらかじめソートしてから二分探索を行う方法がある

集合内の要素が整列されていない場合
→先頭から要素を探していく：線形探索→最悪の場合、n回の要素比較をしなければならない。
時間計算量はO(n)
集合内の要素が整列されている場合
二分探索→要素数nの集合に対する二分探索のステップ数はlog(n)を超えない
二分探索の時間計算量はO(log(n))である
圧倒的に早い！
→キーワードの二分探索も同様に行える
キーワード集合Kの要素数をnとすると、二分探索のステップ数はlog(n)を超えない
パターン文字列pの長さをkとすると、各ステップにおいて高々k回の文字比較を行う
→したがって、時間計算量はO(klog(n))である

テキスト文字列のなかを二分探索しても同様の結果となる",いつも使っているGoogleなどの検索エンジンの裏側を知ることができて楽しかったです。授業は日常生活につながっているのだと実感できました。,,
C-2022-1_U53,,,,,,普段使うウェブ検索などの裏側の、より早く結果を出すための工夫を知る事ができ感心した。,,
C-2022-1_U54,,,ソーティングには種類がたくさんあり、それぞれの中で最も早く並び替えができるものを使用できることがわかった。,logの計算が出てくるとわからなくなってしまう。,,ソートの内容は一見難しかったが、実際理解すると便利なものであるということがわかってよかった。,,
C-2022-1_U56,,,,ソートの比較回数や段数がlogを使った計算式で表す導出方法がよくわからなかった。,"前回の内容に加えて、ソートにはヒープソート、マージソート等がある。それらのヒープの木の高さや比較回数はアルゴリズムから求めることができる。
情報検索とは大量のデータから目的に合致したものを取り出すことである。線形検索は先頭から条件に一致するものを探す方法だが時間がかかり、真ん中の要素を比較していく二分検索では圧倒的に効率を上げることができる。",作業の内容や計算式がどんどん難しくなっていると感じた。予復習をきちんとして理解を深められるようにしたい。,,
C-2022-1_U58,,,,,,次のテキスト２分探索がよくわからないので予習をしたい。,,
C-2022-1_U6,,,,,"ソートアルゴリズムの中でもヒープソートは、２進木のどの節点の値もその親に収納された値以下なのでオーダー表記で計算量比較すると、O(nlogn)時間と他のソートよりも速い。また、２進木を用いずに二つの整列に分割した後、マージ(統合)して整列させるやり方もあり、マージソートアルゴリズムという。この比較ソートアルゴリズムは、二つの要素を比較することで候補を絞っていく決定木の手法をとり、必ずO(nlogn)回の比較を要する。
ウェブ検索など大量のデータから目的に合致したものを取り出すことを情報検索という。手当たり次第の線形検索では時間がかかりすぎてしまうが、二分探索は要素を整列させたものを真ん中から探していく方法であり、探索範囲は半分になって、時間計算量もO(logn)と速くなる。",,,
C-2022-1_U61,,,２進木の素朴なソートとヒープソートでは場合によって速さが格段と違ってくる,,どんどんわからなくなってくる内容,,,
C-2022-1_U63,,,線形探索はとても地道な作業で時間がかかるが、二分探索はどんどん分割していくので、より早く情報を検索することができる。,,,,,
C-2022-1_U65,,,"ヒープソートの具体的な方法、マージソートの仕組みを理解することができた。
また情報検索でソートが重要な役割を果たしていることがわかり、このように利用することができるのかと新しい発見があり面白かった。",,"ヒープソートの作り方を学んだ。第一ステージでは入力された数字でヒープになるよう2進木を構成していく。ヒープが完成したら、節点を一つずつ削除しながら数を並べていき、全ての行為が終わったらソートが完了したことになる。文字で説明するのは難しいが図を書いて見るとすんなりと理解できる。また、ヒープソートの比較回数は入力数列の大きさがnのとき、比較回数は3nlog2（n）を超えない。このため、ヒープソートは単純な二進木と比べ比較回数が少なくなり（具体的には38個を超えた時から）、計算時間が圧倒的に短くなり効率的だといえる。ヒープソートの計算時間はO（nlogn）となるが、これと同じ種類に分類されるものがマージソートというアルゴリズムである。これは、二進木を使わないためよりシンプルとなる。おおまかな手順は、ソートを行なってからマージを行うという手順となる。マージというものは、すでに整列された2つの入力数列から整列された1つの数列を出力するものであり、先にソート（分割）を行なってからそれぞれを順番にマージしていくと整列が完了する。
ここで、比較ソートアルゴリズムの比較回数は、必ずO（nlogn）回の比較を要する。そのためヒープソートとマージソートは比較回数が最小となるアルゴリズムとなる。

大量のデータから目的に適するものを取り出すことを情報検索という。この情報検索には線形探索、二分探索という方法があるが、より高速に行うには二分探索が好ましい。二分探索というものは、データをあらかじめソートしてから対象を比較していくという方法である。ここでソートの大切さがわかる。要素数nに対する二分探索のステップ数はlog2（n）を超えない。キーワードに二分探索においても数字と同じように、辞書式順にソートして行うことができる。どちらも線形探索に比べて圧倒的に早く探索を行うことが可能になる。","情報検索でソートが出てきて、今までやってきてことはこのようなことに役立つという具体例が知れてより理解が深まったように感じた。
ヒープソートやマージソートは実際に紙に書いて練習して見るとすんなり頭に入ってきて、あと何度か練習して一般例の式が理解できるまで復習しようと思う。",,
C-2022-1_U67,,,それぞれのソートの仕方がわかりました。また、どんなに少なくても、計算量はn*lognだということがわかりました。,高々何回になるのかを求めるのができませんでした。考えるのではなくて、丸暗記してしまっています。,２進木を使ったソート、ヒープソート、マージソート、二分探索について。,今回の範囲の内容は、聞いているだけだとなんとなくわかったかも、みたいな気になるだけなので、実際に手を動かして理解していくことが大切だと思いました。検索するたびに、なるべく少ない手順で、素早くソートされていることを知り、Google先生はやはり偉大だと思いました。,,特にありません。
C-2022-1_U68,,,節点数をnとすると、ヒープソートの比較回数は3nlog2(n)を越えず、ヒープの高さはlog2(n)を越えない。ヒープソート同様、O{nlog(n)}回の比較回数で要素を整列するアルゴリズム。,,マージとは既に整列された二つの入力数列から整列された一つの数列を出力する操作のことをいい、入力数列をより小さな数列に分割し、整列し終わった小さな数列をマージすることによって入力数列を整列した結果を得るアルゴリズムをマージソートアルゴリズムという。,,,
C-2022-1_U69,,,,,"２進木を使ったソートは入力数列の並び方によって計算時間が変わってしまうため、常にヒープになるように２進木を構成するヒープソートを利用すると良い。また、ヒープソートとマージ（すでに整列された２つの入力数列から整列された１つの数列を出力する）を利用したマージソートはO(nlogn)であるがこれより速くソートすることは不可能である。
ネット検索をする際には二分探索を用いてキーワードを見つけると高速である。",線形探索に比べて二分探索が高速であることは理解できたが、無数にあるサイトからキーワードだけで必要な情報を瞬時に入手できるのはあまり想像がつかず、やはり不思議だと思った。,,
C-2022-1_U7,,,ヒープソートの整列の仕方はわかりやすかったです。,比較ソートアルゴリズムの比較回数がまだうまく理解できていません。,ヒープソートはどの接点の値もも親の格納された値以下という条件を満たす。マージソートはすでに整列された数列から新たな数列を出力する方法。2分探索は大量のデータから目的に合致したものを取り出すこと。,数列の整列の仕方に様々なものがあり、ヒープソートはわかりやすく、演習が楽しかったです。,,
C-2022-1_U70,,,,,,今回の授業は数式が大量に出てきたので数学の授業のようだった。予習復習を丁寧に行って授業に挑んだので、あまり苦労せず内容が理解でき嬉しかった。自分でしっかり時間を取って実際に手を動かさないと習得できなさそうな内容だったので、練習問題演習を頑張りたいと思った。,,
C-2022-1_U71,,,,n!個の葉を持つ２進木の高さの最小値以上である（？）,,他の教科もテストが始まってくるので、手が回るうちにできることをする。,,
C-2022-1_U73,,,"今までなんのためにソートを学んでいるのかわからなかったけれど、情報検索の時に使われると学んで一気に腑に落ちた。
二分探索の時間計算量が高々klognであり、線形探索のknより高速であること。情報検索とは、大量のデータから目的にあった物を取り出すこと。
ヒープとは、どの節点の値も自分の親に格納された値以下であるもののこと。",どうしてマージソートでは任意の実数zの対してz以上の最小の整数を使って数列を分割するのか。Stirlingの公式がよくわからない。,,"今まで何に使うのかイメージできなかったソートの使われ方がやっとわかってスッキリした。
大体の内容はわかったので練習問題を解いたりLGCで整理していくことでしっかり身につけたい。
",,
C-2022-1_U74,,,二進木はぱっと見複雑そうだけど、わかれば早くできそう。オーダーで見てみるとそれぞれ大分違って面白いと思った。,大丈夫そうです、慣れるのみ？,,,,特にありません
C-2022-1_U75,,,今回はBの最後の回だったので色々な言葉が出てきましたが、復習も込めて整理できました。,似たような言葉が多くてややこしかったです。,ある条件を満たす2進木をヒープという。また、ヒープの高さには限度がある。マージーソートアルゴリズムとは、2進木を使用しないシンプルなアルゴリズム。情報検索とは大量のデータから目的に合致したものを取り出すこと。,Bはたくさんの用語が出てきましたが、意外と早く終わったので、しっかり復習したいです。,,
C-2022-1_U76,,,,"マージソートにおいて、一度分割した後に比較を行うので非効率のように思えた。
",,二分探索法について前に調べたことがあるが、比較回数の計算がよくわからない。,,
C-2022-1_U77,,,,,,抽象的な内容のものが多く、きちんと理解できていないように感じた。言葉の意味や式の意味を一つ一つ丁寧に見直して、自分の言葉で説明できるように復習しようと思った。,,
C-2022-1_U78,,,マージソートの手順通りに並び替えをすることができた。,決定木Tは少なくともn!の葉を持つとは何か。,"マージソートは、入力数列を分解し整列してマージ（統合）する。比較回数がO(nlogn)のアルゴリズムで、二進木を使わないため、シンプル。
２分探索はO(logn)で圧倒的に速く、ウェブ検索で利用される。",アルゴリズムはより便利なものが次々に開発されていくのだなと思った。,,
C-2022-1_U79,,,,ヒープの木構造がいまいちよくわかっていないので、深さが浅くなるのはわかったが、時間計算量などについてまだいまいちピンときていない。,,,,
C-2022-1_U81,,,マージソートや2進木のメカニズム,,様々なソートについて,いろいろ出てきて覚えるのが大変なので、自分なりに整理してテストに備えたい。,,
C-2022-1_U82,,,色々なソートにnlognが関わっていること、nやn２乗のオーダーと比較すると非常に速く計算をすることができるということがわかった。ヒープソートの２進木の作成の仕方や、要素の取り出し方が理解できた。２分探索法は、日頃私たちが使っているGoogle検索などに用いられていることを実感したし、線形探索法に対して検索時間を大幅に短縮できる方法なのだということがわかった。,nlognは様々なところに登場するので、まだ完全には理解しきっていない部分を早急に学習し直し、ソートの計算量についてもっと理解を深められるように頑張ろうと思う。また、B単元で何種類ものソートが出てきたので、演習問題を自分の手でしっかり解くことで、実際にソートを行ったり、ソートについて自分の言葉で説明したりできるようにしたい。,,B単元の講義をほぼ終えたが、これまでに色々なソートや探索法を学習したので、頭の中が整理できていない部分も多くある。LGCやBR-MAPを使って知識の整理をしたいと思う。計算時間が改善されたソートがいくつかあり、一方でそうでないソートも多くあったが、計算量が多いという欠点を持つソートが生まれたからこそ、それを改善しようとしてより良い方法が考案されたのかなと思った。そして昔の研究者がこのような素晴らしい方法を作り出してくれたからこそ私たちの今の便利な暮らしがあるのだと思うと、本当に幸せなことだと思う。,,
C-2022-1_U83,,,,,ソートについていろいろな方法を考えた,,,
C-2022-1_U84,,,,,"今日も、数字の並び替え方の方法の紹介だった。どちらもコンピューターの思考回路をしており、理解するのに時間はかかるが、
合理的で分かれば簡単な内容だった。",,,
C-2022-1_U85,,,"2分探索は早い、計算量が少ない、マージソートの段数は高々(log2N)
",計算方法,,計算がどんどん難しくなっているのでしっかりと復習して頭の中を整理したい。,,
C-2022-1_U86,,,ソートにもさまざまな種類があることが分かった。,,二つのソートと二分探索法,,,
C-2022-1_U87,,,今日の内容で学んだのは2進木を使ったソートなどの最短化のための方法を学び左が小さい数字、右側が大きい数字をおくことでアルゴリズムの最短化を図れることを学んだ。,,今日の授業では、2進木を使ったソートやヒープソートなどについて学んだ。ソートを使うことによってアルゴリズムの最短化をすることが可能になることを学んだ。,,,
C-2022-1_U89,,,ソートの種類について知ることができた。図で表したらヒープソートもマージソートもわかりやすくなったので理解することが出来たと思う。また、ソートの種類によって計算量の大きさも大幅に変わってくるということが分かった。それによって各ソートの良いところと悪いところによって用途の使い分けができるということも学ぶことができた。,,今回は2進木を使ったソート、ヒープソート、マージソートなどについて学んだ。ちなみにヒープソートは２進木を使ったソートの中の一種であり、より効率性を高めたものである。２進木は各接点が高々２つの子しか持たない根つき木のことである。接点の左側の子の値は接点の値より小さくなり、さらに接点の値は接点の右側の値より小さくなる。このソートの欠点としては入力された数列の並び方によって計算時間が変わる、つまり完成した２進木の深さに依存するということである。数列の中身によっては比較回数が莫大な数になることもある。そこで、その欠点を和らげることができるのがヒープソートというものである。ヒープとは接点数n高さhの２進木のうち、深さd(0≦d≦h-1)の節点はちょうど２のd乗個存在し、深さhの節点は左から順にn-(2^h-1)個存在するということ、そしてどの節点の値も、自分の親に格納された値以下であるということの二つの条件を満たしているものである。計算量は、数列の長さが長くなるとヒープソートの方が短くなる。一方、ヒープソートと同じ計算量で、２進木を使わないソートとして、マージソートというものがある。２進木を使わない分、シンプルな設計となっている。入力数列をより数列に分割し、整列し終わったそれらをマージ(統合)することによって、最初の入力数列を整列した結果を得るものである。分割とマージを再帰的に繰り返して作られる。2分探索法とは、数列を2部分に分けてその中から探す条件に当てはまるものを探していることである。キーワード検索などで使われている。,,,
C-2022-1_U9,,,2分探索をする際、数列の要素は昇順、降順どちらかに整列させておく。,,"数列のを1つの数になるまで分けて、小さい順に統合(マージ)していくマージソート
ある数が数列のどのあたりにあるか、目星をつけてから探し出す、2分探索",教科書にマーカーを引こうとすると、意図していない部分まで線が広がったり、マーカーを引いたのに消えてしまったりします。,,
C-2022-1_U90,,,,,節点数n、高さhの２進木が２つの条件を満たす時、その木をヒープという。入力数列のサイズがnの時、ヒープソートの比較回数は３log底２nを超えない。,,,
C-2022-1_U91,,,上記が満たされると最悪でも調べる回数が1/2になる,接尾辞について,数字列や文字列が規則正しく並べられていたら探すのが楽になる,情報を早く処理するために二分探索が大事,,接尾辞について
C-2022-1_U92,,,ヒプソートとマジソートについて理解できた,,２進木の素朴なソートとヒプソートではｎ=38の時にヒプソートが最悪比較回数において２進木の素朴なソートを上回る,小テストで満点だったのでうれしかったです,,
C-2022-1_U93,,,,マージソートの最後のスライド,,マージソートのやり方が一番わかりやすきて良いと思った,,
C-2022-1_U94,,,比較ソートの比較回数は、少なくともN！の葉を持つ２進木の高さの最小値以上である,,すでに入力された数列から、整列された一つの数列を入力する操作をマージ。比較ソートアルゴリズムは、決定木で表せる。,きょうがいちばん理解に苦しんだ,,
C-2022-1_U96,,,"練習問題１
　　　  10
        5         20
    3      7
 1        6   8
                   9                    通りがけ順だと、1,3,5,6.7.8,9,10,20

練習問題
1.   分割8,2,10,1    9,7,5,6,4
              1,2,8,10    4,5,6,7,9
       マージ　１、２、４、５、６、７、８、９、１０　　　７回　

練習問題１　　　　・３回　yes
　　　　　　　　　・３回　no

　　　　　　　　　

","練習問題２

",２進木を用いて通りがけ順に読み、数字を整列させる方法をヒープソートという。欠点は入力数列の並び方で計算時間が変わってしまうことである。２進木が二つの条件を満たす時それをヒープと呼ぶ。第１ステージと第２ステージという条件である。長い数列を二つに分け、それぞれを整列させ、先頭から比較させていき文字列を出力させる方法をマージソートという。整列させてから、不等号判定を用いて効率よく要素を調べる方法を二分探索法という。,ヒープソートに関してやっと理解できたのでよかった。計算、探索時間についてもっと知りたい。,,２分探索の初めは数列の真ん中ら比較するということでいいのか？
D-2020_U1,,,,,,授業内容を復習してZ変換の性質が持つ意味や逆Z変換の手順を身に着けていきたい。,,
D-2020_U13,,,逆Z変換の計算方法が分かった,,,Z変換の性質について復習したい,,
D-2020_U14,,,逆z変換のやり方,,Z変換と逆Z変換について,,,
D-2020_U15,,,Z変換の性質と逆Z変換のやり方,,Z変換の性質と逆Z変換のやり方,,,
D-2020_U18,,,部分分数分解法について、例などを参考にしながら仕組みを理解することができた。,"逆Z変換の定義式が提示されていたが、真ん中の式の意味がよくわからなかった。
特に経路cの取り方に関しての説明が理解できなかった。","Z変換は、線形性や推移定理などの様々な性質を持つ。
フーリエ変換、逆フーリエ変換のように、Z変換から元の離散時間信号を求めることを逆Z変換という。
具体的な方法として、べき級数展開法や部分分数展開法などが存在する。",,,
D-2020_U19,,,Z変換の性質と逆Z変換について学びました。,まだスライドを見ながらでないとZ変換をうまく使えません。,,,,
D-2020_U2,,,,,逆Ｚ変換でX(z)を元の離散信号x(n)に戻せる。方法はべき級数展開法と部分分数展開法がある。,,,
D-2020_U21,,,,,前回のつづき,,,
D-2020_U22,,,,,,"知識マップのうまい使い方がまだよく把握できていないと感じた。
",,
D-2020_U25,,,,,,同じ逆z変換でも冪級数展開法では、自力で各項の関係性を見つけなければならず大変だった,,
D-2020_U27,,,逆z変換について2通りの解法があることが理解できた,,,,,
D-2020_U28,,,,,逆z変換,次回の総復習に向けてもう一度教材の復習をしたいです。,,特にありません。
D-2020_U29,,,逆Z変換が出来るようになった。Z変換の性質を理解した。,,Z変換の性質と逆Z変換について,逆Z変換は、変換することよりも変換できる形に持っていくのが大変。,,"z/(z-1)の逆Z変換は、u(n)でも1でもどちらでもいいのでしょうか?
それとも今回だけ特別なのでしょうか?"
D-2020_U31,,,z変換の性質、逆z変換のやり方。,,"z変換には線形性、推移定理、指数数列の積、畳み込みなどの性質がある。
逆z変換により元の離散時間信号が得られる。
逆z変換にはべき級数展開法や、部分分数分解法が用いられる。","今日は特に難しい内容ではなかった。
逆z変換の計算をしっかりできるようにしたい。",,
D-2020_U33,,,,ナイキスト周波数,逆ｚ変換,,,
D-2020_U34,,,やっていることはラプラス変換と一緒だなと思った。,逆ラプラス変換みたいに直接定義式から元の信号を出すことはできないのかなと思った。,逆Z変換とそれができる領域の確認,,,
D-2020_U35,,,逆Z変換の求め方,,Z変換の性質と逆Z変換の求め方,逆Z変換を複雑な積分を用いずに、求められていて感動した。,,
D-2020_U36,,,Z変換の性質や、逆Z変換の手法。,,,,,
D-2020_U40,,,逆Z変換を行うときにどのような計算を行えばよいか,,逆Z変換の定義とその具体的な求め方,,,
D-2020_U41,,,逆z変換は、手計算する場合は部分分数展開を利用する,,,,,
D-2020_U42,,,部分分数分解を用いると逆Z変換を容易に行うことができるということ,今回は内容がそこまで多くなかったので、計算ミスがなければなんとかなる気がする,,,,
D-2020_U43,,,,特にありません,BRMAPの使用方法,特にありません,,
D-2020_U44,,,"逆Z変換をそのままZ変換の式から求めるのは難しい
部分分数展開法とべき級数展開法を使って簡単にする",,,,,
D-2020_U45,,,"定義によれば線積分を用いて逆Z変換を計算するが難しい
難しいので部分分数分解を用いて計算する",,,,,
D-2020_U46,,,,,"z変換した信号をもとの離散時間信号の数列に戻すために、逆z変換をする。
逆ｚ変換は複素積分をすればよいが、複素積分の計算は困難なので、べき級数展開法や部分分数展開法を用いて逆ｚ変換を行う。",,,
D-2020_U47,,,基本的な性質、逆Z変換の方法など以前学習した内容と非常に類似していたので理解しやすかった,逆Z変換の手法の一つのべき級数展開法については必要ない気はするが一応簡単にやり方を調べておく,"Z変換の基本的な性質とZ変換したものをもとの信号に変換する逆Z変換
",,,
D-2020_U48,,,"Z変換の性質について, 証明も含めて理解することができた.
また, 部分分数展開法の手順を用いて実際に逆Z変換をすることができた.",,,普段通り分かりやすかった,,
D-2020_U49,,,逆Z変換の2つの方法は理解できた。,,Z変換にもフーリエ変換に似た性質があり、逆Z変換にはべき級数展開や部分分数展開を用いることができる。このあたりは逆ラプラス変換の求め方に似ていると思った。,逆ラプラス変換に似た部分があって理解しやすかった。,,
D-2020_U52,,,Z変換の性質には線形性や推移定理などがある。逆Z変換をするには様々な方法がある。,,前回に引き続きZ変換について学んだ。具体的にはZ変換の性質や、逆Z変換についてである。,逆Z変換の計算は演習問題を実際に解いて慣れていこうと思った。,,
D-2020_U53,,,,,z変換の性質と逆z変換について,,,
D-2020_U54,,,,,,部分分数分解を用いて逆z変換を計算できた。この調子で頑張りたい。,,
D-2020_U55,,,逆z変換の定義は収束領域内の原点を囲む閉路ｃを反時計回りに積分したものだが、計算が難しいので部分分数展開法などを使う。,,逆z変換について,,,
D-2020_U57,,,,,逆Z変換によって、X(z)からx(n)を復元できる,べき級数展開法の計算練習もしてみようと思う,,
D-2020_U6,,,"Ｚ変換の性質には線形性,推移定理,指数数列の積,畳み込み定理などの性質がある.
また冪級数展開法と部分分数展開法の２種類の逆Ｚ変換の手順が分かった.",,,,,
D-2020_U62,,,Z変換および逆Z変換の性質。逆Z変換を用いることで元の離散時間信号の数列を復元できること。また、その具体的なやり方。逆Z変換は複素数平面上での積分で求まるが、複素平面での積分は困難であるため、X（ｚ）が変数ｚの有限関数であることを生かして、べき級数分解や、部分分数展開法をもちいて逆Z変換することが多い。,,,今回の授業では、前回のZ変換とは違い、逆Z変換を用いることで元の信号を復元できることを学んだ。しかし、複素数上での積分は困難であるため、今までと違い、べき級数展開や部分分数分解を用いて変換しなければならないことに注意して逆Z変換への理解を深めていきたい。,,
D-2020_U63,,,部分分数分解を用いた逆z変換の求め方,,,,,
D-2020_U64,,,"部分分数分解をすることで、逆Z変換ができるとわかった。
",,,ディジタル信号処理システムについて、だんだんとわかってきた。,,
D-2020_U66,,,部分分数分解を用いて逆z変換を求める。,,逆z変換,,,
D-2020_U7,,,ここまでの内容を要点のみ整理することができた,,,,,
D-2020_U9,,,,,,例題をこなして理解を深めていきたい。,,
D-2021_U100,,,逆ｚ変換の方法がわかった。,,"z変換には線形性、推移定理、指数関数、畳み込みの定理、といった性質がある。
離散時間信号をz変換することができるがその逆の相差を逆ｚ変換という。定義に従って逆z変換を行うのは難しいためべき級数展開法や部分分数展開法を用いる。",授業中に理解ができたので良かった。,,
D-2021_U101,,,逆z変換の手法とz変換の性質について理解できた．,,z変換と逆z変換,,,
D-2021_U102,,,z変換の性質と逆z変換についてわかった,,,逆z変換の問題をもっと解いて慣れておきたい,,
D-2021_U103,,,差分方程式を用いることでシステムの伝達関数から安定性を知ることができた。,,システムの安定条件及びその導出などについて学んだ,"線形時不変システムの接続において縦続接続の場合は畳み込みとなるが、畳み込みに対していいイメージを自分は持っていない（単純に苦手）ので
改めて深く理解したいと思った。
今回、寝過ごしてしまって欠席してしまった。ノートをあらかじめとって音声を聞くという順序で学習したがいつも以上に理解できた気がしている。
普段の予習を適当にしていたのだなぁと感じ反省した。
",,
D-2021_U104,,,,,,振り返り日誌を先週の分忘れてしまっていたので、後から追記します。,,
D-2021_U13,,,逆Z変換の際に用いる部分分数分解,,"逆Z変換はzが収束領域内にあることが条件で、一般的に部分分数分解を行うことで変換を行うことができる。
",,,
D-2021_U14,,,,,"逆Z変換を定義通りにするのは難しいのでべき級数展開法・部分分数展開法を用いる。
",,,
D-2021_U15,,,z変換の性質と逆z変換の計算について理解できた,,z変換の性質の理解,,,
D-2021_U16,,,逆Z変換、Z変換の性質,特に無し,,,,
D-2021_U17,,,逆Z変換の方法でべき級数展開法があることが分かった。,,Z変換の性質と逆Z変換,,,
D-2021_U19,,,z変換,,,,,
D-2021_U20,,,,,Z変換の性質と逆Z変換,Z変換対の利用に少し慣れてきました。,,
D-2021_U21,,,z変換にはいくつか性質がある。,,,,,
D-2021_U22,,,,,Z変換の性質、逆Z変換について学習した。,Ｚ変換の推移定理については、自分で証明することができた。べき級数展開法が使える場合の逆Ｚ変換についても確認したい。,,
D-2021_U23,,,"Z逆変換を求めること
",,,,,
D-2021_U28,,,線形性、推移定理、部分分数展開法,,Z変換の性質、逆Z変換,,,
D-2021_U30,,,,,,今まで部分分数分解は時間がかかっていたのですが簡単なやり方を覚えたので他の分野にも応用出来そうです,,
D-2021_U31,,,逆Z変換の問題を解けるようになった,,,Z変換、逆Z変換についての理解が進んだ,,
D-2021_U32,,,,,,部分分数展開の方法が今までの方法と違ったので、復習しようと思います。,,
D-2021_U41,,,Z変換の性質と逆Z変換（べき級数展開法、部分分数展開法）,,,,,
D-2021_U43,,,"離散時間システムの線形時システム差分方程式に関する語句を理解できた
",,"離散時間システムの線形時システム差分方程式について
",,,
D-2021_U46,,,"逆Z変換は一般に複素数平面上での積分により与えられる。ただし複素積分を計算することは困難である。
実際には離散時間システムの解析ではべき級数展開方や部分分数展開法が用いられる。",,Z変換と逆Z変換の性質および計算方法,,,
D-2021_U48,,,逆Z変換と部分分数展開法によって、ある信号を指数関数を使った簡単な式に表すことができた,,,,,
D-2021_U49,,,べき級数、部分分数分解を用いて、逆Ｚ変換をすることができた。,,,,,
D-2021_U61,,,,,"z変換の持つ性質には線形性や推移定理、指数数列の積、畳み込み定理があることや、逆z変換は本来の周回積分が難しい場合があるから、
部分分数分解やべき級数展開法を使って行われ、それにより、複素数次元のz領域から、実数次元の時間領域に変換すること。",どのようにディジタル信号処理に応用されていくかが興味深くなった。,,特にありません。
D-2021_U62,,,逆z変換の部分分数展開による解法を理解できた。,,z変換の性質、指数数列の積、推移定理、畳み込み積分、逆z変換を学んだ。,,,
D-2021_U63,,,,特になかった。,,,,
D-2021_U64,,,,,逆Z変換,,,
D-2021_U67,,,,,逆z変換について学んだ,,,
D-2021_U69,,,Z変換の性質について、逆Z変換の定義、逆Z変換の解き方についてわかりました。特に逆Z変換の解き方については、べき級数展開法や部分分数展開法による2つの解き方があることが分かりました。,べき級数展開法による逆Z変換の解き方については、実際には問題を解いてないので少し理解しづらかったです。,,,,
D-2021_U70,,,,,Z変換の性質と逆Z変換の求め方について。,逆Z変換で問題によっては計算量が多くなり大変でした。,,
D-2021_U72,,,,べき級数展開が具体的にはどんな感じなのかが分からなかった。,,今日は内容も少なかったため、しっかり理解することができた。,,
D-2021_U74,,,逆Z変換を例題を通して理解することができた。,,"逆Z変換はX(z)から元の離散時間信号の数列を求めることである。
複素数平面上での積分で求める方法は難しいため、冪級数展開法や部分分数展開法を用いると良い。",逆Z変換問題の解法を理解することができてよかった。,,
D-2021_U75,,,逆z変換の求め方。,,逆z変換の導入。,集中して授業を受けることができたと思う。,,
D-2021_U76,,,自分で証明を考えることができた。,,,,,
D-2021_U78,,,,,複素数zに関するz変換X(z)から元の離散時間信号数列をもとめる操作を逆z変換という。べき級数展開法や部分分数分解法などの解法およびz変換表を用いて、計算を行う。,,,
D-2021_U79,,,,,,変換対と対応づけて理解できるようにした。,,冪級数展開についての具体例を用いた説明
D-2021_U81,,,逆Z変換の計算方法．,べき級数展開法を使う場面．,逆Z変換．,,,
D-2021_U83,,,逆Z変換を求める方法がいくつかあること、またそのやり方。,,,,,
D-2021_U84,,,,逆Z変換をどのようなとこで使うのかはあまり分からなかった。,逆Z変換の方法について学んだ。,問題も解くことができ、今回は理解できたと感じた,,
D-2021_U85,,,z変換の性質は、フーリエ変換の性質に似ていた。,,z変換は復元でき、Ｘ(z)からx(n)を導くことができる。,,,
D-2021_U86,,,部分分数展開法による逆z変換,べき級数展開法に少し自信がない,,演習をしっかり行って対策をしようと思った。,,
D-2021_U88,,,,逆Z変換の導入が難しかった,,,,
D-2021_U89,,,"離散時間システムは差分方程式で記述できる
",,,離散畳み込み和の例題で具体的な操作のイメージがつかめたので良かった,,
D-2021_U90,,,逆Z変換では、部分分数展開法が有効であることを理解できた。,,,部分分数展開が高校の頃やっていたものと変わっていて驚いた。,,
D-2021_U91,,,逆ｚ変換は2パターンのやり方がある,,逆Z変換,,,
D-2021_U93,,,,,"Z変換の性質、逆Z変換について学習した。
その際、冪級数展開法や部分分数展開法が用いられるということを学習した。",,,
D-2021_U94,,,Z変換の性質と逆Z変換の代表的な方法について理解できた。,畳み込みについてはどういう性質かは分かったが、時間領域の畳み込みとは何かがいまだに分からない。,,,,
D-2021_U97,,,差分方程式をZ変換し、それを部分分数分解した後は、通分して元に戻るかの確認をする。,,,知識マップにより、知識の整理をしたい。,,
D-2021_U98,,,まとめ記事を作成した,,,,,
D-2021_U99,,,等比数列の和の公式はとても便利だと思った。,,"今日はz変換の逆変換を学びました。
あとは、知識マップの使い方について学びました。",ｚ変換は楽しいです。,,
D-2022_U14,,,,,Z領域から時間領域への変換である逆Z変換と逆Z変換の求め方、性質,,,
D-2022_U21,,,,,逆Z変換の方法を学んだ。,おもに部分分数展開法で解くので、しっかり復習して解けるようになりたい。,,Z変換表の内容は覚えないといけないのでしょうか。
D-2022_U24,,,べき級数展開を用いて、逆Z変換をすることができた。,,Z変換の性質と、逆Z変換。,,,
D-2022_U25,,,,,Z変換のさまざまな性質を学んだ。線形性、推移定理、スケーリング、指数数列の席、微分、畳み込み定理など。また、逆Z 変換は、べき級数展開法、部分分数展開法により求められる。,今日の内容は数学的にZ変換や逆Z変換について学んだ。ある程度理解できてよかった。,,
D-2022_U26,,,　 Z変換の性質や逆Z変換の定義式や部分分数展開法の具体的な計算方法がわかりました。,, Z変換の性質や逆Z変換の定義やその計算方法,,,　べき級数展開法での具体的な問題とその解き方を実演してほしいです
D-2022_U28,,,Z変換の性質、逆Z変換の求め方,,,Z変換の性質で、線形性等は他の変換でも普段の計算でも成り立つので特に強く気にする必要はないと思うが、推移定理やスケーリングは独特なので忘れないようにしたい。,,
D-2022_U29,,,具体的にZ変換をどのように扱えばいいのかを理解することができた,,Z変換の性質、逆Z変換の現実的な方法,予習をしっかり行って授業に臨んだため、スムーズに理解できた,,
D-2022_U31,,,,複素積分が何故その式になるのか分からなかった。,z変換の性質には線形性、推移定理、スケーリング、微分、指数数列の積、たたみ込み定理がある。逆z変換を求めるにはべき級数展開法、部分分数分解法がある。,要点はz変換の性質と逆z変換の求め方の2つなのでその2つをおさえれば今日の授業に関しては問題がないと思う。,,
D-2022_U32,,,逆z変換をするための一般的な方法として部分分数分解してから各項のz変換対から求めるという方法について理解した。,べき級数展開法による逆z変換の方法があまり理解できなかった。,z変換の性質と逆z変換の方法。,部分分数分解を利用して逆z変換を行うことは以前他の講義でやったことがあるので思い出したい。冪級数展開法による導出はこれまでやったことがないので例題を解いてみたいと思った。,,
D-2022_U36,,,,,,部分分数分解はゴールを見据えて行う（変換表の形に持っていく）。,,
D-2022_U38,,,,,,,,ありません。
D-2022_U39,,,,,"z変換にもフーリエ変換と同様な性質がある。
逆z変換をそのまま計算するのは困難なので、べき級数展開法や部分分数展開法を用いる。",授業単位での理解はできているが、授業全体を通しての理解は薄いと感じた。,,
D-2022_U40,,,部分分数分解法を用いることで逆Z変換を行うことができる,,,,,
D-2022_U42,,,,べき級数展開による逆z変換が具体的にはどうするのかまだあまり理解できてないので、具体例を調べていきたい,,,,
D-2022_U43,,,,,逆Z変換の一般的な求め方．,,,
D-2022_U44,,,,,Z変換の応用もしくは実践,,,
D-2022_U45,,,,,,逆Z変換のやり方について再確認できたので，良かった．,,
D-2022_U51,,,z変換の性質を導出することができた,,,,,
D-2022_U52,,,逆ラプラス変換を用いる時は、部分分数分解をして適応できる公式に当てはめる,,,,,
D-2022_U53,,,,差分方程式が何に使われているのか、応用を知りたい。,,分かりやすかったです,,
D-2022_U54,,,,,"数学的な内容が多くきつかった
",,,
D-2022_U55,,,,,"離散時間システムのことを学んだ。離散時間システムは入力にある変換を施して出力したものであり、線形システム、時不変システムなどさまざまである。
また伝達関数とは入力と出力の比からなり、入力から出力への伝達量を表している。伝達関数は差分方程式からも求めることができ、その伝達関数の極や零点からシステムの性質を調べることができる。",システムを理解していくにあたって必要な知識を得ることができてよかった。,,
D-2022_U56,,,,,逆Z変換について学んだ。また、解放として冪級数展開法と部分分数展開法を学んだ。,実際に部分分数展開法を使って解いてみることでしっかりと理解できるようにしたい。,,
D-2022_U58,,,,積分路Cを用いて逆Z変換を行う場合はどうなるのかが分からなかった。,Z変換の性質と逆Z変換のやり方,,,
D-2022_U59,,,,,,しっかり理解できた,,
D-2022_U60,,,,,逆Z変換についての説明,逆Z変換は難しいなと思いました。,,特にありません。
D-2022_U61,,,,部分分数分解以外での方法を用いて実際に式を求めること。,前回のｚ変換の考え方を用いて、逆ｚ変換を行う。,部分分数分解での方法以外の場合での求め方も実際に考えてみたいと感じた。,,
D-2022_U62,,,,,,,,特にありません。
D-2022_U65,,,逆Z変換,,逆Z変換について,"逆Z変換の計算方法やZ変換、ラプラス変換との関係性を理解することができた
",,
D-2022_U66,,,Z変換の原理を理解することができた　,具体的な計算が理解しきれなかった,,計算も自力でできるようになっておきたい,,
D-2022_U67,,,,,"Z変換には畳み込みなどの性質がある
逆Z変換でZ変換された数列から元の数列を表現できる",,,
D-2022_U69,,,逆Z変換,,,,,
D-2022_U7,,,逆Z変換の方法,演習の２問目の計算が大変で、間違えてそうなので正しい解法を知りたい。,Z変換の性質と逆Z変換,,,
D-2022_U72,,,逆Z変換のやり方,,Z変換の性質及び逆Z変換,簡潔で分かりやすい,,
D-2022_U77,,,部分分数分解による逆z変換の計算。,,,,,
D-2022_U80,,,,,今日の内容は離散時間信号とZ変換だった,,,
D-2022_U83,,,,べき級数展開による逆Z変換,,,,
D-2022_U84,,,,,逆Z変換について,今回は分量がすくなかったので分かりやすかった,,
D-2022_U85,,,逆Z変換の計算方法のうち、部分分数展開法のやり方がよく理解できた。,,Z変換の諸性質と逆Z変換について。,Z変換対を用いて計算することができてよかった。,,
D-2022_U87,,,,,離散時間信号の数列の算出方法,,,
D-2022_U89,,,"部分分数展開法による逆Z変換の解き方を学ぶことができた。
Z変換の性質についてより理解することができた。","ベキ級数点解放による逆Z変換があまり分からなかった。
",,"今日の授業でZ変換や逆Z変換の学習を深めることができた。
次の授業で知識マップを用いてより知識を深めたいと思います。",,
D-2022_U9,,,,,今日は逆ｚ変換について学習した。,今日は集中して演習に取り組めたので良かった。,,
D-2022_U90,,,z変換の性質には，フーリエ変換に似たような性質がある．その中でも，推移定理は離散時間システムの解析の際に重要な性質である．逆z変換は閉路Cを積分路とした線積分で求めることができるが，実際に扱う離散時間システムのz変換は有理関数になることが多いため，部分分数分解して逆z変換対から求めることが普通である．,部分分数分解を忘れていた．,,,,
D-2022_U91,,,,,今回の授業では、Z変換と逆Z変換の意味とその性質について学習した。逆Z変換はX(z)から元の離散時間信号の数列x(n)を求める複素数の関数に関する演算である。,,,
D-2022_U92,,,,,z変換の様々な性質及び逆Z変換について,Z変換に合わせて、逆Z変換も苦手意識が残っているのでなくせるようにたくさん問題を解きたいと思った。,,
D-2022_U93,,,"畳み込み演算のz変換はフーリエ変換同様複素領域の積で表される．
逆z変換には部分分数分解の理解が必須",,,,,
